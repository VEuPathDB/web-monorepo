#!@perl@

## This filter transforms its input to output according to its command-line
## arguments.  The input format is tab-delimited.  The first field is used to
## decide whether to include the record in the output.  If it's included, the
## first field and its separating tab are stripped off.
## The two arguments are a switch that determines the type of filtering
## (string or numeric) and a value.  In string filtering, the first field must
## be a substring of the value parameter.  In numeric filtering, the first
## field must have a numeric value less than or equal to the value parameter.
## It is assumed in numeric filtering that the input is in ascending order by
## the first field value.

use strict;

my $filter_type = $ARGV[0];
my $value = $ARGV[1];
my $USAGE = "usage: $0 [-n | -s] <value>\n";

if ($#ARGV != 1) {
	die $USAGE;
}

if ($filter_type eq '-n') {
	while (my $line = <STDIN>) {
		chomp $line;
		my @fields = split /\t/, $line, 2;
	        last if ($value && $fields[0] && $fields[0] > $value);
        	print "$fields[1]\n";
	}
} elsif ($filter_type eq '-s') {
	while (my $line = <STDIN>) {
		chomp $line;
		my @fields = split /\t/, $line, 2;
	        next if ($value && $fields[0] && !($value =~ m/$fields[0]/));
        	print "$fields[1]\n";
	}
} else {
	die $USAGE;
}
