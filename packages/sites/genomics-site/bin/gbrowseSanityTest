#!/usr/bin/perl

use strict;

#!/usr/bin/perl -w

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Data::Dumper;
use XML::Simple;
use Time::HiRes qw(gettimeofday);

use DBI;
use List::Util qw(min max);
use Getopt::Long qw(GetOptions);
use WDK::Model::ModelConfig;
use ApiCommonWebsite::Model::SqlXmlParser;
$| = 1;
my ($model, $gbrowseFile, $indexOnly, $failuresOnly, $skipTo, $stopAfter, $showParse, $showSql, $showCommentedSql, $sqlMode, $showDbInfo);

$stopAfter = 1000;
GetOptions("model=s" => \$model,
           "gbrowseFile=s" => \$gbrowseFile,
           "indexOnly!" => \$indexOnly,
           "failuresOnly!" => \$failuresOnly,
           "skipTo=i" => \$skipTo,
           "stopAfter=i" => \$stopAfter,
           "showParse!" => \$showParse,
           "showSql!" => \$showSql,
           "showCommentedSql!" => \$showCommentedSql,
           "showDbInfo!" => \$showDbInfo,
	  );

&usage unless ($gbrowseFile && $model);

$sqlMode = $showSql;
$sqlMode = 'commented' if $showCommentedSql;

my $parser = ApiCommonWebsite::Model::SqlXmlParser->new($gbrowseFile, $model, $showParse);

exit(0) if $showParse;

my $sqlQueryArray = $parser->getSqlQueryArray();
my $sanityTestInfo = $parser->getSanityTestInfo();

my ($sanityConfig, $defaultParams, $sqlValuesDecl) =
  &getSanityConfig($sqlQueryArray, $sanityTestInfo, $model);

#print Dumper $sanityConfig;

if ($indexOnly) {
  &showIndex($sanityConfig);
  exit(0);
}

my $sqlQueryHash = &getQueryNameHash($sqlQueryArray);

my $parentFeatureTests = {};   # tests that subfeature queries refer to

my $maxPrepareCounts = &validateTests($sqlQueryHash, $sqlQueryArray, $sanityConfig, $defaultParams, $parentFeatureTests);

my $dbh = getDbHandle($showDbInfo);

&runTests($dbh, $sqlQueryHash, $sanityConfig, $sqlValuesDecl, $failuresOnly, $skipTo,
	  $stopAfter, $defaultParams, $parentFeatureTests, $sqlMode, $maxPrepareCounts, $parser);


###########################################################################


# make structure that has one element per test
sub getSanityConfig {
  my($sqlQueryArray, $sanityTestInfo, $model) = @_;

  my $sanityConfig = {};
  $sanityConfig->{test} = [];

  foreach my $sqlQuery (@$sqlQueryArray) {
    my $test = {name => $sqlQuery->{name}};  
    if ($sqlQuery->{testParamValues}) {
      foreach my $testParamValues (@{$sqlQuery->{testParamValues}}) {
        die "<testParamValues> for $sqlQuery->{name} must include a 'project=' attribute\n" unless $testParamValues->{project};
        next if $testParamValues->{project} ne $model;
        $test->{param} = $testParamValues->{param};
      }
    }
    push(@{$sanityConfig->{test}}, $test);
  }



  my $testInfo;
  foreach my $testInfoDecl (@$sanityTestInfo) {
      if ($testInfoDecl->{project} eq $model) {
	  die "Duplicate <sanityTestInfo model=\"$model\"" if $testInfo;
	  $testInfo = $testInfoDecl;
      }
  }

  die "Cannot find <sanityTestInfo project=\"$model\">" unless $testInfo;

  my $defaultParams = {};
  foreach my $defaultParamValue (@{$testInfo->{defaultParamValue}}) {
    $defaultParams->{$defaultParamValue->{name}} =
      {value=> $defaultParamValue->{value}, sql => $defaultParamValue->{value}};
  }

  return ($sanityConfig, $defaultParams, $testInfo->{sqlValue});
}

sub showIndex {
  my ($sanityConfig) = @_;

  my $count = 0;
  foreach my $test (@{$sanityConfig->{test}}) {
    $count++;
    my $testString = &test2string($test);
    print "$testString [test: $count]\n\n";
  }
}

sub test2string {
  my ($test) = @_;


  my @paramStrings;
  foreach my $param (@{$test->{param}}) {
    my $paramString = "-$param->{name} '";
    $paramString .= $param->{parentFeatureTest}?
      $param->{parentFeatureTest} : $param->{value};
    $paramString .= "'";
    push(@paramStrings, $paramString);
  }
  my $paramsString = join(" ", @paramStrings);
  return "$test->{name} $paramsString";
}

sub validateTests {
  my ($sqlQueryHash, $sqlQueryArray, $sanityConfig, $defaultParams, $parentFeatureTests) = @_;

  my %testedQueryNames =
    &getTestedQueryNames($sanityConfig, $parentFeatureTests);

  my $maxPrepareCnts={};

  foreach my $query (@$sqlQueryArray) {
    my $queryName = $query->{name};
    if (!$testedQueryNames{$queryName}) {
	print "NO TEST FOR: $queryName\n\n";
    }
    else {
      my $test = $testedQueryNames{$queryName};
      if (my $testPrepare = $test->{prepare}) {
 	findPrepareSql($test, $sanityConfig->{sqlValue}, $maxPrepareCnts); # validate it
      }
    }
  }

  foreach my $testedQueryName (keys %testedQueryNames) {
    print "TEST OF NON-EXISTENT QUERY: '$testedQueryName'\n\n"
      unless $sqlQueryHash->{$testedQueryName};
    ## make sure we have a name and value for the param
  }
  return $maxPrepareCnts;
}

sub findPrepareSql {
  my ($test, $sqlValues, $maxPrepareCounts) = @_;

  my $type = $test->{prepare}->[0]->{type};
  my $count = $test->{prepare}->[0]->{count};
  my $sqlValue = $sqlValues->{$type};
  $sqlValue || die "can't find sqlValue for <prepare type=\"$type\">";
  $maxPrepareCounts->{$type} = $count if $count > $maxPrepareCounts->{$type};

  return $sqlValue->{sql};
}


sub getQueryNameHash {
  my ($sqlQueryArray) = @_;

  my $qnh = {};
  foreach my $sqlQuery (@$sqlQueryArray) {
    $qnh->{$sqlQuery->{name}} = $sqlQuery;
  }
  return ($qnh);
}

sub getTestedQueryNames {
  my ($sanityConfig, $parentFeatureTests) = @_;

  my %testedNames;
  my $count=0;
  foreach my $test (@{$sanityConfig->{test}}) {
    $count++;
    $test->{min} = 1 if $test->{min} eq "";
    $test->{max} = 10000000 if $test->{max} eq "";
    $testedNames{$test->{name}} = $test;
    foreach my $param (@{$test->{param}}) {
      if ($param->{parentFeatureTest}) {
	$parentFeatureTests->{$param->{parentFeatureTest}} = 1;
      }
    }
  }
  foreach my $test (@{$sanityConfig->{test}}) {
    if ($parentFeatureTests->{$test->{name}}) {
      $parentFeatureTests->{$test->{name}} = {test => $test};
    }
  }
  return %testedNames;
}

sub getQueryParamNames {
  my ($sqlString) = @_;

  my %paramNames;
  while ($sqlString =~ /\$(\w+)/g){
    $paramNames{$1} = 1;
  }
  return keys %paramNames;
}

sub getDbHandle {
  my ($showDbInfo) = @_;

  my $c = new WDK::Model::ModelConfig($model);

  my $dsn = $c->getDbiDsn();
  my $login = $c->getLogin();

  my $dbh = DBI->connect(
                $c->getDbiDsn, 
                $c->getLogin, 
                $c->getPassword,
                { PrintError => 1, RaiseError => 0}
                ) or die "Can't connect to the database: $DBI::errstr\n";
  $dbh->{LongReadLen} = 1000;
  $dbh->{LongTruncOk} = 1;
  print "db info:\n  dsn=$dsn\n  login=$login\n\n" if $showDbInfo;
  return $dbh;
}



sub runTests {
  my ($dbh, $sqlQueryHash, $sanityConfig, $sqlValuesDecl, $failuresOnly, $skipTo, $stopAfter, $defaultParams, $parentFeatureTests, $sqlMode, $maxPrepareCounts, $parser) = @_;

  my $sqlValues = &getSqlValues($dbh, $sqlValuesDecl, $maxPrepareCounts);

  my $count = 0;
  my $passed = 0;
  my $failed = 0;
  my $runCount = 0;
  my $totalTime = 0;

  foreach my $test (@{$sanityConfig->{test}}) {
    $count++;
    next if ($count < $skipTo);
    last if ($count > $stopAfter);
    $runCount++;
    my $testString = &test2string($test);

    my ($parentFeatureId, $parentFeatureRowCount) =
      &findParentFeatureId($dbh, $test->{param}, $defaultParams, $sqlValues,
			   $parentFeatureTests, $parser);

    my $startTime = gettimeofday();
    my ($rowCount, $sqlString) = 
      &runSingleTest($dbh, $test, $defaultParams,
		     $sqlValues, $parentFeatureTests, $parentFeatureId, $parser);
    my $time = gettimeofday() - $startTime;
    $time = int($time * 10000)/10000;
    $totalTime += $time;
    my $multiplier = "";
    if ($parentFeatureId) {
      $multiplier = " ($time multiplied by $parentFeatureRowCount parent feature rows)";
      $time *= $parentFeatureRowCount;
    }
    if ($rowCount >= $test->{min} && $rowCount <= $test->{max}) {
      print "$time$multiplier PASSED $testString (returned $rowCount) [test: $count]\n\n"
	unless $failuresOnly;
      print "sql:\n$sqlString\n\n" if $sqlMode;
      $passed++;
    } else {
      $failed++;
      print "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n";
      print "$time FAILED $testString [test: $count] expected $test->{min} to $test->{max}.  got: $rowCount

sql:
$sqlString
";
      print "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n";
    }

  }
  print "
Ran $runCount tests
  $passed passed
  $failed failed
Total time: $totalTime
";
}
sub runSingleTest {
  my ($dbh, $test, $defaultParams, $sqlValues, $parentFeatureTests, $parentFeatureId, $parser) = @_;

  my $rawSqlString = $parser->getSqlStringFromSqlQuery($sqlQueryHash->{$test->{name}});

  my $sqlString = &interpolateParams($rawSqlString, $defaultParams,
				     $test->{name},
				     $test->{param}, $sqlValues,
				     $parentFeatureId);
  my @preparedInputs;
  if ($test->{prepare}) {
    @preparedInputs = getPreparedInputs($test, $sqlValues);
  } else {
    push(@preparedInputs, []);
  }

  my $rowCount = 0;
  my $stmt = $dbh->prepare($sqlString);
  foreach my $preparedInput (@preparedInputs) {
    $stmt->execute(@$preparedInput);
    my $parentFeatureTest = $parentFeatureTests->{$test->{name}};
    my $parentFeatureId;

    while (my $row = $stmt->fetchrow_hashref()) {
      $rowCount++;
      # if we have a feature_id, remember it in case there is a subfeature query
      # that might need it.
      $parentFeatureId = $row->{FEATURE_ID} if $rowCount == 1;
    }
    if ($parentFeatureTest) {
      $parentFeatureTest->{featureId} = $parentFeatureId;
      $parentFeatureTest->{rowCount} = $rowCount;
    }
  }

  return ($rowCount, $sqlString);
}

sub getPreparedInputs {
  my ($test, $sqlValues) = @_;

  my $prepareType = $test->{prepare}->[0]->{type};
  my $count = $test->{prepare}->[0]->{count};
  my $answer = $sqlValues->{$prepareType};
  die "can't find <sqlValue name=\"$prepareType\"> which is used by a <prepare>\n" unless $answer;
  my @preparedInputs = @$answer;
  $#preparedInputs = $count-1;
  return @preparedInputs
}

sub findParentFeatureId {
  my ($dbh, $params, $defaultParams, $sqlValues, $parentFeatureTests, $parser) = @_;
  my $parentFeatureId;
  my $parentFeatureRowCount;

  foreach my $param (@$params) {
    next unless $param->{parentFeatureTest};
    my $parentTestStuff = $parentFeatureTests->{$param->{parentFeatureTest}};
    if (!$parentTestStuff->{featureId}) {
      print STDERR "(running test '$parentTestStuff->{test}->{name}' to get parent feature id)\n";
      &runSingleTest($dbh, $parentTestStuff->{test}, $defaultParams,
		     $sqlValues, $parentFeatureTests, undef, $parser);
    }
    $parentFeatureId = $parentTestStuff->{featureId};
    $parentFeatureRowCount = $parentTestStuff->{rowCount};
  }
  return ($parentFeatureId, $parentFeatureRowCount);
}

sub getSqlValues {
  my ($dbh, $sqlValueElements, $maxPrepareCounts) = @_;

  my $answer = {};

  foreach my $sqlValue (@$sqlValueElements) {
    my $sql = $sqlValue->{sql}->[0];

    # here if running a query to get a bunch of rows to iterate test over
    if (my $maxCount = $maxPrepareCounts->{$sqlValue->{name}}) {
      $sql =~ s/ROWNUM_COUNT/$maxCount/;
      my $stmt = $dbh->prepare($sql);
      $stmt->execute();
      my @prepareResult;
      while (my $result = $stmt->fetchrow_arrayref()) {
	my @r = @$result;
	push(@prepareResult, \@r);
      }
      $answer->{$sqlValue->{name}} = \@prepareResult;
    }
    # here to get just one row and one column 
    else {
      my $stmt = $dbh->prepare($sql);
      $stmt->execute();
      my $rowCount;
      while (my @result = $stmt->fetchrow_array()) {
	$rowCount++;
	die ("sqlValue $sqlValue->{name} does not return 1 row ($rowCount)") unless $rowCount == 1;
	my $columnCount = scalar(@result);
	die ("sqlValue $sqlValue->{name} does not return 1 column ($columnCount)")
	  unless $columnCount == 1;
	$answer->{$sqlValue->{name}} = $result[0];
      }
    }
  }
  return $answer;
}

sub interpolateParams {
  my ($rawSqlString, $defaultParams, $testName, $params, $sqlValues,$parentFeatureId) = @_;

  my $sqlString = $rawSqlString;

  # first do explicit values
  foreach my $param (@$params) {
    my $macro = '\$' . $param->{name};
    my $val = $param->{value};
    if ($param->{parentFeatureTest}) {
      $val = $parentFeatureId;
      die("Can't find feature_id from parent test '$param->{parentFeatureTest}'\n") unless $val;
   }
    $val = &substituteSqlValue($val, $sqlValues);
    $sqlString =~ s/$macro/$val/g if $val;
  }

  # then defaults
  foreach my $paramName (keys %$defaultParams) {
    my $macro = '\$' . $paramName;
    my $val = $defaultParams->{$paramName}->{value};
    $val = &substituteSqlValue($val, $sqlValues);
    if ($sqlMode eq 'commented') {
      $sqlString =~ s/$macro/$val \/\* P_A_R_A_M$paramName \*\//g
    } else {
      $sqlString =~ s/$macro/$val/g
    }
  }

  foreach my $param (@$params) {
    my $macro = '\$' . $param->{name};
    die("Can't find value for param '$param->{name}' of test '$testName'\n") 
       if $sqlString =~ /$macro/;
  }

  $sqlString =~ s/P_A_R_A_M/\$/g;

  return $sqlString;
}

sub substituteSqlValue {
  my ($macroMaybe, $sqlValues) = @_;

  my $val = $macroMaybe;

  if ($macroMaybe =~ /\$\$(\S+)\$\$/) {
    $val = $sqlValues->{$1};
    die ("couldn't find sqlValue for macro '$macroMaybe'") unless $val;
  }

  return $val;
}

sub usage {
  die
q{
Test all sql in a gbrowse XML file

Usage: gbrowseSanityTest --model PlasmoDB --gbrowseFile gbrowseXmlFile [--indexOnly | --failuresOnly] [--skipTo testnum] [--stopAfter testnum] [--showParse] [--showSql] [--showCommentedSql] [--showDbInfo]

Where:
  model            the name of the model in WDK parlance
  gbrowseFile      the xml file that contains the queries used by gbrowse
  indexOnly        don't run the test. only print tests and their test number
  failuresOnly     run the test but only report the failures
  skipTo           the index of the first test to run
  stopAfter        the index of the last test to run
  showParse       show the data structure resulting from the parse of gbrowseFile
  showSql          show the SQL even if the test passes
  showCommentedSql like --showSql, but with macro names labelled in SQL comments
                    (note that this can cause errors for macros inside quotes)
  showDbInfo       show the database connection info (dsn and login)

Sample test info in the gbrowse XML:
<DAS>
    <defaultParamValue name="rend" value="500000"/>
    <defaultParamValue name="base_start" value="1000"/>
    <defaultParamValue name="dlm" value=","/>
    <defaultParamValue name="srcfeature_id" value="$$na_seq_id_MAL3$$"/>

    <sqlValue name="na_seq_id_MAL3">
      <sql>
      select na_sequence_id from dots.externalnasequence where source_id = 'MAL3'
      </sql>
    </sqlValue>

    <sqlValue name="na_feat_id_PF11_0344">
      <sql>
      select na_feature_id from dots.genefeature where source_id = 'PF11_0344'
      </sql>
    </sqlValue>

  <module name="GUS.pm"> 
    <sqlQuery> 
      <name>get_feature_by_name</name>
      <testParamSet>
         <param name="name" value="MAL1"/>
      </testParamSet>
      <sql>
       ...
      </sql>
     </sqlQuery>
  </module>

 <module name="Segment.pm">
    <test name="annotation:density:subfeatures" min="1" max="2000">
    </test>

    <sqlQuery>
      <name>annotation:density:subfeatures</name>
      <testParamSet>
        <param name="parent_id" value="$$na_feat_id_PF11_0344$$"/>
      </testParamSet>
    ...
    </sqlQuery>


  ...

Strategy for adding tests to the gbrowse XML File

Step 1: create <defaultParam> tags

Step 2: create <sqlValue> tags.  Use one of these when there is a <param> or 
        <defaultParamValue> that expects an internal ID (eg, an na_sequence_id)
        as a value.  Because your sanity test file will go into SVN, you do not
        want to pollute it with hard-coded internal IDs.  Instead, use an
        <sqlValue> tag to write sql that will produce an internal ID from a 
        stable ID.  Give the <sqlValue> a unique name.  You can now refer to it
        in any <param> or <defaultParamValue> by using the $$ macro syntax (see
        the sample sanity file above).

Step 3: for any query that needs param values that are not provided by the defaults, 
        add a <paramValuesSet> to provide the needed param values

Step 4: to add additional tests (ie, to test different param values) add more 
        <paramValuesSet>s

};
}


