#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";
use strict;
use Getopt::Long;
use Time::Local;
use FgpUtil::Log::SlowQueryReport;

my ($threshold, $genepage, $notgenepage, $width_filter, $time_filter, $sort_column, $plotOutputFile, $logTailSize, $logDeathImmunity, $debug);
my ($width_min, $width_max);

usage() unless scalar(@ARGV);

$sort_column=2;
&GetOptions('s=s' => \$threshold,
	    'g' => \$genepage,
	    'n' => \$notgenepage,
	    'w=s' => \$width_filter,
	    't=s' => \$time_filter,
	    'c=s' => \$sort_column,
	    'p=s' => \$plotOutputFile,
	    'l=s' => \$logTailSize,
	    'i' => \$logDeathImmunity,
            'd' => \$debug,
	   );

if ($width_filter) {
  ($width_min, $width_max) = split(/,\s*/, $width_filter);
}

my $parseLogRecord = sub {
  my ($logRecord) = @_;

  my $reject = 0;

# QUERYTIME       Fri Mar 12 22:26:49 2010        1268450809.72195        v       Segment.pm      7.12     5792    alignment:dbEST

  $reject = 1 unless $logRecord =~ /QUERYTIME/;
  $reject = 1 if $logRecord =~ /\=\=/;  # some lines in the log are mangled, with missing newlines
  # the symptom is that the next log entry is mashed in
  # these are delimited by ========, so dodge that
  $reject = 1 if ($genepage && !$logRecord =~ /GENEPAGE/);
  $reject = 1 if ($notgenepage && $logRecord =~ /GENEPAGE/);
  chomp($logRecord);
  my ($qt, $timestampString, $timestamp, $tag, $module, $seconds, $width, $name) = split(/\t/, $logRecord);

  $reject = 1 if ($width_min && $width < $width_min);
  $reject = 1 if ($width_max && $width > $width_max);
  $reject = 1 if ($timestamp =~ /[a-z,A-Z]/); # this happened: the "time" field had a word embedded in it

  return ($reject, $timestamp, $seconds, $name, $width);
};

FgpUtil::Log::SlowQueryReport::makeReport($parseLogRecord, $time_filter, $plotOutputFile, $sort_column, $logTailSize, $logDeathImmunity, $threshold, $debug);

sub usage {
  print STDERR "

Print a report summarizing the gbrowse slow query logs.

Takes one or more apache error logs on standard input.

usage:  gbrowseSlowQueryReport -s secs [-g] [-n] [-w width_min[,length_max]] [-t starttime[,endtime]] [-c colnum] [-p plotOutputFile] [-d]

where:
  -s:  slowness threshold in seconds.  run times over secs are reported in Slow columns
  -g:  genepage only flag. only include queries logged with \"GENEPAGE\"
  -n:  not-genepage flag. complementary to -g flag (only non-genepage queries)
  -w:  width filter
  -t:  time filter (use seconds since epoch, which is a column in gbrowse log)
  -c:  column to sort on (default is 2, the total time)
  -p:  optional output file: a tab delimited file to pass as input
        to wdkSlowQueryPlot.  Used to visualize the query durations over time.
  -l:  log tail size -- number of records of access log to analyze for
  -d:  print debugging info

Standard in must contain one or more lines specifying log files.   Each line has three columns, tab delimited:
  - server name
  - log file glob
  - access log file name

gbrowseSlowQueryReport uses ssh to login into that server and read all the log files implied by the log file glob.

The access log is used to get a count of pages, which are shown in the page-requests column in the Statistics section at the 
bottom of the report.  This is useful if we know that certain queries only happen on that page.  Right now this is hard coded 
to look for EuPathDB gene pages.  It is useful for the gbrowseSlowQueryReport which tags queries as belonging to the gene page.  

";
  exit(1);
}
