#!/usr/bin/perl
use strict;
use Getopt::Long;
use Time::Local;

my ($threshold, $genepage, $width_filter, $time_filter, $sort_column);
$sort_column=2;
&GetOptions('s=s' => \$threshold,
            'g' => \$genepage,
            'w=s' => \$width_filter,
            't=s' => \$time_filter,
            'c=s' => \$sort_column,
            );


usage() unless $threshold;

print "filtering by timestamp to include only queries run since " . localtime($time_filter) . "\n"
  if $time_filter;
my $width;  # what's "width"?

my ($width_min, $width_max);
if ($width_filter) {
  ($width_min, $width_max) = split(/,\s*/, $width_filter);
}

my ($time_min, $time_max);
if ($time_filter) {
  ($time_min, $time_max) = split(/,\s*/, $time_filter);
}

# 89468376 [WARN ] org.gusdb.wdk.model.dbms.SqlUtils:324 - 130.91.178.191 - [27/Sep/2010:11:24:05 -0400] SLOW SQL [GeneVQ.DomainDatabase-uncached-result]: 11.295 seconds.
my $h;

while(<STDIN>) {
  next unless /SLOW SQL/;
  next if /\=\=/;  # some lines in the log are mangled, with missing newlines
                   # the symptom is that the next log entry is mashed in
                   # these are delimited by ========, so dodge that
  next if ($genepage && !/GeneTables/);

  my ($digits, $class, $line, $ip, $day, $mon, $year, $hour, $min, $sec, $tz, $name, $seconds, $absoluteTime);
  if (/(\d+) \[WARN \] (.*):(\d+) - ([0-9.]*) - \[(\d+)\/(.+)\/(\d+):(\d\d):(\d\d):(\d\d) (.+)\] .*SLOW SQL \[(.*)\]: ([0-9.]*) seconds/) {
    ($digits, $class, $line, $ip, $day, $mon, $year, $hour, $min, $sec, $tz, $name, $seconds) = ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);

    my $monthNumber = index("JanFebMarAprMayJunJulAugSepOctNovDec", $mon) / 3;
    $absoluteTime = timegm($sec, $min, $hour, $day, $monthNumber, $year - 1900);
  } else {
    next;
  }

  next if ($time_min && $absoluteTime < $time_min);
  next if ($time_max && $absoluteTime > $time_max);
  next if ($width_min && $width < $width_min);
  next if ($width_max && $width > $width_max);
  if (!$h->{$name}) {
    $h->{$name} = [$name, 0, 0, 0, 0, 0];
  }
  $h->{$name}->[1] += $seconds;      # total secs
  $h->{$name}->[2] += 1;             # count
  if ($seconds > $threshold) {
    $h->{$name}->[3] += $seconds;    # total secs over threshold
    $h->{$name}->[4] += 1;           # count over threshold
  }
  $h->{$name}->[5] = $seconds if ($seconds > $h->{$name}->[5]); # max secs
}

my @sorted = sort {$b->[$sort_column-1] <=> $a->[$sort_column-1]} values(%$h);


# name total_secs count avg_secs total_secs_over count_over  worst_secs
  print sprintf("%50s%12s%8s%10s%12s%8s%6s\n",('Name','TotSecs','#','AvgSecs','SlowSecs','Slow_#','Worst'));

foreach my $a (@sorted) {
  my $avg = $a->[1] / $a->[2];
  print sprintf("%50s%12.2f%8d%10.2f%12.2f%8d%6.2f\n",($a->[0],$a->[1],$a->[2],$avg,$a->[3],$a->[4],$a->[5]));
}

sub usage {
  print STDERR "

Print a report summarizing the model slow query logs.

Takes one or more logs on standard input.

usage:  modelSlowQueryReport --s secs [--g] [--w width_min[,length_max]] [--s starttime[,endtime]] [--c colnum]

where:
  --s:  slowness threshold in seconds.  run times over secs are reported in Slow columns
  --g:  genepage only flag
  --w:  width filter
  --t:  time filter (use seconds since epoch, which is a column in model log)
  --c:  column to sort on (default is 2, the total time)

";
  exit(1);
}
