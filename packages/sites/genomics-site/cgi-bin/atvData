#!/usr/bin/perl

# Simple cgi script for retrieving ATV phylogenetic tree data
# for ATV applet.
# Requires WDK model-config file for DBI connection strings.
#
# Pass the source_id as an id parameter
# /cgi-bin/atvData?id=16879 

use strict;
use lib $ENV{GUS_HOME};
use DBI;
use CGI qw/:standard/;
use CGI::Carp qw(fatalsToBrowser set_message);
use ApiCommonWebsite::Model::ModelConfig;

BEGIN {
    # Carp callback for sending fatal messages to browser
    sub handle_errors {
        my ($msg) = @_;
        print "<h3>Oops</h3>";
        my $isPublicSite = $ENV{'SERVER_NAME'} =~ 
           m/
             ^(qa|www|.*patch.*\.)?  # optional hostname
             [^\.]+                  # single subdomain
             \.org/x;
       ($isPublicSite) ?
           print "<p>There was a problem running this service." :
           print "<p>Got an error: <pre>$msg</pre>";
    }
    set_message(\&handle_errors);
}

my $q = new CGI;

($q->param('project_id')) or die "parameter 'project_id' is required";

my $c = new ApiCommonWebsite::Model::ModelConfig($q->param('project_id'));

my $dbh = DBI->connect(
    $c->{dbiDsn},
    $c->{login},
    $c->{password},
    { PrintError => 1,
      RaiseError => 0
    }
) or die "Can't connect to the database: $DBI::errstr\n";;

my $sql = qq(select to_char(atv) from apidb.phylogenetictree where source_id = ?);

my $sth = $dbh->prepare($sql);
#$sth->execute($q->path_info() =~ m|/([^/]+)|);
$sth->execute($q->param('id'));


print $q->header('text/plain');

while (my @row = $sth->fetchrow_array) {
    print $row[0];
}

$sth->finish();

