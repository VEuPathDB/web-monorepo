#!/usr/bin/perl -T

# cgi proxy to return embeddable 
# consensus sequences or est alignments
#
# Takes cgi parameters 'id' (dots.assembly.na_sequence_id)
# and 'what' (subroutine in this script to call).
#
# Adapted from assemblyCAP2.pl by J. Crabtree
#

$| = 1;

use strict;
use CGI;
use CGI::Carp qw(fatalsToBrowser set_message);
use lib '../cgi-lib';
use GUS::ObjRelP::DbiDatabase;
use GUS::Model::DoTS::Assembly;

use lib map { /(.*)/ } split /:/ => $ENV{PERL5LIB}; # untaint PERL5LIB
use WDK::Model::ModelConfig;

BEGIN {

    # Carp callback for sending fatal messages to browser
    sub handle_errors {
        my $msg = shift;
        print "<h3>Oops</h3>";
        print "<p>Got an error: <pre>$msg</pre>";
    }
    set_message(\&handle_errors);
}


my $q = new CGI;
$q->param('project_id') or die "valid 'project_id' is required";

my $c = new WDK::Model::ModelConfig( $q->param('project_id') );
my $dsn = $c->getAppDbDbiDsn;
my $username = $c->getAppDbLogin;
my $password = $c->getAppDbPassword;

my $naSeqID = $q->param('id') || $ARGV[0];
$naSeqID =~ s/[^\d]//g;
exit if $naSeqID =~ /^\s*$/;

# untaint
my ($what) = $q->param('what') =~ m/([^\s]+)/;


new GUS::ObjRelP::DbiDatabase($dsn, 
                              $username,$password, 0, 1, undef, 'core');


# Hide private sequences if configured to do so
#
# not using this now, but it's here for future reference
my $showPrivateSeqs = 1;
my @privateSeqDbIds = ();
my $extDbIds = undef;
if ($showPrivateSeqs != 1) {
    $extDbIds = [ @privateSeqDbIds ];
}


my $assmbly = GUS::Model::DoTS::Assembly->new({'na_sequence_id' => $naSeqID});
my $found = $assmbly->retrieveFromDB();


print "Content-type: text/html\n\n";
$found ? eval $what : print "id $naSeqID not found";
$assmbly->undefPointerCache();
die("error processing request. bad 'what' cgi parameter?\n") if $@;





##################################################################

sub getConsensus {
  print '<pre>';
  print $assmbly->toFasta();
  print '</pre>';
}

sub getAlignment {
  # Display SNPs
  $assmbly->findSNPs(6,undef,0.8);
  print '<pre>';
  $assmbly->printCap2Alignment(1, undef, $extDbIds);
  print '</pre>';
}

