#!/usr/bin/perl -wT

# serve a file from a tar archive.
# call with url of the form 
#
# /cgi-bin/tarpit/apache_path_to_tar_file/file_to_get
#
# where apache_path_to_tar_file is the path to the tar file relative to
# Apache document root. 
#
# /cgi-bin/tarpit/tree4upenn.tar.gz/10019.atv
#
# will extract '10019.atv' from /var/www/html/tree4upenn.tar.gz
#
# The number of leading '/' before file_to_get are significant.
# /cgi-bin/tarpit/tree4upenn.tar.gz//10019.atv
# will attempt to extract '/10019.atv' from the archive.

use strict;
use CGI qw/:standard/;
use CGI::Carp qw(fatalsToBrowser set_message);
use File::Spec;

BEGIN {

    # Carp callback for sending fatal messages to browser
    sub handle_errors {
        my ($msg) = @_;
        print "<h3>Oops</h3>";
        print "<p>Got an error: <pre>$msg</pre>";
    }
    set_message(\&handle_errors);
}

my $q = new CGI;
my $document_root = $ENV{'DOCUMENT_ROOT'};


# url decode
my ($path) = map { s/%([\dA-Fa-f]{2})/pack("C", hex($1))/eg; $_ } 
    (keys %{$q->Vars});

my ($tarfile, $getfile) = splitpath( $document_root . '/' . $q->path_info);

# intercept bad characters
$tarfile =~ m|^([-+@\w./]+)$| or die "invalid characters in tarfile name\n";
$getfile =~ m|^([-+@\w./]+)$| or die "invalid characters in getfile name\n";


print $q->header('text/plain');

my $tarOpts = 'zxOf';

my $taintedCmd = "tar $tarOpts '$tarfile' '$getfile' 2>&-";

# untainting
$ENV{PATH} = "/bin:/usr/bin";
delete @ENV{ 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };
my ($untaintedCmd) = $taintedCmd =~ m/([^;]+)/;

system($untaintedCmd);


# Split a path into the tar archive path and the file to extract
sub splitpath {
    my ($path) = @_;
    
    my @dirs = File::Spec->splitdir( $path );
    
    my (@tarfile_path, @getfile_path, $tarfound, $f);
    
    foreach $f (@dirs) {
        push(@tarfile_path, $f) if !$tarfound;
        push(@getfile_path, $f) if  $tarfound;
        (-f File::Spec->catdir(@tarfile_path)) && $tarfound++;
    }

    return (
        File::Spec->catdir(@tarfile_path),
        File::Spec->catdir(@getfile_path)
    );

}