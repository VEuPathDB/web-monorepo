package GUS::Model::DoTS::AssemblySequence_Row;

# THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY THE GUS::ObjRelP::Generator 
# PACKAGE.
#
# DO NOT EDIT!!

use strict;
use GUS::Model::GusRow;

use vars qw (@ISA);
@ISA = qw (GUS::Model::GusRow);

sub setDefaultParams {
  my ($self) = @_;
  $self->setVersionable(1);
  $self->setUpdateable(1);
}

sub setAssemblySequenceId {
  my($self,$value) = @_;
  $self->set("assembly_sequence_id",$value);
}

sub getAssemblySequenceId {
    my($self) = @_;
  return $self->get("assembly_sequence_id");
}

sub setAssemblyNaSequenceId {
  my($self,$value) = @_;
  $self->set("assembly_na_sequence_id",$value);
}

sub getAssemblyNaSequenceId {
    my($self) = @_;
  return $self->get("assembly_na_sequence_id");
}

sub setNaSequenceId {
  my($self,$value) = @_;
  $self->set("na_sequence_id",$value);
}

sub getNaSequenceId {
    my($self) = @_;
  return $self->get("na_sequence_id");
}

sub setSequenceStart {
  my($self,$value) = @_;
  $self->set("sequence_start",$value);
}

sub getSequenceStart {
    my($self) = @_;
  return $self->get("sequence_start");
}

sub setSequenceEnd {
  my($self,$value) = @_;
  $self->set("sequence_end",$value);
}

sub getSequenceEnd {
    my($self) = @_;
  return $self->get("sequence_end");
}

sub setQualityStart {
  my($self,$value) = @_;
  $self->set("quality_start",$value);
}

sub getQualityStart {
    my($self) = @_;
  return $self->get("quality_start");
}

sub setQualityEnd {
  my($self,$value) = @_;
  $self->set("quality_end",$value);
}

sub getQualityEnd {
    my($self) = @_;
  return $self->get("quality_end");
}

sub setAssemblyOffset {
  my($self,$value) = @_;
  $self->set("assembly_offset",$value);
}

sub getAssemblyOffset {
    my($self) = @_;
  return $self->get("assembly_offset");
}

sub setAssemblyStrand {
  my($self,$value) = @_;
  $self->set("assembly_strand",$value);
}

sub getAssemblyStrand {
    my($self) = @_;
  return $self->get("assembly_strand");
}

sub setGappedSequence {
  my($self,$value) = @_;
  $self->set("gapped_sequence",$value);
}

sub getGappedSequence {
    my($self) = @_;
  return $self->get("gapped_sequence");
}

sub setHaveProcessed {
  my($self,$value) = @_;
  $self->set("have_processed",$value);
}

sub getHaveProcessed {
    my($self) = @_;
  return $self->get("have_processed");
}

sub setProcessedCategory {
  my($self,$value) = @_;
  $self->set("processed_category",$value);
}

sub getProcessedCategory {
    my($self) = @_;
  return $self->get("processed_category");
}

sub setModificationDate {
  my($self,$value) = @_;
  $self->set("modification_date",$value);
}

sub getModificationDate {
    my($self) = @_;
  return $self->get("modification_date");
}

sub setUserRead {
  my($self,$value) = @_;
  $self->set("user_read",$value);
}

sub getUserRead {
    my($self) = @_;
  return $self->get("user_read");
}

sub setUserWrite {
  my($self,$value) = @_;
  $self->set("user_write",$value);
}

sub getUserWrite {
    my($self) = @_;
  return $self->get("user_write");
}

sub setGroupRead {
  my($self,$value) = @_;
  $self->set("group_read",$value);
}

sub getGroupRead {
    my($self) = @_;
  return $self->get("group_read");
}

sub setGroupWrite {
  my($self,$value) = @_;
  $self->set("group_write",$value);
}

sub getGroupWrite {
    my($self) = @_;
  return $self->get("group_write");
}

sub setOtherRead {
  my($self,$value) = @_;
  $self->set("other_read",$value);
}

sub getOtherRead {
    my($self) = @_;
  return $self->get("other_read");
}

sub setOtherWrite {
  my($self,$value) = @_;
  $self->set("other_write",$value);
}

sub getOtherWrite {
    my($self) = @_;
  return $self->get("other_write");
}

sub setRowUserId {
  my($self,$value) = @_;
  $self->set("row_user_id",$value);
}

sub getRowUserId {
    my($self) = @_;
  return $self->get("row_user_id");
}

sub setRowGroupId {
  my($self,$value) = @_;
  $self->set("row_group_id",$value);
}

sub getRowGroupId {
    my($self) = @_;
  return $self->get("row_group_id");
}

sub setRowProjectId {
  my($self,$value) = @_;
  $self->set("row_project_id",$value);
}

sub getRowProjectId {
    my($self) = @_;
  return $self->get("row_project_id");
}

sub setRowAlgInvocationId {
  my($self,$value) = @_;
  $self->set("row_alg_invocation_id",$value);
}

sub getRowAlgInvocationId {
    my($self) = @_;
  return $self->get("row_alg_invocation_id");
}

1;
