package GUS::Model::DoTS::Assembly_Row;

# THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY THE GUS::ObjRelP::Generator 
# PACKAGE.
#
# DO NOT EDIT!!

use strict;
use GUS::Model::DoTS::NASequence;

use vars qw (@ISA);
@ISA = qw (GUS::Model::DoTS::NASequence);

sub setDefaultParams {
  my ($self) = @_;
  $self->setVersionable(1);
  $self->setUpdateable(1);
}

sub setFullLengthCds {
  my($self,$value) = @_;
  $self->set("full_length_cds",$value);
}

sub getFullLengthCds {
    my($self) = @_;
  return $self->get("full_length_cds");
}

sub setAssemblyConsistency {
  my($self,$value) = @_;
  $self->set("assembly_consistency",$value);
}

sub getAssemblyConsistency {
    my($self) = @_;
  return $self->get("assembly_consistency");
}

sub setContainsMrna {
  my($self,$value) = @_;
  $self->set("contains_mrna",$value);
}

sub getContainsMrna {
    my($self) = @_;
  return $self->get("contains_mrna");
}

sub setNumberOfContainedSequences {
  my($self,$value) = @_;
  $self->set("number_of_contained_sequences",$value);
}

sub getNumberOfContainedSequences {
    my($self) = @_;
  return $self->get("number_of_contained_sequences");
}

sub setNotes {
  my($self,$value) = @_;
  $self->set("notes",$value);
}

sub getNotes {
    my($self) = @_;
  return $self->get("notes");
}

sub setGappedConsensus {
  my($self,$value) = @_;
  $self->set("gapped_consensus",$value);
}

sub getGappedConsensus {
    my($self) = @_;
  return $self->get("gapped_consensus");
}

sub setQualityValues {
  my($self,$value) = @_;
  $self->set("quality_values",$value);
}

sub getQualityValues {
    my($self) = @_;
  return $self->get("quality_values");
}

1;
