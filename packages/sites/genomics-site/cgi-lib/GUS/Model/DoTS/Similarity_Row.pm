package GUS::Model::DoTS::Similarity_Row;

# THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY THE GUS::ObjRelP::Generator 
# PACKAGE.
#
# DO NOT EDIT!!

use strict;
use GUS::Model::GusRow;

use vars qw (@ISA);
@ISA = qw (GUS::Model::GusRow);

sub setDefaultParams {
  my ($self) = @_;
  $self->setVersionable(1);
  $self->setUpdateable(1);
}

sub setSimilarityId {
  my($self,$value) = @_;
  $self->set("similarity_id",$value);
}

sub getSimilarityId {
    my($self) = @_;
  return $self->get("similarity_id");
}

sub setSubjectTableId {
  my($self,$value) = @_;
  $self->set("subject_table_id",$value);
}

sub getSubjectTableId {
    my($self) = @_;
  return $self->get("subject_table_id");
}

sub setSubjectId {
  my($self,$value) = @_;
  $self->set("subject_id",$value);
}

sub getSubjectId {
    my($self) = @_;
  return $self->get("subject_id");
}

sub setQueryTableId {
  my($self,$value) = @_;
  $self->set("query_table_id",$value);
}

sub getQueryTableId {
    my($self) = @_;
  return $self->get("query_table_id");
}

sub setQueryId {
  my($self,$value) = @_;
  $self->set("query_id",$value);
}

sub getQueryId {
    my($self) = @_;
  return $self->get("query_id");
}

sub setScore {
  my($self,$value) = @_;
  $self->set("score",$value);
}

sub getScore {
    my($self) = @_;
  return $self->get("score");
}

sub setBitScoreSummary {
  my($self,$value) = @_;
  $self->set("bit_score_summary",$value);
}

sub getBitScoreSummary {
    my($self) = @_;
  return $self->get("bit_score_summary");
}

sub setPvalueMant {
  my($self,$value) = @_;
  $self->set("pvalue_mant",$value);
}

sub getPvalueMant {
    my($self) = @_;
  return $self->get("pvalue_mant");
}

sub setPvalueExp {
  my($self,$value) = @_;
  $self->set("pvalue_exp",$value);
}

sub getPvalueExp {
    my($self) = @_;
  return $self->get("pvalue_exp");
}

sub setMinSubjectStart {
  my($self,$value) = @_;
  $self->set("min_subject_start",$value);
}

sub getMinSubjectStart {
    my($self) = @_;
  return $self->get("min_subject_start");
}

sub setMaxSubjectEnd {
  my($self,$value) = @_;
  $self->set("max_subject_end",$value);
}

sub getMaxSubjectEnd {
    my($self) = @_;
  return $self->get("max_subject_end");
}

sub setMinQueryStart {
  my($self,$value) = @_;
  $self->set("min_query_start",$value);
}

sub getMinQueryStart {
    my($self) = @_;
  return $self->get("min_query_start");
}

sub setMaxQueryEnd {
  my($self,$value) = @_;
  $self->set("max_query_end",$value);
}

sub getMaxQueryEnd {
    my($self) = @_;
  return $self->get("max_query_end");
}

sub setNumberOfMatches {
  my($self,$value) = @_;
  $self->set("number_of_matches",$value);
}

sub getNumberOfMatches {
    my($self) = @_;
  return $self->get("number_of_matches");
}

sub setTotalMatchLength {
  my($self,$value) = @_;
  $self->set("total_match_length",$value);
}

sub getTotalMatchLength {
    my($self) = @_;
  return $self->get("total_match_length");
}

sub setNumberIdentical {
  my($self,$value) = @_;
  $self->set("number_identical",$value);
}

sub getNumberIdentical {
    my($self) = @_;
  return $self->get("number_identical");
}

sub setNumberPositive {
  my($self,$value) = @_;
  $self->set("number_positive",$value);
}

sub getNumberPositive {
    my($self) = @_;
  return $self->get("number_positive");
}

sub setIsReversed {
  my($self,$value) = @_;
  $self->set("is_reversed",$value);
}

sub getIsReversed {
    my($self) = @_;
  return $self->get("is_reversed");
}

sub setReadingFrame {
  my($self,$value) = @_;
  $self->set("reading_frame",$value);
}

sub getReadingFrame {
    my($self) = @_;
  return $self->get("reading_frame");
}

sub setModificationDate {
  my($self,$value) = @_;
  $self->set("modification_date",$value);
}

sub getModificationDate {
    my($self) = @_;
  return $self->get("modification_date");
}

sub setUserRead {
  my($self,$value) = @_;
  $self->set("user_read",$value);
}

sub getUserRead {
    my($self) = @_;
  return $self->get("user_read");
}

sub setUserWrite {
  my($self,$value) = @_;
  $self->set("user_write",$value);
}

sub getUserWrite {
    my($self) = @_;
  return $self->get("user_write");
}

sub setGroupRead {
  my($self,$value) = @_;
  $self->set("group_read",$value);
}

sub getGroupRead {
    my($self) = @_;
  return $self->get("group_read");
}

sub setGroupWrite {
  my($self,$value) = @_;
  $self->set("group_write",$value);
}

sub getGroupWrite {
    my($self) = @_;
  return $self->get("group_write");
}

sub setOtherRead {
  my($self,$value) = @_;
  $self->set("other_read",$value);
}

sub getOtherRead {
    my($self) = @_;
  return $self->get("other_read");
}

sub setOtherWrite {
  my($self,$value) = @_;
  $self->set("other_write",$value);
}

sub getOtherWrite {
    my($self) = @_;
  return $self->get("other_write");
}

sub setRowUserId {
  my($self,$value) = @_;
  $self->set("row_user_id",$value);
}

sub getRowUserId {
    my($self) = @_;
  return $self->get("row_user_id");
}

sub setRowGroupId {
  my($self,$value) = @_;
  $self->set("row_group_id",$value);
}

sub getRowGroupId {
    my($self) = @_;
  return $self->get("row_group_id");
}

sub setRowProjectId {
  my($self,$value) = @_;
  $self->set("row_project_id",$value);
}

sub getRowProjectId {
    my($self) = @_;
  return $self->get("row_project_id");
}

sub setRowAlgInvocationId {
  my($self,$value) = @_;
  $self->set("row_alg_invocation_id",$value);
}

sub getRowAlgInvocationId {
    my($self) = @_;
  return $self->get("row_alg_invocation_id");
}

1;
