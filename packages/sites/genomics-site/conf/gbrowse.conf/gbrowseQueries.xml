<DAS>

<sanityTestInfo project="ToxoDB">
    <defaultParamValue name="name" value="TGME49_039250"/>
    <defaultParamValue name="parent_id" value="TGME49_039250"/>
    <defaultParamValue name="srcfeature_id" value="$$na_seq_id_X$$"/>
    <defaultParamValue name="base_start" value="1"/>
    <defaultParamValue name="rend" value="1311700"/>
    <defaultParamValue name="dlm" value="|"/>

    <sqlValue name="na_seq_id_Ib">
      <sql>
      select na_sequence_id from dots.VirtualSequence where source_id = 'TGME49_chrIb'
      </sql>
    </sqlValue>
    <sqlValue name="na_seq_id_X">
      <sql>
      select na_sequence_id from dots.VirtualSequence where source_id = 'TGME49_chrX'
      </sql>
    </sqlValue>
    <sqlValue name="na_seq_id_IX">
      <sql>
      select na_sequence_id from dots.VirtualSequence where source_id = 'TGME49_chrIX'
      </sql>
    </sqlValue>
    <sqlValue name="mass_spec_feature_id">
      <sql>
      select na_feature_id from dots.MassSpecFeature where rownum=1
      </sql>
    </sqlValue>
    <sqlValue name="similarity_id">
      <sql>
      select similarity_id from dots.SimilaritySpan where rownum=1
      </sql>
    </sqlValue>
</sanityTestInfo>

<sanityTestInfo project="TriTrypDB">
    <defaultParamValue name="srcfeature_id" value="$$na_seq_id_LmjF05_01_20050601_V5.2$$"/>
    <defaultParamValue name="base_start" value="1000"/>
    <defaultParamValue name="rend" value="500000"/>
    <defaultParamValue name="dlm" value=","/>

    <sqlValue name="na_seq_id_LmjF05_01_20050601_V5.2">
      <sql>
      select na_sequence_id from dots.externalnasequence where source_id = 'LmjF05_01_20050601_V5.2'
      </sql> 
    </sqlValue>
    <sqlValue name="na_feat_id_cgd6_780">
      <sql>
      select na_feature_id from dots.genefeature where source_id = 'cgd6_780'
     </sql> 
    </sqlValue>
</sanityTestInfo>


<!--                        GUS.pm                        -->
<!-- This is the only query implemented by GUS.pm.        -->
<!-- It's call by get_feature_by_name subroutine.         -->

<module name="GUS.pm">
  <sqlQuery name="get_feature_by_name">
    <testParamValues project="TriTrypDB">
       <param name="name" value="LmjF05_01_20050601_V5.2"/>
    </testParamValues>
    <sql>
<![CDATA[
SELECT  
       ctg_name, feature_id, type, source, name, phase, parent_id,
       startm, end, strand
FROM (
SELECT -- trying to find genes by source_id
       nal.sequence_source_id ctg_name, 
       nal.na_feature_id feature_id, 
       'gene' type, 
       'annotation' source, 
       nal.feature_source_id name, 
       '' phase, 
       nal.na_sequence_id parent_id, 
       nal.start_min  startm, 
       nal.end_max end, 
       decode (nal.is_reversed, 0, '+1', 1, '-1', '.') strand
FROM   
       ApiDB.FeatureLocation nal,
       apidb.GENEALIAS ga
WHERE  
       nal.feature_source_id = ga.gene and
       ga.alias like lower('$name') and
       nal.is_top_level=1
UNION
SELECT   -- trying to find genes by product description ( at least 7 chars)
       gs.source_id ctg_name,
       gf.na_feature_id feature_id,
       'gene' type,
       'annotation' source,
       gf.source_id || ':  ' || gf.product name,
       '' phase,
       gs.na_sequence_id parent_id,
       ga.start_min startm,
       ga.end_max end,
       decode (ga.strand, 'forward', '+1', 'reverse', '-1', '.') strand
FROM
       dots.GeneFeature gf, apidb.GenomicSequence gs, apidb.GeneAttributes ga
WHERE
       ga.sequence_id = gs.source_id and
       gf.source_id = ga.source_id and
       length('$name') >= 7 and
       upper(ga.product) like upper('%$name%')
UNION
SELECT -- match a sequence source_id
       gs.source_id ctg_name,
       gs.na_sequence_id feature_id,
       so.term_name type,
       ed.name source, 
       gs.source_id, 
       '' phase, 
       null parent_id, 
       1 startm, gs.length end, '.' strand
FROM apidb.GenomicSequence gs, sres.SequenceOntology so,
     sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed,
     dots.NASequence nas
WHERE gs.lowercase_source_id
      in lower('$name')
  AND gs.sequence_ontology_id = so.sequence_ontology_id
  AND gs.external_database_release_id = edr.external_database_release_id
  AND edr.external_database_id = ed.external_database_id
  AND gs.na_sequence_id = nas.na_sequence_id)
]]>
    </sql>
  </sqlQuery>
</module>


<!--                       Segment.pm                                 -->
<!-- Feature names are in the same format as the config - type:Source -->

<module name="Segment.pm">
  <sqlQuery name="new:Segment">
    <testParamValues project="TriTrypDB">
       <param name="name" value="LmjF05_01_20050601_V5.2"/>
    </testParamValues>
    <testParamValues project="ToxoDB">
       <param name="name" value="TGME49_chrX"/>
    </testParamValues>
     <sql>
<![CDATA[
SELECT etn.na_sequence_id srcfeature_id, 
       1 startm, 
       etn.length end, 
       etn.source_id name, 
       'Sequence' type, 
       ' ' atts
FROM   dots.NaSequence etn, apidb.SequenceAlias sa, sres.sequenceontology so
WHERE  etn.source_id = sa.source_id 
 and so.sequence_ontology_id = etn.sequence_ontology_id
 and sa.lowercase_source_id = lower('$name') 
]]>
    </sql>
  </sqlQuery>
  
  <sqlQuery name="get_sequence">
    <sql>
<![CDATA[ 
SELECT ens.sequence 
FROM   DOTS.NASEQUENCE ens 
WHERE  ens.na_sequence_id = $srcfeature_id 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="gene:annotation">
     <sql>
<![CDATA[
 SELECT
       ga.na_feature_id feature_id,
       'gene' type,
       'annotation' source,
       ga.source_id name,
       '.' score,
       ga.na_sequence_id parent_id,
       fl.start_min startm,
       fl.end_max end,
       decode (fl.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'Note=' || ga.product  || '$dlm' ||
       'soTerm=' || ga.so_term_name || '$dlm' ||
       'product=' || replace(ga.product,'''','&#146;') || '$dlm' ||
       'taxon=' || ga.organism || '$dlm' ||
       'isPseudo=' || ga.is_pseudo
         as atts
FROM
       apidb.GeneAttributes ga,
       apidb.FeatureLocation fl
WHERE  fl.na_sequence_id = $srcfeature_id
  AND  fl.feature_type = 'GeneFeature'
  AND  fl.na_feature_id = ga.na_feature_id
  AND  fl.start_min <= $rend
  AND  fl.end_max >= $base_start
  AND ga.is_deprecated = 0
ORDER BY 
       fl.start_min
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:ORF">
     <sql>
<![CDATA[
 SELECT na_feature_id feature_id, 
             'alignment' type, 
             'ORF' source, 
             feature_source_id name, 
             '' score, 
             na_sequence_id parent_id, 
             start_min startm, 
             end_max end, 
             decode (is_reversed, 0, '+1', 1, '-1', '.') strand,
             'Length=' || (end_max-start_min+1)/3 atts
      FROM   apidb.featureLocation 
      WHERE  na_sequence_id = $srcfeature_id 
        AND  start_min <= $rend
        AND  end_max >= $base_start - 1 
        AND  feature_type='Miscellaneous'
      ORDER BY start_min
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:EST">
     <sql>
<![CDATA[
SELECT blat.blat_alignment_id feature_id, 
       'alignment' type, 
       'EST' source, 
       est.accession name, 
       blat.score || '' score, 
       etn.na_sequence_id parent_id, 
       blat.target_start startm, 
       blat.target_end end, 
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'Direction=' || est.p_end || ' prime' || '$dlm' ||
       'PercentIdentity=' || blat.percent_identity atts 
FROM   
       apidb.BlatAlignmentLocation blat, 
       dots.ASSEMBLYSEQUENCE asbl, 
       dots.EST est, 
       dots.NASEQUENCE etn
WHERE  
       blat.query_na_sequence_id = asbl.na_sequence_id and 
       blat.target_na_sequence_id = etn.na_sequence_id and 
       est.na_sequence_id = asbl.na_sequence_id and 
       blat.target_start <= $rend and 
       blat.target_end >= $base_start and 
       (blat.target_end - blat.target_start ) < 5000 and 
			 blat.is_best_alignment = 1 and
       etn.na_sequence_id = $srcfeature_id 
ORDER BY blat.target_start asc, blat.score desc
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="match:WU_BLASTX">
     <sql>
<![CDATA[
SELECT b.similarity_id feature_id, 'match' type, 'WU_BLASTX' source, 
       b.name, b.score, b.pvalue, b.na_sequence_id parent_id, 
       b.startm, b.end, b.strand, b.atts
FROM   
       apidb.blastx b
WHERE  
       b.startm between $base_start and $rend and
       b.end between $base_start and $rend and       
       b.na_sequence_id = $srcfeature_id and 
       RowNum < 4000 
ORDER BY 
       b.na_sequence_id, b.startm, b.pvalue
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:DoTSAssemblies">
     <sql>
<![CDATA[
SELECT blat.blat_alignment_id feature_id, 
       'alignment' type, 
       'DoTSAssemblies' source, 
       a.source_id name, 
       blat.score || '' score, 
       blat.target_na_sequence_id parent_id, 
       blat.target_start startm, 
       blat.target_end end, 
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand, 
       'PercentIdentity=' || blat.percent_identity || '$dlm' ||
       'Count=' || a.number_of_contained_sequences atts 
FROM   
       apidb.BlatAlignmentLocation blat, 
       dots.Assembly a
WHERE  
       blat.query_na_sequence_id = a.na_sequence_id and 
       blat.target_start <= $rend and 
       blat.target_end >= $base_start and 
--       (blat.target_end - blat.target_start ) < 5000 and 
       blat.is_best_alignment = 1 and
       blat.target_na_sequence_id = $srcfeature_id
ORDER BY 
       blat.target_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="gene:syntenyMC">
     <sql>
<![CDATA[
SELECT
       gattr.na_feature_id feature_id,
       'gene' type, 
       'syntenyMC' source, 
       gattr.source_id name, 
       '.' score, 
       anch_left.synteny_id parent_id,
       CASE WHEN (syn.is_reversed = 1) 
         THEN anch_left.ref_loc - ((anch_left.syntenic_loc - fl.end_max) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc - 1))
         ELSE anch_left.ref_loc + ((fl.start_min - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))  
       END startm,
       CASE WHEN (syn.is_reversed = 1) 
         THEN anch_left.ref_loc - ((anch_left.syntenic_loc - fl.start_min) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc - 1))
         ELSE anch_left.ref_loc + ((fl.end_max - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))   
       END end,
       CASE WHEN (fl.is_reversed = syn.is_reversed) THEN 1 ELSE -1 END strand,
       'Note=' || gattr.product || '$dlm' ||
       'SOTerm=' || gattr.so_term_name || '$dlm' ||
       'SyntenyID=' || syn.synteny_id || '$dlm' ||
       'Contig=' || gattr.sequence_id || '$dlm' ||
       'IsPseudo=' || gattr.is_pseudo || '$dlm' ||
       'Start=' || gattr.start_min || '$dlm' ||
       'End=' || gattr.end_max || '$dlm' ||
       'ExtDBName=' || ed.name || '$dlm' ||
       'Taxon=' || gattr.organism atts
FROM 
       apidb.synteny syn,
       apidb.syntenyAnchor anch_left,
       apidb.syntenyAnchor anch_right,
       apidb.geneattributes gattr,
       sres.externaldatabaserelease edr,
       sres.externaldatabase ed,
       apidb.featurelocation fl
WHERE edr.external_database_id = ed.external_database_id 
  AND syn.external_database_release_id = edr.external_database_release_id
  AND syn.a_na_sequence_id = $srcfeature_id
  AND syn.a_start <= $rend 
  AND syn.a_end >= $base_start 
  AND anch_left.synteny_id = syn.synteny_id 
  AND anch_left.prev_ref_loc < $base_start 
  AND anch_left.ref_loc >= $base_start
  AND anch_right.synteny_id = syn.synteny_id
  AND anch_right.ref_loc < $rend
  AND anch_right.next_ref_loc >= $rend
  AND fl.na_sequence_id = syn.b_na_sequence_id 
  AND fl.feature_type = 'GeneFeature'
  AND gattr.na_feature_id = fl.na_feature_id
  AND (
       (syn.is_reversed = 0
        AND anch_left.ref_loc + ((fl.start_min - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1)) <= $rend 
        AND anch_left.ref_loc + ((fl.end_max - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1)) >= $base_start
       ) 
       OR
       (syn.is_reversed = 1 
        AND anch_left.ref_loc + ((anch_left.syntenic_loc - fl.end_max) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc - 1)) <= $rend 
        AND anch_left.ref_loc + ((anch_left.syntenic_loc - fl.start_min) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc - 1)) >= $base_start 
       )
  )
  AND fl.start_min <= syn.b_end
  AND fl.end_max >= syn.b_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="lowcomplexity:dust">
     <sql>
<![CDATA[
SELECT
       lc.na_feature_id feature_id,
       'lowcomplexity' type, 
       'dust' source, 
       lc.name name, 
       '.' score, 
       lc.na_sequence_id parent_id, 
       fl.start_min startm, 
       fl.end_max end, 
       decode (fl.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'Note=here to work around Feature.pm bug of splitting null atts' atts
FROM 
       apidb.FeatureLocation fl, dots.LowComplexityNAFeature lc
WHERE
       fl.feature_type = 'LowComplexityNAFeature' and
       fl.start_min <= $rend and 
       fl.end_max >= $base_start and 
       fl.na_sequence_id = $srcfeature_id and
       fl.na_feature_id = lc.na_feature_id
ORDER BY 
       fl.start_min
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="match:TGI">
    <testParamValues project="ToxoDB">
    <param name="srcfeature_id" value="240961"/>
    </testParamValues>     
     <sql>
<![CDATA[
SELECT
       sim.similarity_id feature_id,
       'match' type, 
       'TGI' source, 
       query.source_id name, 
       (sim.number_positive / sim.total_match_length) score, 
       sim.subject_id    parent_id, 
       sim.min_subject_start startm, 
       sim.max_subject_end   end, 
       decode(sim.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'Note=' || query.description || '$dlm' ||
       'TGI=' || edb.name || '$dlm' ||
       'TGIver=' || edbr.version || '$dlm' ||
       'TGISpecies=' || edb.name atts
FROM 
       dots.similarity sim,
       dots.externalnasequence query,
       sres.externaldatabase edb,
       sres.externaldatabaserelease edbr
WHERE  sim.min_subject_start <= $rend and
       sim.max_subject_end >= $base_start and
       sim.subject_id = $srcfeature_id and
       query.na_sequence_id = sim.query_id and
       query.external_database_release_id = edbr.external_database_release_id and
       edb.external_database_id = edbr.external_database_id and 
       edb.name in ('TgGI','PfGI','PvGI','PbGI','PyGI')
ORDER BY 
       sim.min_subject_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SAGE:3-5prime">
     <sql>
<![CDATA[
SELECT distinct * from
(
SELECT fl.na_feature_id as feature_id,
       'SAGE' type, 
       '3-5prime' source, 
       sta.source_id name, 
       fl.na_sequence_id parent_id, 
       fl.start_min startm, 
       fl.end_max end, 
       decode (fl.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'SourceID=' || sta.feature_source_id || '$dlm' ||
       'Sequence=CATG' || staa.sequence || '$dlm' ||
       'Occurrence=' || staa.occurrence atts
FROM   apidb.FeatureLocation fl,
       apidb.sagetaganalysisattributes staa,
       apidb.sagetagattributes sta
WHERE  fl.feature_type ='SAGETagFeature'
  AND  fl.na_sequence_id = $srcfeature_id 
  AND  fl.start_min <= $rend
  AND  fl.end_max >= $base_start
  AND  fl.na_feature_id = sta.na_feature_id
  AND  to_number(fl.feature_source_id) = staa.composite_element_id
)
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="domain:MassSpecPeptides">
     <sql>
<![CDATA[
SELECT 
       msf.na_feature_id feature_id,
       'domain' type,
       'MassSpecPeptides' source,
       x.parent_id, startm, end,
       msf.source_id name, x.strand,
       'Description=' || msf.description || '$dlm' ||
       'Count=' || match_count || '$dlm' ||
       'ExtDbName=' || ed_name || '$dlm' ||
       'PepSeq=' || substr(aas.sequence, aal.start_min, aal.end_max - aal.start_min + 1) || '$dlm' ||
       'SOTerm=' || fs.term_name atts
FROM  dots.massspecfeature msf,
      dots.translatedaafeature taaf,
      apidb.FeatureSo fs,
      dots.aasequence aas, dots.aalocation aal,
(SELECT count(*) as match_count, 
       min(msf.na_feature_id) as feat_id,
       enas.na_sequence_id parent_id,
       nal.start_min startm,
       nal.end_max end,
       decode (nal.is_reversed, 0, '+1', 1, '-1', '.') strand,
       ed.name as ed_name
FROM  dots.massspecfeature msf,
      apidb.FeatureLocation nal,
      dots.nasequence enas,
      sres.externaldatabaserelease edr,
      sres.externaldatabase ed
WHERE msf.na_feature_id = nal.na_feature_id
 AND  nal.na_sequence_id = $srcfeature_id
 AND  enas.na_sequence_id = $srcfeature_id
 AND  nal.start_min >= $base_start 
 AND  nal.end_max <= $rend
 AND  msf.external_database_release_id = edr.external_database_release_id
 AND  edr.external_database_id = ed.external_database_id
GROUP BY ed.name,enas.na_sequence_id,nal.is_reversed,nal.start_min,nal.end_max) x
WHERE msf.na_feature_id = x.feat_id
 AND  taaf.aa_sequence_id = msf.aa_sequence_id
 AND  taaf.na_feature_id = fs.na_feature_id
 AND  aal.aa_feature_id = msf.aa_feature_id
 AND  aas.aa_sequence_id = to_number(msf.aa_sequence_id)
]]>
    </sql>
  </sqlQuery>
  
  <sqlQuery name="domain:UnifiedMassSpecPeptides">
      <sql>
<![CDATA[
SELECT 
       msf.na_feature_id feature_id,
       'domain' type,
       'UnifiedMassSpecPeptides' source,
       x.parent_id, startm, end,
       msf.source_id name, x.strand,
       'Count=' || match_count  || '$dlm' ||
       'DbIds=' || db_ids  || ';;' ||
       'DbNames=' || z.db_names   || ';;' ||
       'PepSeq=' || substr(aas.sequence, aal.start_min, aal.end_max - aal.start_min + 1) atts
FROM  dots.massspecfeature msf,
      dots.translatedaafeature taaf,
      dots.aasequence aas, dots.aalocation aal,
(SELECT count(*) as match_count, 
       min(msf.na_feature_id) as feat_id,
       enas.na_sequence_id parent_id,
       nal.start_min startm,
       nal.end_max end,
       decode (nal.is_reversed, 0, '+1', 1, '-1', '.') strand,
       apidb.tab_to_string(CAST(COLLECT(edr.external_database_release_id || '') AS apidb.varchartab), ', ' ) db_ids
FROM  dots.massspecfeature msf,
      apidb.FeatureLocation nal,
      dots.nasequence enas,
      sres.externalDatabaseRelease edr,
      sres.externalDatabase ed
WHERE msf.na_feature_id = nal.na_feature_id
 AND  nal.na_sequence_id = $srcfeature_id
 AND  enas.na_sequence_id = $srcfeature_id
 AND  nal.start_min >= $base_start 
 AND  nal.end_max <= $rend
 AND  msf.external_database_release_id = edr.external_database_release_id
 AND  edr.external_database_id = ed.external_database_id
GROUP BY enas.na_sequence_id,nal.is_reversed,nal.start_min,nal.end_max) x,
(select apidb.tab_to_string(CAST(COLLECT(y.db_info)
         AS apidb.varchartab), ', ' ) db_names
FROM
(SELECT distinct (edr.external_database_release_id)||'='|| ed.name db_info
FROM  dots.massspecfeature msf,
       apidb.FeatureLocation nal,
       dots.nasequence enas,
       sres.externalDatabaseRelease edr,
       sres.externalDatabase ed
 WHERE msf.na_feature_id = nal.na_feature_id
  AND  nal.na_sequence_id = $srcfeature_id
  AND  enas.na_sequence_id = $srcfeature_id
  AND  msf.external_database_release_id = edr.external_database_release_id
  AND  edr.external_database_id = ed.external_database_id
 GROUP BY enas.na_sequence_id, ed.name, edr.external_database_release_id) y
) z
WHERE msf.na_feature_id = x.feat_id
 AND  taaf.aa_sequence_id = msf.aa_sequence_id    
 AND  aal.aa_feature_id = msf.aa_feature_id
 AND  aas.aa_sequence_id = to_number(msf.aa_sequence_id)
]]>
    </sql>
  </sqlQuery>
  
  <sqlQuery name="UnifiedMassSpecPeptides:density">
   <sql>
<![CDATA[
SELECT etn.na_sequence_id feature_id,
       'UnifiedMassSpecPeptides' type,
       'density' source
FROM   dots.NASEQUENCE etn
WHERE  etn.na_sequence_id = $srcfeature_id
]]>
    </sql>
  </sqlQuery>

  <sqlQuery name="alignment:BLAT">
     <sql>
<![CDATA[
 SELECT blat.blat_alignment_id feature_id, 
       'alignment' type, 
       'BLAT' source, 
       est.accession name, 
       blat.score || '' score, 
       etn.na_sequence_id parent_id, 
       blat.target_start startm, 
       blat.target_end end, 
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand, 
       'Direction=' || est.p_end || ' prime' || '$dlm' ||
			 'PCT=' || blat.percent_identity atts
FROM   
       dots.BLATALIGNMENT blat, 
       dots.ASSEMBLYSEQUENCE asbl, 
       dots.EST est, 
       dots.EXTERNALNASEQUENCE etn
WHERE  
       blat.query_na_sequence_id = asbl.na_sequence_id and 
       blat.target_na_sequence_id = etn.na_sequence_id and 
       est.na_sequence_id = asbl.na_sequence_id and 
       blat.target_start >= $base_start -1 and 
       blat.target_end <= $rend and 
	     etn.external_database_release_id = blat.target_external_db_release_id and
       (blat.target_end - blat.target_start ) < 5000 and 
			 blat.is_best_alignment = 1 and
       etn.na_sequence_id = $srcfeature_id 
ORDER BY blat.target_start asc, blat.score desc
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:Bacs">
     <sql>
<![CDATA[
select f.feature_id, f.type, f.source, 
       CASE WHEN f.taxon like 'Leishmania%' OR f.taxon like 'Trypanosoma%'
              THEN f.feature_id
            WHEN f.taxon like 'Toxoplasma%'
              THEN f.feature_id  || '[p/q]1c' 
       END name,
f.feature_id name, f.parent_id, f.startm, f.end,
'sequence=' || substr(s.sequence, f.startm, f.end - f.startm + 1) || '$dlm' ||
'sequence_id=' || s.source_id || '$dlm' ||
'ExtDbName=' || f.database_name atts
from dots.nasequence s, (
select bacs.feature_id,
       'alignment' type,       
       'Bacs' source,
        max(bacs.query_na_sequence_id) parent_id,
        min(bacs.target_start) startm,        
        max(bacs.target_end) end,
        max(bacs.target_na_sequence_id) as query_na_sequence_id,
        bacs.name database_name,bacs.taxon as taxon
FROM (
SELECT CASE WHEN tn.name like 'Leishmania%' OR tn.name like 'Trypanosoma%'
              THEN regexp_substr(source_id, '(.*)[^(d_T7\.(1-2)|L)(d_SP6\.1|R)]')
            WHEN tn.name like 'Toxoplasma%'
              THEN regexp_substr(etn.source_id, '(.*)[^(q|p)1c)]')
       END feature_id,tn.name as taxon,
       blat.query_na_sequence_id, blat.target_start, blat.target_end,
       blat.target_na_sequence_id, ed.name 
FROM apidb.BlatAlignmentLocation blat,
dots.ExternalNASequence etn, Sres.taxonname tn, 
sres.ExternalDatabase ed, sres.externalDatabaseRelease edr
WHERE blat.query_na_sequence_id = etn.na_sequence_id
AND blat.target_na_sequence_id = $srcfeature_id
AND blat.is_best_alignment = 1
AND (blat.target_end - blat.target_start ) < 5000
AND (tn.name like 'Toxoplasma%' OR blat.number_of_spans =1)
AND etn.external_database_release_id = blat.query_external_db_release_id
AND blat.query_external_db_release_id = edr.external_database_release_id
AND ed.external_database_id=edr.external_database_id
AND etn.taxon_id = tn.taxon_id
AND tn.name_class = 'scientific name'
AND ed.name in ('L.major BAC Ends from Sanger',
                'T.brucei RPCI93 BAC Ends',
                'T.cruzi CHORI105 BAC End',
                'L.major PAC Ends from Sanger',
                'TgME49B7 Sanger BAC Ends')
) bacs
GROUP BY bacs.feature_id, bacs.name, bacs.taxon
) f
WHERE f.startm <= $rend AND f.end >= $base_start  - 1
and f.query_na_sequence_id = s.na_sequence_id
ORDER BY f.startm
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:Cosmids">
     <sql>
<![CDATA[
select f.feature_id, f.type, f.source, f.feature_id name, f.parent_id, f.startm, f.end,
'sequence=' || substr(s.sequence, f.startm, f.end - f.startm + 1) || '$dlm' ||
'sequence_id=' || s.source_id atts
from dots.nasequence s, (

SELECT bacs.feature_id, 
       'alignment' type, 
       'Cosmids' source, 
       max(bacs.query_na_sequence_id) parent_id, 
       min(bacs.target_start) startm, 
       max(bacs.target_end) end,
       max(bacs.target_na_sequence_id) as query_na_sequence_id
FROM (
SELECT CASE WHEN tn.name like 'Leishmania%' OR tn.name like 'Trypanosoma%'
              THEN regexp_substr(etn.source_id, '(.*)[^(X)(Y)]')
       WHEN tn.name like 'Toxoplasma%'
              THEN regexp_substr(etn.source_id, '(.*)[^T(V|H)]')
       END feature_id,
       blat.query_na_sequence_id, blat.target_start, blat.target_end,
       blat.target_na_sequence_id
FROM apidb.BlatAlignmentLocation blat, dots.ExternalNASequence etn, 
     sres.EXTERNALDATABASE ed, sres.EXTERNALDATABASERELEASE edr,
     Sres.taxonname tn
WHERE blat.query_na_sequence_id = etn.na_sequence_id 
AND blat.target_na_sequence_id = $srcfeature_id 
AND blat.target_start >= $base_start  -1 
AND blat.target_end <= $rend
AND blat.is_best_alignment = 1
AND etn.external_database_release_id = blat.query_external_db_release_id
AND (tn.name like 'Toxoplasma%' OR blat.number_of_spans =1)
AND blat.query_external_db_release_id = edr.external_database_release_id
AND edr.external_database_id = ed.external_database_id
AND etn.taxon_id = tn.taxon_id
AND tn.name_class = 'scientific name'
AND ed.name in ('L.major Cosmid Ends from Sanger',
                'Tg TIGR Cosmid Ends')
) bacs
GROUP BY bacs.feature_id
) f
where f.query_na_sequence_id = s.na_sequence_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="annotation:density">
     <sql>
<![CDATA[
SELECT etn.na_sequence_id feature_id, 
       'annotation' type, 
       'density' source 
FROM   dots.NASEQUENCE etn 
WHERE  etn.na_sequence_id = $srcfeature_id 
]]>
    </sql>
  </sqlQuery>
  
  <sqlQuery name = "ORF:density"> 
    <description>ORF density. bin size is 500bp.</description> 
    <sql> 
<![CDATA[ 
SELECT etn.na_sequence_id feature_id, 
       'ORF' type, 
       'density' source 
FROM   dots.NASEQUENCE etn 
WHERE  etn.na_sequence_id = $srcfeature_id 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="Centromere:overview"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
SELECT fl.na_sequence_id feature_id,
       'Centromere' type,
       'overview' source,
       start_min startm,
       end_max end
FROM  apidb.featurelocation fl, sres.sequenceOntology so  
WHERE fl.na_sequence_id = $srcfeature_id
  AND so.sequence_ontology_id = fl.sequence_ontology_id 
  AND so.term_name='centromere'    
]]> 
    </sql> 
  </sqlQuery>
  
  <sqlQuery name="TandemRepeat:TRF">
     <sql>
<![CDATA[
 SELECT
       fl.na_feature_id feature_id,
       'TandemRepeat' type, 
       'TRF' source, 
       tr.name name, 
       '.' score, 
       fl.na_sequence_id parent_id, 
       fl.start_min startm, 
       fl.end_max end, 
       decode (fl.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'Note=here to work around Feature.pm bug of splitting null atts' atts
FROM 
       dots.NaFeature tr,
       apidb.FeatureLocation fl
WHERE
       tr.na_feature_id = fl.na_feature_id and
       fl.feature_type = 'TandemRepeatFeature' and
       fl.start_min <= $rend and 
       fl.end_max >= $base_start and 
       fl.na_sequence_id = $srcfeature_id
ORDER BY 
       fl.start_min
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:dbEST">
     <sql>
<![CDATA[
 SELECT blat.blat_alignment_id feature_id, 
       'alignment' type, 
       'dbEST' source, 
       est.accession name, 
       blat.score || '' score, 
       blat.query_na_sequence_id parent_id, 
       blat.target_start startm, 
       blat.target_end end, 
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand, 
       'PercentIdentity=' || blat.percent_identity  || '$dlm' ||
       'Library=' || l.dbest_name  || '$dlm' atts 
FROM   
       apidb.BlatAlignmentLocation blat, 
       dots.Est est, 
       dots.ExternalNASequence estseq,
       dots.Library l,
       sres.SequenceOntology so
WHERE  
       blat.query_na_sequence_id = est.na_sequence_id and 
       blat.target_start <= $rend and 
       blat.target_end >= $base_start and 
       (blat.target_end - blat.target_start ) < 5000 and 
       blat.is_best_alignment = 1 and
       est.library_id = l.library_id and
       estseq.na_sequence_id = est.na_sequence_id and
       so.sequence_ontology_id = estseq.sequence_ontology_id and
       so.term_name = 'EST' and
       blat.target_na_sequence_id = $srcfeature_id
ORDER BY 
       blat.target_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="match:BLASTX">
     <sql>
<![CDATA[
 SELECT distinct sim.similarity_id feature_id, 
       'match' type, 
       'BLASTX' source,
       extt.source_id name, 
       sim.similarity_score || '' score, 
       to_number(sim.pvalue_mant || 'e' || sim.pvalue_exp) pvalue,
       extq.na_sequence_id parent_id, 
       sim.min_query_start startm, 
       sim.max_query_end end, 
       decode (sim.similarity_is_reversed, 0, '+1', 1, '-1', '.') strand, 
       'Score=' || sim.similarity_score || '$dlm' || 
       'Expect=' || (sim.pvalue_mant || 'e' ||sim.pvalue_exp)||'$dlm'|| 
       'Defline=' || extt.description || '$dlm' || 
       'PercentIdentity=' || sim.percent_identical || '$dlm' ||
       'PercentPositive=' || sim.percent_positive || '$dlm' ||
       'TStart=' || sim.min_query_start || '$dlm' || 
       'TStop=' || sim.max_query_end atts 
FROM   
       apidb.SimilaritySpanLocation sim, 
       dots.EXTERNALAASEQUENCE extt, 
       dots.NASEQUENCE extq
WHERE  
       sim.query_id = extq.na_sequence_id and 
       sim.subject_id = extt.aa_sequence_id and 
       (sim.max_query_end - sim.min_query_start) < 5000 and 
       to_number(sim.pvalue_mant || 'e' || sim.pvalue_exp) < 1e-10 and 
       sim.min_query_start >= $base_start and 
       sim.max_query_end <= $rend and 
       extq.na_sequence_id = $srcfeature_id and 
       RowNum < 4000 
ORDER BY 
       sim.min_query_start asc, 
       pvalue asc
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:RandomEnds">
     <sql>
<![CDATA[
select f.feature_id, f.type, f.source, f.name, f.parent_id, f.startm, f.end,
     'sequence=' || substr(s.sequence, f.startm, f.end - f.startm + 1) || '$dlm' ||
     'sequence_id=' || s.source_id  atts
from dots.nasequence s, (
SELECT regexp_substr(etn.source_id, '(.*)[^(x1-4)(y1-4)]') feature_id, 
       'alignment' type,
       'RandomEnds' source,
       regexp_substr(etn.source_id, '(.*)[^(x1-4)(y1-4)]') name, 
       max(blat.query_na_sequence_id) parent_id,
       min(blat.target_start) startm,
       max(blat.target_end) end,
       max(blat.target_na_sequence_id) as query_na_sequence_id
FROM   apidb.BlatAlignmentLocation blat,
       dots.ExternalNASequence etn
WHERE  blat.query_na_sequence_id = etn.na_sequence_id
  AND  blat.target_na_sequence_id = $srcfeature_id
  AND  blat.is_best_alignment = 1
  AND  (blat.target_end - blat.target_start ) < 5000
  AND  etn.external_database_release_id = blat.query_external_db_release_id
  AND  blat.number_of_spans =1
  AND  blat.query_external_db_release_id in (
  SELECT edr.external_database_release_id
  FROM sres.EXTERNALDATABASE ed, sres.EXTERNALDATABASERELEASE edr
  WHERE ed.external_database_id=edr.external_database_id
  AND ed.name = 'L.major FV1 random Ends from Sanger'
  )
GROUP BY regexp_substr(etn.source_id, '(.*)[^(x1-4)(y1-4)]')
) f
WHERE f.startm <= $rend AND f.end >= $base_start - 1
 and f.query_na_sequence_id = s.na_sequence_id
ORDER BY f.startm
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="contig:Genbank">
    <testParamValues project="TriTrypDB">
    <param name="srcfeature_id" value="183227"/>
    </testParamValues>     
  <sql>
<![CDATA[
SELECT 's.' || piece_na_sequence_id as feature_id, 
     'contig' type,
     'GenBank' source,
      source_id as name,
      '.' score,
      0 phase,
      virtual_na_sequence_id as parent_id,
      offset as startm,
      (offset + length) as end,
      decode(strand_orientation, '+', '+1', '-', '-1', '', '+1', '0') strand,
      'Length=' || length || '$dlm' ||
      'Type=contig' || '$dlm' ||
      'Note=' || source_id || '$dlm' ||
      'Orientation=' || strand_orientation atts
FROM (
(SELECT ens.source_id, sp.piece_na_sequence_id,sp.virtual_na_sequence_id, sp.sequence_order,
       ens.length, vs.length as chr_length, sp.strand_orientation,
       0 as offset
 FROM dots.VirtualSequence vs, dots.SequencePiece sp,
     dots.ExternalNaSequence ens
 WHERE vs.na_sequence_id = $srcfeature_id 
  and vs.na_sequence_id = sp.virtual_na_sequence_id
  and ens.na_sequence_id = sp.piece_na_sequence_id
  and sp.sequence_order = 1 
  and strand_orientation is not null
GROUP by ens.source_id, sp.piece_na_sequence_id, sp.virtual_na_sequence_id,sp.sequence_order,
       ens.length, vs.length, sp.strand_orientation)
UNION
(SELECT ens.source_id, sp.piece_na_sequence_id,sp.virtual_na_sequence_id, sp.sequence_order,
       ens.length, vs.length as chr_length, sp.strand_orientation,
       sum(predecessors.length) as offset
 FROM dots.VirtualSequence vs, dots.SequencePiece sp,
     dots.ExternalNaSequence ens,
     (select sp2.virtual_na_sequence_id, sp2.sequence_order, ens2.length
      from dots.SequencePiece sp2,
           dots.ExternalNaSequence ens2
      where sp2.piece_na_sequence_id = ens2.na_sequence_id) predecessors
 WHERE vs.na_sequence_id = $srcfeature_id 
  and vs.na_sequence_id = sp.virtual_na_sequence_id
  and ens.na_sequence_id = sp.piece_na_sequence_id
  and vs.na_sequence_id = predecessors.virtual_na_sequence_id(+)
  and sp.sequence_order > predecessors.sequence_order
  and ens.external_database_release_id is not null
GROUP by ens.source_id, sp.piece_na_sequence_id, sp.virtual_na_sequence_id,sp.sequence_order,
       ens.length, vs.length, sp.strand_orientation )
ORDER by offset) 
where offset < $rend and (offset+length) > $base_start
]]>
    </sql>
  </sqlQuery>
  
<!-- 
  <sqlQuery name="clusteralignment:EstCluster">
     <sql>
<![CDATA[
 SELECT blat.blat_alignment_id feature_id, 
       'clusteralignment' type, 
       'EstCluster' source, 
       a.source_id name, 
       blat.score || '' score, 
       blat.target_na_sequence_id parent_id, 
       blat.target_start startm, 
       blat.target_end end, 
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand, 
       'PercentIdentity=' || blat.percent_identity || '$dlm' ||
       'Count=' || a.number_of_contained_sequences atts 
FROM   
       apidb.BlatAlignmentLocation blat, 
       dots.Assembly a
WHERE  
       blat.query_na_sequence_id = a.na_sequence_id and 
       blat.target_start <= $rend and 
       blat.target_end >= $base_start and 
       blat.is_best_alignment = 1 and
       blat.target_na_sequence_id = $srcfeature_id
ORDER BY 
       blat.target_start
]]>
    </sql>
  </sqlQuery>
 -->
  
  <sqlQuery name="Microsatellite:sts">
     <sql>
<![CDATA[
 SELECT S.na_feature_id as feature_id,
       'Microsatellite' type, 
       'sts' source, 
       s.source_id name, 
       s.na_sequence_id parent_id, 
       l.start_min startm, 
       l.end_max end, 
       decode (l.is_reversed, 0, '+1', 1, '-1', '.') strand,
             'Name=' || s.name  || '$dlm' || 'SequenceId=' || nas.source_id  atts
      FROM   DOTS.STS s,
       ApiDB.FeatureLocation l,
             DOTS.NASequence nas
      WHERE  s.na_sequence_id = $srcfeature_id 
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
  AND  s.na_feature_id = l.na_feature_id 
        AND  nas.na_sequence_id = s.na_sequence_id
        AND  s.name = 'microsatellite'
]]>
    </sql>
  </sqlQuery>
  
  
<!-- NOTE: externalDatabase.name list specified in query, for Crypto AND Plasmo -->
  <sqlQuery name="match:IsolatePopset">
     <sql>
<![CDATA[
SELECT distinct sim.similarity_id feature_id, 
       'match' type, 
       'IsolatePopset' source, 
       extq.source_id name, 
       sim.score,
       to_number(sim.pvalue_mant || 'e' || sim.pvalue_exp) pvalue, 
       extt.na_sequence_id parent_id, 
       sim.min_subject_start startm, 
       sim.max_subject_end end, 
       decode (sim.is_reversed, 0, '+1', 1, '-1', '.') strand, 
       'Expect=' || (sim.pvalue_mant || 'e' ||sim.pvalue_exp)||'$dlm'|| 
       'MatchLen=' || sim.total_match_length || '$dlm' ||
       'Note=' || extq.description atts
FROM   
       dots.Similarity sim, 
       dots.ExternalNASequence extt, dots.NASequence extq,
       sres.ExternalDatabase ed, sres.ExternalDatabaseRelease edr
WHERE  
       extq.external_database_release_id = edr.external_database_release_id and
       ed.external_database_id = edr.external_database_id and
       ed.name in ('C. parvum isolate data','Plasmodium isolates From Genbank') and
       sim.query_id = extq.na_sequence_id and 
       sim.subject_id = extt.na_sequence_id and 
       to_number(sim.pvalue_mant || 'e' || sim.pvalue_exp) < 1e-20 and 
       sim.min_subject_start >= $base_start and 
       sim.max_subject_end <= $rend 
       AND extt.na_sequence_id = $srcfeature_id 
ORDER BY 
       sim.min_subject_start asc, 
       sim.max_subject_end asc, 
       pvalue asc
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="scaffold:TIGR">
     <sql>
<![CDATA[
 SELECT 's.' || piece_na_sequence_id as feature_id, 
     'scaffold' type,
     'TIGR' source,
      source_id as name,
      offset as startm,
      (offset + length) as end,
      decode(strand_orientation, '+', '+1', '-', '-1', '', '+1', '0') strand,
      'Length=' || length || '$dlm' ||
      'Type=scaffold' || '$dlm' ||
      'Note=' || source_id atts
FROM (
(SELECT ens.source_id, sp.piece_na_sequence_id, sp.sequence_order,
       ens.length, vs.length as chr_length, sp.strand_orientation,
       0 as offset
 FROM dots.VirtualSequence vs, dots.SequencePiece sp,
     dots.ExternalNaSequence ens
 WHERE vs.na_sequence_id = $srcfeature_id 
  and vs.na_sequence_id = sp.virtual_na_sequence_id
  and ens.na_sequence_id = sp.piece_na_sequence_id
  and sp.sequence_order = 1 
GROUP by ens.source_id, sp.piece_na_sequence_id, sp.sequence_order,
       ens.length, vs.length, sp.strand_orientation)
UNION
(SELECT ens.source_id, sp.piece_na_sequence_id, sp.sequence_order,
       ens.length, vs.length as chr_length, sp.strand_orientation,
       sum(predecessors.length) as offset
 FROM dots.VirtualSequence vs, dots.SequencePiece sp,
     dots.ExternalNaSequence ens,
     (select sp2.virtual_na_sequence_id, sp2.sequence_order, ens2.length
      from dots.SequencePiece sp2,
           dots.ExternalNaSequence ens2
      where sp2.piece_na_sequence_id = ens2.na_sequence_id) predecessors
 WHERE vs.na_sequence_id = $srcfeature_id 
  and vs.na_sequence_id = sp.virtual_na_sequence_id
  and ens.na_sequence_id = sp.piece_na_sequence_id
  and vs.na_sequence_id = predecessors.virtual_na_sequence_id(+)
  and sp.sequence_order > predecessors.sequence_order
  and ens.external_database_release_id is not null
GROUP by ens.source_id, sp.piece_na_sequence_id, sp.sequence_order,
       ens.length, vs.length, sp.strand_orientation )
ORDER by offset) 
where offset < $rend and (offset+length) > $base_start
UNION
SELECT 'g.' || $srcfeature_id as feature_id,
       'scaffold' type,
       'TIGR' source,
       'aGap' name,
       $base_start as startm,
       $rend as end,
       '0' as strand,
       'Type=fgap' as atts
FROM DUAL   
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="gene:AlternateModels">
     <sql>
<![CDATA[
SELECT
       gf.na_feature_id feature_id,
       'gene' type, 
       'AlternateModels' source, 
       gf.source_id name, 
       '.' score, 
       gf.na_sequence_id parent_id, 
       fl.start_min startm, 
       fl.end_max end, 
       ed.name||':'||edr.version external_database_name,
       decode (fl.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'Note=' || gf.product  || '$dlm' ||
       'soTerm=' || so.term_name || '$dlm' ||
       'product=' || replace(gf.product,'''','&#146;') || '$dlm' ||
       'taxon=' || tn.name || '$dlm' ||
       'SecondaryScore=' || gf.secondary_score || '$dlm' ||
       'score=' || round(gf.score,4) || '$dlm' ||
       'isPseudo=' || gf.is_pseudo || '$dlm' ||
       'isDeprecated=' ||  ga.is_deprecated || '$dlm' ||
       'ExtDbName=' ||  ed.name || '$dlm' ||
       'Version=' ||  edr.version || '$dlm' ||
       'FeatureType=' || fl.feature_type
         as atts
FROM 
       dots.GeneFeature gf,
       ApiDB.FeatureLocation fl, 
       dots.NASequence ns,
       sres.TaxonName tn,
       sres.SequenceOntology so,
       sres.ExternalDatabaseRelease edr,
       sres.ExternalDatabase ed,
       apidb.geneattributes ga
WHERE  fl.na_sequence_id = $srcfeature_id
  AND  fl.na_sequence_id = ns.na_sequence_id
  AND  fl.na_feature_id = gf.na_feature_id 
  AND  so.sequence_ontology_id = gf.sequence_ontology_id
  AND  fl.start_min <= $rend 
  AND  fl.end_max >= $base_start 
  AND  tn.taxon_id = ns.taxon_id 
  AND  tn.name_class = 'scientific name' 
  AND  gf.external_database_release_id = edr.external_database_release_id
  AND  edr.external_database_id = ed.external_database_id
  AND  ga.source_id (+) = gf.source_id
ORDER BY 
       fl.start_min
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="match:syntenySpanMC" includeProjects="TriTrypDB,PlasmoDB,CryptoDB">
     <sql>
<![CDATA[
SELECT
       syn.synteny_id feature_id,
       'match' type, 
       'syntenySpanMC' source, 
       b.source_id name, 
       '.' score, 
       syn.synteny_id parent_id, 
       CASE WHEN (is_reversed = 1) 
         THEN anch_left.ref_loc - ((syn.b_end - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc + 1))
         ELSE anch_left.ref_loc - ((anch_left.syntenic_loc - syn.b_start) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))
       END startm,
       CASE WHEN (is_reversed = 1) 
         THEN anch_left.ref_loc + ((anch_left.syntenic_loc - syn.b_start) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc + 1))
         ELSE anch_left.ref_loc + ((syn.b_end - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))
       END end, 
       decode(is_reversed, 0, '+1', 1, '-1', '+1') strand,
       'RefStart=' || syn.a_start || '$dlm' ||
       'RefEnd=' || syn.a_end || '$dlm' ||
       'RefContigLength=' || a.length || '$dlm' ||
       'SynStart=' || syn.b_start || '$dlm' ||
       'SynEnd=' || syn.b_end || '$dlm' ||
       'ContigLength=' || b.length || '$dlm' ||
       'Contig=' || b.source_id || '$dlm' ||
       'Chromosome=' || b.chromosome || '$dlm' ||
        (CASE WHEN (b.chromosome is NOT NULL) 
             THEN (SELECT 'ChrColor=' || rcc.value || '$dlm' 
                  FROM apidb.rodentChrColors rcc 
                   WHERE b.chromosome = rcc.chromosome) 
             ELSE ''
             END) || 
       'ExtDBName=' || ed.name || '$dlm' ||
       'Taxon=' || tn.name ||  '$dlm' ||
       'Scale=' || 
       CASE WHEN (is_reversed = 1) 
         THEN (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc + 1)
         ELSE (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1) 
         END atts
FROM 
      apidb.synteny syn,
      apidb.syntenyAnchor anch_left,
      apidb.syntenyAnchor anch_right,
      apidb.sequenceattributes a,
      apidb.sequenceattributes b,
      sres.externaldatabaserelease edr,
      sres.externaldatabase ed, 
      Sres.TaxonName tn
WHERE edr.external_database_id = ed.external_database_id
  AND syn.external_database_release_id = edr.external_database_release_id
  AND syn.a_start <= $rend 
  AND syn.a_end >= $base_start
  AND syn.a_na_sequence_id = $srcfeature_id
  AND a.na_sequence_id = syn.a_na_sequence_id
  AND b.na_sequence_id = syn.b_na_sequence_id
  AND anch_left.synteny_id = syn.synteny_id
  AND anch_left.prev_ref_loc < $base_start
  AND anch_left.ref_loc >= $base_start
  AND anch_right.synteny_id = syn.synteny_id
  AND anch_right.ref_loc < $rend
  AND anch_right.next_ref_loc >= $rend
  AND b.organism = tn.name
]]>
    </sql>
  </sqlQuery>
 
 <sqlQuery name="match:syntenySpanMC" includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT
       syn.synteny_id || '_syn' feature_id,
       'match' type, 
       'syntenySpanMC' source, 
       b.source_id name, 
       syn.synteny_id parent_id, 
       CASE WHEN (is_reversed = 1) 
         THEN anch_left.ref_loc - ((syn.b_end - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc + 1))
         ELSE anch_left.ref_loc - ((anch_left.syntenic_loc - syn.b_start) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))
       END startm,
       CASE WHEN (is_reversed = 1) 
         THEN anch_left.ref_loc + ((anch_left.syntenic_loc - syn.b_start) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc + 1))
         ELSE anch_left.ref_loc + ((syn.b_end - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))
       END end, 
       decode(is_reversed, 0, '+1', 1, '-1', '+1') strand,
       'RefStart=' || syn.a_start || '$dlm' ||
       'RefEnd=' || syn.a_end || '$dlm' ||
       'RefContigLength=' || a.length || '$dlm' ||
       'SynStart=' || syn.b_start || '$dlm' ||
       'SynEnd=' || syn.b_end || '$dlm' ||
       'ContigLength=' || b.length || '$dlm' ||
       'Contig=' || b.source_id || '$dlm' ||
       --'Chromosome=' || b.chromosome || '$dlm' ||
       'ChrColor=' || '#FF00FF' || '$dlm' ||
       'ExtDBName=' || ed.name || '$dlm' ||
       'Type=scaffold' || '$dlm' ||
       'Taxon=' || tn.name ||  '$dlm' ||
       'Scale=' || 
       CASE WHEN (is_reversed = 1) 
         THEN (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc + 1)
         ELSE (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1) 
         END atts
FROM 
      apidb.synteny syn,
      apidb.syntenyAnchor anch_left,
      apidb.syntenyAnchor anch_right,
      dots.nasequence a,
      dots.nasequence b,
      sres.externaldatabaserelease edr,
      sres.externaldatabase ed, 
      Sres.TaxonName tn
WHERE edr.external_database_id = ed.external_database_id
  AND syn.external_database_release_id = edr.external_database_release_id
  AND syn.a_start <= $rend 
  AND syn.a_end >= $base_start
  AND syn.a_na_sequence_id = $srcfeature_id
  AND a.na_sequence_id = syn.a_na_sequence_id
  AND b.na_sequence_id = syn.b_na_sequence_id
  AND anch_left.synteny_id = syn.synteny_id
  AND anch_left.prev_ref_loc < $base_start
  AND anch_left.ref_loc >= $base_start
  AND anch_right.synteny_id = syn.synteny_id
  AND anch_right.ref_loc < $rend
  AND anch_right.next_ref_loc >= $rend
  AND b.taxon_id = tn.taxon_id
UNION
SELECT
       syn.synteny_id || '_gap' feature_id,
       'match' type, 
       'syntenySpanMC' source, 
       b.source_id name, 
       syn.synteny_id parent_id, 
       CASE WHEN (is_reversed = 1) 
         THEN anch_left.ref_loc - ((syn.b_end - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc + 1))
         ELSE anch_left.ref_loc - ((anch_left.syntenic_loc - syn.b_start) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))
       END startm,
       CASE WHEN (is_reversed = 1) 
         THEN anch_left.ref_loc + ((anch_left.syntenic_loc - syn.b_start) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc + 1))
         ELSE anch_left.ref_loc + ((syn.b_end - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))
       END end, 
       '0' strand,
       'Type=fgap' || '$dlm' ||
       'Taxon=' || tn.name atts
FROM 
      apidb.synteny syn,
      apidb.syntenyAnchor anch_left,
      apidb.syntenyAnchor anch_right,
      dots.nasequence a,
      dots.nasequence b,
      sres.externaldatabaserelease edr,
      sres.externaldatabase ed, 
      Sres.TaxonName tn
WHERE edr.external_database_id = ed.external_database_id
  AND syn.external_database_release_id = edr.external_database_release_id
  AND syn.a_start <= $rend 
  AND syn.a_end >= $base_start
  AND syn.a_na_sequence_id = $srcfeature_id
  AND a.na_sequence_id = syn.a_na_sequence_id
  AND b.na_sequence_id = syn.b_na_sequence_id
  AND anch_left.synteny_id = syn.synteny_id
  AND anch_left.prev_ref_loc < $base_start
  AND anch_left.ref_loc >= $base_start
  AND anch_right.synteny_id = syn.synteny_id
  AND anch_right.ref_loc < $rend
  AND anch_right.next_ref_loc >= $rend
  AND b.taxon_id = tn.taxon_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Alignment"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT  /*+use_nl(sa snp)*/
       sa.na_feature_id          as feature_id,
       'SNP'                      as type, 
       'Alignment'                as source, 
       sa.source_id              as name, 
       '.'                        as score, 
       sa.seq_source_id           as parent_id, 
       sa.start_min               as startm,
       sa.start_min               as end,
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'RefNA='   || sa.reference_na || '$dlm' ||
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'NonSyn='   || sa.has_nonsynonymous_allele || '$dlm'||
       'IsCoding=' || sa.is_coding || '$dlm' ||
       'Gene=' || sa.gene_source_id || '$dlm' ||
       'params=' || sa.position_in_CDS || '&' ||
       sa.position_in_protein || '&' ||
       sa.reference_strain || '&' ||
       sa.reference_aa || '&' ||
       sa.gene_strand || '&' ||
       sa.reference_na || '&' ||
       sa.source_id 
        as atts
FROM   apidb.featurelocation fl,
       apidb.SnpAttributes sa
WHERE  fl.na_sequence_id = $srcfeature_id
  AND  fl.start_min <= $rend
  AND  fl.start_min >= $base_start
  AND  fl.na_feature_id = sa.na_feature_id
  AND  sa.dataset =  'Genomic Sequence SNPs'
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Stanford"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT 
       sa.na_feature_id          as feature_id,
       'SNP'                      as type, 
       'Stanford'                 as source, 
       sa.source_id              as name, 
       '.'                        as score, 
       sa.seq_source_id           as parent_id, 
       sa.start_min               as startm, 
       sa.start_min               as end, 
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'RefNA='   || sa.reference_na || '$dlm' ||
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'NonSyn='   || sa.has_nonsynonymous_allele || '$dlm'||
       'IsCoding=' || sa.is_coding || '$dlm' ||
       'Gene=' || sa.gene_source_id || '$dlm' ||
       'PositionInCDS=' || sa.position_in_CDS || '$dlm' ||
       'PositionInProtein=' || sa.position_in_protein || '$dlm' ||
       'RefStrain=' || sa.reference_strain || '$dlm' ||
       sa.reference_aa || '$dlm' ||
       sa.gene_strand || '$dlm' ||
       sa.reference_na || '$dlm' ||
       'SourceID='   ||  sa.source_id 
        as atts
FROM   apidb.featurelocation fl,
       apidb.SnpAttributes sa
WHERE  fl.na_sequence_id = $srcfeature_id
  AND  fl.start_min <= $rend
  AND  fl.start_min >= $base_start
  AND  fl.na_feature_id = sa.na_feature_id
  AND  sa.dataset = 'John Boothroyd lab at Stanford'
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:density"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT etn.na_sequence_id feature_id, 
       'SNP' type, 
       'density' source 
FROM   dots.NASEQUENCE etn 
WHERE  etn.na_sequence_id = $srcfeature_id 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:Exons">
   <testParamValues project="ToxoDB">
     <param name="srcfeature_id" value="$$na_seq_id_Ib$$"/>
   </testParamValues>  
   <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'Exons'                    as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'ProbeSet=' || f.description || '$dlm' ||
       'Count='   || f.probe_count || '$dlm'
        as atts
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - Expression-ExonIb'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_peaks_TypeIII:Einstein"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT f.na_feature_id   as feature_id,
       'ChIP_peaks_TypeIII' as type, 
       'Einstein'        as source, 
       f.name            as name, 
       f.score           as score, 
       f.na_sequence_id  as parent_id, 
       f.start_min       as startm, 
       f.end_max         as end,
       'Antibody=' || f.antibody || '$dlm' || 'Rep=' || f.rep as atts
FROM   ApiDB.ChIPFeature f
WHERE  f.na_sequence_id = $srcfeature_id
   AND f.start_min <= $rend
   AND f.end_max >= $base_start
   AND f.protocol_name = 'ChIP_chip_Einstein_called_peaks'
   AND f.strain = 'CTG'
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_PLK:Einstein"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT e.na_sequence_id  as feature_id,
       'ChIP_PLK'        as type, 
       'Einstein'        as source, 
       e.source_id       as name, 
       e.source_id       as parent_id, 
       $base_start       as startm, 
       $rend             as end
FROM   DoTS.Nasequence e
WHERE  
       e.na_sequence_id = $srcfeature_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="GeneticMarkers:Sibley"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT 
       sa.na_feature_id           as feature_id,
       'GeneticMarkers'           as type, 
       'Sibley'                   as source, 
       sa.source_id               as name, 
       '.'                        as score, 
       sa.seq_source_id           as parent_id, 
       sa.start_min               as startm, 
       sa.start_min               as end, 
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'RefNA='   || sa.reference_na || '$dlm' ||
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'NonSyn='   || sa.has_nonsynonymous_allele || '$dlm'||
       'IsCoding=' || sa.is_coding || '$dlm' ||
          'Gene=' || sa.gene_source_id || '$dlm' ||
       'PositionInCDS=' || sa.position_in_CDS || '$dlm' ||
       'PositionInProtein=' || sa.position_in_protein || '$dlm' ||
       'RefStrain=' || sa.reference_strain || '$dlm' ||
       'RefAA='   || sa.reference_aa || '$dlm' ||
       sa.gene_strand || '$dlm' ||
       'SourceID='   ||  sa.source_id 
        as atts
FROM   apidb.featurelocation fl,
       apidb.SnpAttributes sa
WHERE  fl.na_sequence_id = $srcfeature_id
  AND  fl.start_min <= $rend
  AND  fl.start_min >= $base_start
  AND  fl.na_feature_id = sa.na_feature_id
  AND  sa.dataset = 'Genetic Markers - David Sibley'
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:Introns"  includeProjects="ToxoDB">
   <testParamValues project="ToxoDB">
     <param name="srcfeature_id" value="$$na_seq_id_Ib$$"/>
   </testParamValues> 
    <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'Introns'                  as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'ProbeSet=' || f.description || '$dlm' ||
       'Count='   || f.probe_count || '$dlm'
        as atts
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit -Expresssion-IbIntron'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="GeneticMarkers:overview"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT
       sv.na_feature_id as feature_id,
       'GeneticMarkers' type, 
       'overview' source, 
       SUBSTR (sv.source_id, 14) as name,
       '.' score, 
       l.sequence_source_id as parent_id, 
       l.start_min as startm, 
       l.end_max as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'Note=GeneticMarkers' atts
FROM   dots.seqVariation sv, ApiDB.FeatureLocation l,
       sres.EXTERNALDATABASERELEASE edr, sres.EXTERNALDATABASE ed
WHERE  sv.external_database_release_id = edr.external_database_release_id and
       edr.external_database_id = ed.external_database_id and
       ed.name = 'Genetic Markers - David Sibley'
 AND   l.na_sequence_id = $srcfeature_id
 AND  sv.na_feature_id=l.na_feature_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_TypeIII:Einstein" includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT e.na_sequence_id  as feature_id,
       'ChIP_TypeIII'    as type, 
       'Einstein'        as source, 
       e.source_id       as name, 
       e.source_id       as parent_id, 
       $base_start       as startm, 
       $rend             as end
FROM   DoTS.Nasequence e
WHERE  
       e.na_sequence_id = $srcfeature_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:GenotypingEstSNPs"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'GenotypingEstSNPs'        as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'ProbeSet=' || f.description || '$dlm' ||
       'Count='   || f.probe_count || '$dlm'
        as atts
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - Genotyping-estSNPs'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:Resequencing"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'Resequencing'             as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'ProbeSet=' || f.description || '$dlm' ||
       'Count='   || f.probe_count || '$dlm'
        as atts
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - Resequencing'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:NuclearCodingAS"  includeProjects="ToxoDB">
  <testParamValues project="ToxoDB">
     <param name="srcfeature_id" value="$$na_seq_id_Ib$$"/>
  </testParamValues> 
  <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'NuclearCodingAS'          as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'ProbeSet=' || f.description || '$dlm' ||
       'Count='   || f.probe_count || '$dlm'
        as atts
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - Expresssion-Antisense'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:TBLASTNTranscriptDiscovery"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'TBLASTNTranscriptDiscovery'   as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - TBLASTN-TranscriptDiscovery'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:ESTTranscriptDiscovery"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'ESTTranscriptDiscovery'   as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - EST-TranscriptDiscovery'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:BLASTXTranscriptDiscovery"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'BLASTXTranscriptDiscovery'   as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - BLASTX-TranscriptDiscovery'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:ChIP"  includeProjects="ToxoDB">
   <testParamValues project="ToxoDB">
       <param name="srcfeature_id" value="$$na_seq_id_IX$$"/>
   </testParamValues> 
     <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'ChIP'                     as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'ProbeSet=' || f.description || '$dlm' ||
       'Count='   || f.probe_count || '$dlm'
        as atts
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - ChIP'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:NuclearCoding"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'        as type, 
       'NuclearCoding'           as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'ProbeSet=' || f.description || '$dlm' ||
       'Count='   || f.probe_count || '$dlm'
        as atts
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - Expression-NuclearCoding'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="AffymetrixProbes:NuclearNonCoding"  includeProjects="ToxoDB">
   <testParamValues project="ToxoDB">
        <param name="srcfeature_id" value="$$na_seq_id_IX$$"/>
   </testParamValues> 
     <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'NuclearNonCoding'          as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'ProbeSet=' || f.description || '$dlm' ||
       'Count='   || f.probe_count || '$dlm'
        as atts
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - Expression-NuclearNonCoding'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_peaks_RH:Einstein"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT f.na_feature_id   as feature_id,
       'ChIP_peaks_RH'  as type, 
       'Einstein'        as source, 
       f.name            as name, 
       f.score           as score, 
       f.na_sequence_id  as parent_id, 
       f.start_min       as startm, 
       f.end_max         as end,
       'Antibody=' || f.antibody || '$dlm' || 'Rep=' || f.rep as atts
FROM   ApiDB.ChIPFeature f
WHERE  f.na_sequence_id = $srcfeature_id
   AND f.start_min <= $rend
   AND f.end_max >= $base_start
   AND f.protocol_name = 'ChIP_chip_Einstein_called_peaks'
   AND f.strain = 'RH'
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_peaks_PLK:Einstein"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT f.na_feature_id   as feature_id,
       'ChIP_peaks_PLK'  as type, 
       'Einstein'        as source, 
       f.name            as name, 
       f.score           as score, 
       f.na_sequence_id  as parent_id, 
       f.start_min       as startm, 
       f.end_max         as end,
       'Antibody=' || f.antibody || '$dlm' || 'Rep=' || f.rep as atts
FROM   ApiDB.ChIPFeature f
WHERE  f.na_sequence_id = $srcfeature_id
   AND f.start_min <= $rend
   AND f.end_max >= $base_start
   AND f.protocol_name = 'ChIP_chip_Einstein_called_peaks'
   AND f.strain = 'PLK'
]]>
    </sql>
  </sqlQuery>

  <sqlQuery name="ChIP_peaks_RH:Hakimi"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT f.na_feature_id   as feature_id,
       'ChIP_peaks_RH'  as type, 
       'Hakimi'         as source, 
       f.name            as name, 
       f.score           as score, 
       f.na_sequence_id  as parent_id, 
       f.start_min       as startm, 
       f.end_max         as end,
       'Treatment=' || f.treatment || '$dlm' || 'Antibody=' || f.antibody || '$dlm' || 'Rep=' || f.rep as atts
FROM   ApiDB.ChIPFeature f
WHERE  f.na_sequence_id = $srcfeature_id
   AND f.start_min <= $rend
   AND f.end_max >= $base_start
   AND f.protocol_name = 'NimbleScan_ChIP_Hakimi_called_peaks'
   AND f.strain = 'RH'
]]>
    </sql>
  </sqlQuery>
    
  
  <sqlQuery name="AffymetrixProbes:GenotypingMarkers" includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT 
       f.na_feature_id            as feature_id,
       'AffymetrixProbes'         as type, 
       'GenotypingMarkers'        as source, 
       f.source_id                as name, 
       '.'                        as score, 
       f.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'ProbeSet=' || f.description || '$dlm' ||
       'Count='   || f.probe_count || '$dlm'
        as atts
FROM   dots.ArrayElementFeature f,
       dots.SequencePiece s,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr  
WHERE  ed.name = 'Affymetrix Probes from Amit - Genotyping-Markers'
  AND  edr.external_database_id = ed.external_database_id
  AND  f.external_database_release_id = edr.external_database_release_id
  AND  s.virtual_na_sequence_id = $srcfeature_id
  AND  f.na_sequence_id = s.piece_na_sequence_id
  AND  l.na_sequence_id = s.virtual_na_sequence_id 
  AND  l.na_feature_id = f.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_RH:Einstein"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT e.na_sequence_id  as feature_id,
       'ChIP_RH'         as type, 
       'Einstein'        as source, 
       e.source_id       as name, 
       e.source_id       as parent_id, 
       $base_start       as startm, 
       $rend             as end
FROM   DoTS.NASequence e
WHERE  
       e.na_sequence_id = $srcfeature_id
]]>
    </sql>
  </sqlQuery>
  
  <sqlQuery name="ChIP_RH:Hakimi"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
 SELECT e.na_sequence_id  as feature_id,
       'ChIP_RH'         as type, 
       'Hakimi'          as source, 
       e.source_id       as name, 
       e.source_id       as parent_id, 
       $base_start       as startm, 
       $rend             as end
FROM   DoTS.NASequence e
WHERE  
       e.na_sequence_id = $srcfeature_id
]]>
    </sql>
  </sqlQuery>
  
  <sqlQuery name="SNP:Broad"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
 SELECT 
       sa.na_feature_id          as feature_id,
       'SNP'                      as type, 
       'Broad'                 as source, 
       sa.source_id              as name, 
       '.'                        as score, 
       sa.seq_source_id           as parent_id, 
       sa.start_min               as startm, 
       sa.start_min               as end, 
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'NonSyn='   || sa.has_nonsynonymous_allele || '$dlm'||
       'IsCoding=' || sa.is_coding || '$dlm' ||
       'Gene=' || sa.gene_source_id || '$dlm' ||
       'params=' || sa.position_in_CDS || '&' ||
       sa.position_in_protein || '&' ||
       sa.reference_strain || '&' ||
       sa.reference_aa || '&' ||
       sa.gene_strand || '&' ||
       sa.reference_na || '&' ||
       sa.source_id 
        as atts
FROM   apidb.SnpAttributes sa
WHERE  sa.dataset =  'Broad SNPs'
  AND  sa.na_sequence_id = $srcfeature_id
  AND  sa.start_min <= $rend
  AND  sa.start_min >= $base_start
]]>
    </sql>
  </sqlQuery>
 
  <sqlQuery name="SNP:Winzeler"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
SELECT 
       snp.na_feature_id          as feature_id,
       'SNP'                      as type, 
       'Winzeler'                 as source, 
       snp.source_id              as name, 
       '.'                        as score, 
       s.source_id                as parent_id, 
       l.start_min                as startm, 
       l.end_max                  as end, 
       decode(l.is_reversed, 0, '+1', 1, '-1', '.') as strand,
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'IsCoding=' || snp.is_coding || '$dlm' ||
       'PositionInCDS=' || snp.position_in_CDS || '$dlm' ||
       'Gene='   || gene_info.source_id || '$dlm' ||
       'RefStrain=' || snp.reference_strain || '$dlm' ||
       'RefNA='   || snp.reference_na || '$dlm' ||
       'SourceID='   || snp.source_id || '$dlm' 
        as atts
FROM   dots.ExternalNaSequence s,
       dots.SnpFeature snp,
       ApiDB.FeatureLocation l,
       sres.ExternalDatabase ed,
       sres.ExternalDatabaseRelease edr,
       apidb.geneattributes gene_info
WHERE  ed.name = 'Winzeler Array - Plasmodium Genetic Variation'  
  AND  edr.external_database_id = ed.external_database_id
  AND  snp.external_database_release_id = edr.external_database_release_id
  AND  s.na_sequence_id = $srcfeature_id
  AND  snp.na_sequence_id = s.na_sequence_id
  AND  l.na_feature_id = snp.na_feature_id
  AND  l.start_min <= $rend
  AND  l.end_max >= $base_start
  AND  snp.parent_id = gene_info.na_feature_id(+)
]]>
    </sql>
  </sqlQuery> 

  <sqlQuery name="SNP:Genotyping"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
SELECT 
       sa.na_feature_id          as feature_id,
       'SNP'                     as type, 
       'Genotyping'              as source, 
       sa.source_id              as name, 
       '.'                       as score, 
       sa.seq_source_id          as parent_id, 
       sa.start_min              as startm, 
       sa.start_min              as end, 
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'IsoDbName=' || iso_ext_db_name || '$dlm' ||
       'MinorAllele=' || swi.minor_allele || '$dlm' ||
       'MajorAllele=' || swi.major_allele || '$dlm' ||
       'MinorAlleleFreq=' || swi.minor_allele_frequency || '$dlm' ||
       'NumIsolates=' || swi.number_isolates as atts
FROM   apidb.snpsWithIsolates swi, apidb.SnpAttributes sa
WHERE  swi.snp_source_id = sa.source_id
  AND  sa.na_sequence_id = $srcfeature_id
  AND  sa.start_min <= $rend
  AND  sa.start_min >= $base_start
  AND  sa.dataset='PlasmoDB combined SNPs'
]]>
    </sql>
  </sqlQuery> 

  <sqlQuery name="SNP:SangerPf"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
 SELECT 
       sa.na_feature_id          as feature_id,
       'SNP'                      as type, 
       'SangerPf'                 as source, 
       sa.source_id              as name, 
       '.'                        as score, 
       sa.seq_source_id           as parent_id, 
       sa.start_min               as startm, 
       sa.start_min               as end, 
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'NonSyn='   || sa.has_nonsynonymous_allele || '$dlm'||
       'IsCoding=' || sa.is_coding || '$dlm' ||
       'Gene=' || sa.gene_source_id || '$dlm' ||
       'params=' || sa.position_in_CDS || '&' ||
       sa.position_in_protein || '&' ||
       sa.reference_strain || '&' ||
       sa.reference_aa || '&' ||
       sa.gene_strand || '&' ||
       sa.reference_na || '&' ||
       sa.source_id 
        as atts
FROM   apidb.SnpAttributes sa
WHERE  sa.dataset = 'Sanger falciparum SNPs'
  AND  sa.na_sequence_id = $srcfeature_id
  AND  sa.start_min <= $rend
  AND  sa.start_min >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:SangerPr"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
 SELECT 
       sa.na_feature_id          as feature_id,
       'SNP'                      as type, 
       'SangerPr'                 as source, 
       sa.source_id              as name, 
       '.'                        as score, 
       sa.seq_source_id           as parent_id, 
       sa.start_min               as startm, 
       sa.start_min               as end, 
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'NonSyn='   || sa.has_nonsynonymous_allele || '$dlm'||
       'IsCoding=' || sa.is_coding || '$dlm' ||
       'Gene=' || sa.gene_source_id || '$dlm' ||
       'params=' || sa.position_in_CDS || '&' ||
       sa.position_in_protein || '&' ||
       sa.reference_strain || '&' ||
       sa.reference_aa || '&' ||
       sa.gene_strand || '&' ||
       sa.reference_na || '&' ||
       sa.source_id 
        as atts
FROM   apidb.SnpAttributes sa
WHERE  sa.dataset = 'Sanger reichenowi SNPs'  
  AND  sa.na_sequence_id = $srcfeature_id
  AND  sa.start_min <= $rend
  AND  sa.start_min >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="match:BergmanVaidyaOligos"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
 SELECT
       sim.similarity_id feature_id,
       'match' type,
       'BergmanVaidyaOligos' source,
       qry.source_id name,
       sim.score score,
       sim.query_id    parent_id,
       sim.min_subject_start startm,
       sim.max_subject_end   end,
       decode(sim.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'Note=' || subj.description || '$dlm' ||
       'Expect=' || sim.pvalue_mant || 'e' || sim.pvalue_exp || '$dlm' ||
       'PercentIdentity=' || sim.number_identical / sim.total_match_length || '$dlm' ||
       'PercentPositive=' || sim.number_positive / sim.total_match_length atts
 FROM 
       dots.similarity sim,
       core.tableinfo qti,
       core.tableinfo sti,
       dots.externalnasequence subj,
       dots.externalnasequence qry,
       sres.externaldatabase ed1,
       sres.externaldatabase ed2,
       sres.externaldatabaserelease edr1,
       sres.externaldatabaserelease edr2
WHERE 
       sim.min_subject_start <= $rend and 
       sim.max_subject_end >= $base_start and
       sim.subject_id = $srcfeature_id and
       qti.table_id = sim.query_table_id and
       qti.name = 'ExternalNASequence' and
       sti.table_id = sim.subject_table_id and
       sti.name = 'ExternalNASequence' and
       qry.na_sequence_id = sim.query_id and
       subj.na_sequence_id = sim.subject_id and
       subj.external_database_release_id = edr1.external_database_release_id and
       qry.external_database_release_id = edr2.external_database_release_id and
       edr1.external_database_id = ed1.external_database_id and
       edr2.external_database_id = ed2.external_database_id and
       ed1.name = 'Jane Carlton P. yoelii chromosomes' and
       ed2.name = 'Vaidya Bergman oligos'
ORDER BY 
       sim.min_query_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Combined"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
 SELECT 
       sa.na_feature_id          as feature_id,
       'SNP'                      as type, 
       'Combined'                 as source, 
       sa.source_id              as name, 
       '.'                        as score, 
       sa.seq_source_id           as parent_id, 
       sa.start_min               as startm, 
       sa.start_min               as end, 
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'NonSyn='   || sa.has_nonsynonymous_allele || '$dlm'||
       'IsCoding=' || sa.is_coding || '$dlm' ||
       'Gene=' || sa.gene_source_id || '$dlm' ||
       'params=' || sa.position_in_CDS || '&' ||
       sa.position_in_protein || '&' ||
       sa.reference_strain || '&' ||
       sa.reference_aa || '&' ||
       sa.gene_strand || '&' ||
       sa.reference_na || '&' ||
       sa.source_id 
        as atts
FROM   apidb.SnpAttributes sa
WHERE  sa.dataset = 'PlasmoDB combined SNPs'  
  AND  sa.na_sequence_id = $srcfeature_id
  AND  sa.start_min <= $rend
  AND  sa.start_min >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  <sqlQuery name="mapp:promotersForward"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
      SELECT distinct(na_sequence_id) feature_id,
             'mapp' type,
             'promotersForward' source
       FROM  apidb.plasmoMapp
       WHERE na_sequence_id = $srcfeature_id
         AND location <= $rend
         AND location >= $base_start - 1 
         AND strand = 1
]]>
    </sql>
  </sqlQuery>

<sqlQuery name="mapp:promotersReverse"  includeProjects="PlasmoDB">    
  <sql>
<![CDATA[
      SELECT distinct(na_sequence_id) feature_id,
             'mapp' type,
             'promotersReverse' source
       FROM  apidb.plasmoMapp
       WHERE na_sequence_id = $srcfeature_id
         AND location <= $rend
         AND location >= $base_start - 1 
         AND strand = -1
]]>
    </sql>
  </sqlQuery>

  <sqlQuery name="SNP:Su"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
 SELECT
       sa.na_feature_id          as feature_id,
       'SNP'                      as type, 
       'Su'                       as source, 
       sa.source_id              as name, 
       '.'                        as score, 
       sa.seq_source_id           as parent_id, 
       sa.start_min               as startm, 
       sa.start_min               as end, 
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'NonSyn='   || sa.has_nonsynonymous_allele || '$dlm'||
       'IsCoding=' || sa.is_coding || '$dlm' ||
       'Gene=' || sa.gene_source_id || '$dlm' ||
       'params=' || sa.position_in_CDS || '&' ||
       sa.position_in_protein || '&' ||
       sa.reference_strain || '&' ||
       sa.reference_aa || '&' ||
       sa.gene_strand || '&' ||
       sa.reference_na || '&' ||
       sa.source_id 
        as atts
FROM   apidb.SnpAttributes sa
WHERE  sa.dataset =  'NIH SNPs'
  AND  sa.na_sequence_id = $srcfeature_id
  AND  sa.start_min <= $rend
  AND  sa.start_min >= $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Widmer"  includeProjects="CryptoDB">
     <sql>
<![CDATA[
 SELECT 
       sa.na_feature_id         as feature_id,
       'SNP'                    as type, 
       'Widmer'                 as source, 
       sa.source_id             as name, 
       sa.seq_source_id         as parent_id, 
       sa.start_min             as startm, 
       sa.start_min             as end, 
       decode(sa.gene_strand, 'forward', '+1', 'reverse', '-1', '.') as strand,
       'RefNA='   || sa.reference_na || '$dlm' ||
       'base_start='   || '$base_start' || '$dlm' ||
       'rend='   || '$rend' || '$dlm' ||
       'NonSyn='   || sa.has_nonsynonymous_allele || '$dlm'||
       'IsCoding=' || sa.is_coding || '$dlm' ||
       'Gene=' || sa.gene_source_id || '$dlm' ||
			 'params=' || sa.position_in_CDS || '&' ||
			 sa.position_in_protein || '&' ||
			 sa.reference_strain || '&' ||
			 sa.reference_aa || '&' ||
			 sa.gene_strand || '&' ||
			 sa.reference_na || '&' ||
			 sa.source_id
       as atts
FROM   apidb.featurelocation fl,
       apidb.SnpAttributes sa
WHERE  fl.na_sequence_id = $srcfeature_id
  AND  fl.start_min <= $rend
  AND  fl.start_min >= $base_start
  AND  fl.na_feature_id = sa.na_feature_id
]]>
    </sql>
  </sqlQuery>
</module>

<!--                       Feature.pm                         -->
<!-- Description: All of the following queries are used by    -->
<!-- sub_SeqFeatures() in Feature.pm.                         -->
<!-- Names are in a format - type:source:subfeatures,         -->
<!-- e.g.  gene:Genbank:subfeatures                           -->
<!-- They should be corespondent with the features types      -->
<!-- implemented in feature() subroutine in Segment.pm        -->

<module name="Feature.pm">


  <sqlQuery name="gene:annotation:bulksubfeatures">
     <sql>
<![CDATA[
SELECT 
       exon_loc.na_feature_id feature_id, 
       'exon' type, 
       'annotation' source, 
       exon_loc.na_feature_id name,
       exon_loc.parent_id parent_id,
       exon_loc.start_min startm,            
       exon_loc.end_max end, 
       decode (exon_loc.is_reversed, 0, '+1', 1, '-1', '.') strand,
       '' atts 
FROM   
       ApiDB.FeatureLocation exon_loc, Apidb.GeneAttributes ga
WHERE  exon_loc.na_sequence_id = $srcfeature_id
  and  exon_loc.feature_type = 'ExonFeature'
  AND  exon_loc.start_min <= $rend
  AND  exon_loc.end_max >= $base_start
  AND ga.na_feature_id = exon_loc.parent_id
  and ga.is_deprecated = 0
ORDER BY 
       exon_loc.start_min
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="gene:syntenyMC:attribute:Ortholog"  includeProjects="ToxoDB">
      <sql>
<![CDATA[
select sb.source_id
from apidb.SYNTENICORTHOLOGS sa, apidb.SYNTENICORTHOLOGS sb
where sa.SOURCE_ID = '$name'
and sa.group_id = sb.GROUP_ID
and sa.organism != sb.organism
]]>
 </sql>
 </sqlQuery>

 <sqlQuery name="gene:syntenyMC:attribute:Ortholog"  excludeProjects="ToxoDB">
  <testParamValues project="TriTrypDB">
      <param name="name" value="LmjF05.1010"/>
  </testParamValues>
     <sql>
<![CDATA[
select gb.SOURCE_ID
from apidb.GENEATTRIBUTES ga, apidb.GENEATTRIBUTES gb
where ga.source_id = '$name'
and ga.gene_id = gb.GENE_ID
and ga.ORGANISM != gb.organism
UNION
SELECT
ogf.source_id
FROM 
dots.GENEFEATURE gf,
dots.GENEFEATURE ogf,
dots.SequenceSequenceGroup ssg,
dots.SequenceSequenceGroup ossg
WHERE 
gf.source_id = '$name'
AND ogf.source_id != '$name'
AND ssg.sequence_id = gf.na_feature_id
AND ossg.sequence_group_id = ssg.sequence_group_id
AND ogf.na_feature_id = ossg.sequence_id
UNION
select og.source_id
from apidb.CHROMOSOME6ORTHOLOGY cog, ApiDB.CHROMOSOME6ORTHOLOGY ocog,
dots.GENEFEATURE g, dots.GENEFEATURE og
where g.source_id = '$name'
and og.source_id != '$name'
and cog.source_id = g.source_id
and ocog.group_id = cog.group_id
and og.source_id = ocog.source_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:DoTSAssemblies:bulksubfeatures">
     <sql>
<![CDATA[
SELECT blat.blat_alignment_id feature_id,
       'block' type,
       'DoTSAssemblies' source,
       a.source_id name, 
       blat.score || '' score,
       blat.blat_alignment_id parent_id,
       blat.target_start startm,
       blat.target_end end,
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand,
       blat.tstarts TSTARTS,
       blat.blocksizes BLOCKSIZES,
       ' ' atts
FROM
       apidb.BlatAlignmentLocation blat,
       dots.Assembly a
WHERE
       blat.query_na_sequence_id = a.na_sequence_id and 
       blat.target_start <= $rend and 
       blat.target_end >= $base_start and 
--       (blat.target_end - blat.target_start ) < 5000 and 
       blat.is_best_alignment = 1 and
       blat.target_na_sequence_id = $srcfeature_id
ORDER BY
       blat.target_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:EST:bulksubfeatures">
     <sql>
<![CDATA[
SELECT blat.blat_alignment_id feature_id,
       'block' type,
       'EST' source,
       est.accession name,
       blat.score || '' score,
       blat.blat_alignment_id parent_id,
       blat.target_start startm,
       blat.target_end end,
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand,
       blat.tstarts TSTARTS,
       blat.blocksizes BLOCKSIZES,
       ' ' atts
FROM   
       apidb.BlatAlignmentLocation blat, 
       dots.ASSEMBLYSEQUENCE asbl, 
       dots.EST est, 
       dots.NASEQUENCE etn
WHERE  
       blat.query_na_sequence_id = asbl.na_sequence_id and 
       blat.target_na_sequence_id = etn.na_sequence_id and 
       est.na_sequence_id = asbl.na_sequence_id and 
       blat.target_start <= $rend and 
       blat.target_end >= $base_start and 
       (blat.target_end - blat.target_start ) < 5000 and 
			 blat.is_best_alignment = 1 and
       etn.na_sequence_id = $srcfeature_id 
       ORDER BY blat.target_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="gene:annotation:attribute:Ortholog"  includeProjects="ToxoDB">
      <sql>
<![CDATA[
select sb.source_id
from apidb.SYNTENICORTHOLOGS sa, apidb.SYNTENICORTHOLOGS sb
where sa.SOURCE_ID = '$name'
and sa.group_id = sb.GROUP_ID
and sa.organism != sb.organism
]]>
  </sql>
 </sqlQuery>

  <sqlQuery name="gene:annotation:attribute:Ortholog"   excludeProjects="ToxoDB">
   <testParamValues project="TriTrypDB">
    <param name="name" value="LmjF05.1010"/>
   </testParamValues>
     <sql>
<![CDATA[
select gf.SOURCE_ID,
'ExtDbName=' || ed.name || '$dlm' ||
'Version=' || edr.version
         as atts
FROM
(select gb.SOURCE_ID as source_id
from apidb.GENEATTRIBUTES ga, apidb.GENEATTRIBUTES gb
where ga.source_id = '$name'
and ga.gene_id = gb.GENE_ID
and ga.ORGANISM != gb.organism
UNION
SELECT
ogf.source_id as source_id
FROM 
dots.GENEFEATURE gf,
dots.GENEFEATURE ogf,
dots.SequenceSequenceGroup ssg,
dots.SequenceSequenceGroup ossg
WHERE 
gf.source_id = '$name'
AND ogf.source_id != '$name'
AND ssg.sequence_id = gf.na_feature_id
AND ossg.sequence_group_id = ssg.sequence_group_id
AND ogf.na_feature_id = ossg.sequence_id
UNION
select og.source_id as source_id
from apidb.CHROMOSOME6ORTHOLOGY cog, ApiDB.CHROMOSOME6ORTHOLOGY ocog,
dots.GENEFEATURE g, dots.GENEFEATURE og
where g.source_id = '$name'
and og.source_id != '$name'
and cog.source_id = g.source_id
and ocog.group_id = cog.group_id
and og.source_id = ocog.source_id) ortho,
dots.GENEFEATURE gf,
SRes.ExternalDatabaseRelease edr,
SRes.ExternalDatabase ed 
WHERE
ortho.source_id = gf.source_id
and gf.external_database_release_id = edr.external_database_release_id 
AND  edr.external_database_id = ed.external_database_id 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="domain:MassSpecPeptides:bulksubfeatures">
     <sql>
<![CDATA[
SELECT  msf.na_feature_id as feature_id,
        'Peptide' type,
        ed.name as source,
        fl.start_min as startm,
        fl.end_max as end,
        fl.na_feature_id as parent_id,
        decode (fl.is_reversed, 0, '+1', 1, '-1', '.') strand,
        'ExtDbName=' || ed.name atts
 FROM dots.MassSpecFeature msf, apidb.FeatureLocation fl,
       sres.externaldatabaserelease edr, sres.externaldatabase ed
 WHERE msf.na_feature_id = fl.na_feature_id
  AND  fl.start_min >= $base_start 
  AND  fl.end_max <= $rend
  AND  fl.na_sequence_id = $srcfeature_id
  AND  msf.external_database_release_id = edr.external_database_release_id
  AND  edr.external_database_id = ed.external_database_id
]]>
    </sql>
  </sqlQuery>
  
   <sqlQuery name="UnifiedMassSpecPeptides:density:bulksubfeatures"> 
   <sql> 
<![CDATA[ 
SELECT interval feature_id, 
       na_sequence_id as parent_id,
      'UnifiedMassSpecPeptides' type, 
      'density' source,
      count(interval) score, 
      interval * 50 startm, 
      (interval + 1) * 50 end,
      'score=' || count(interval) atts
FROM ( SELECT ceil(nal.start_min /50) interval, nal.na_sequence_id
 FROM  dots.massspecfeature msf,
       apidb.FeatureLocation nal,
       dots.nasequence enas
 WHERE msf.na_feature_id = nal.na_feature_id
  AND  nal.na_sequence_id = $srcfeature_id
  AND  enas.na_sequence_id = $srcfeature_id
  AND  nal.start_min >= $base_start
  AND  nal.end_max <= $rend
 ORDER BY nal.start_min)
GROUP BY interval, na_sequence_id
]]> 
    </sql> 
  </sqlQuery>
 
  <sqlQuery name="match:TGI:bulksubfeatures">
    <testParamValues project="ToxoDB">
    <param name="srcfeature_id" value="240961"/>
    </testParamValues>
     <sql>
<![CDATA[
 SELECT
       hsp.similarity_span_id feature_id,
       hsp.similarity_id parent_id,
       'HSP' type, 
       'TGI' source, 
       query.source_id name, 
       '' phase, 
       hsp.number_positive / hsp.match_length score, 
       hsp.subject_start startm,            
       hsp.subject_end end, 
       decode (hsp.is_reversed, 0, '-1', 1, '+1', '.') strand,
       'QStart=' || hsp.query_start || '$dlm' ||
       'QEnd=' || hsp.query_end  atts 
FROM   
       dots.similarity hit,
       dots.similarityspan hsp,
       dots.nasequence query
WHERE  
       hit.similarity_id = hsp.similarity_id and
       query.na_sequence_id = hit.query_id and
       hit.min_subject_start <= $rend and 
       hit.max_subject_end >= $base_start and 
       hit.subject_id = $srcfeature_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:BLAT:bulksubfeatures">
     <sql>
<![CDATA[
SELECT blat.blat_alignment_id feature_id,
       'block' type,
       'BLAT' source,
       est.accession name,
       blat.score || '' score,
       blat.blat_alignment_id parent_id,
       blat.target_start startm,
       blat.target_end end,
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand,
       blat.tstarts TSTARTS,
       blat.blocksizes BLOCKSIZES,
       ' ' atts
FROM   apidb.BlatAlignmentLocation blat, 
       dots.ASSEMBLYSEQUENCE asbl,
       dots.EST est,
       dots.NASEQUENCE etn
WHERE  blat.query_na_sequence_id = asbl.na_sequence_id and
       blat.target_na_sequence_id = etn.na_sequence_id and
       est.na_sequence_id = asbl.na_sequence_id and
       blat.target_start <= $rend and 
       blat.target_end >= $base_start and 
       (blat.target_end - blat.target_start ) < 5000 and 
			 blat.is_best_alignment = 1 and
       etn.na_sequence_id = $srcfeature_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:Bacs:bulksubfeatures">
     <sql>
<![CDATA[
SELECT blat.blat_alignment_id feature_id, 
'bac_end' type,
'Bacs' source,
etn.source_id name, 
CASE WHEN tn.name like 'Leishmania%' OR tn.name like 'Trypanosoma%'
              THEN regexp_substr(etn.source_id, '(.*)[^(d_T7\.(1-2)|L)(d_SP6\.1|R)]')
     WHEN tn.name like 'Toxoplasma%'
              THEN regexp_substr(etn.source_id, '(.*)[^(q|p)1c)]') 
END parent_id,
blat.score, 
blat.target_start startm,
blat.target_end end,
'pct=' || blat.percent_identity atts
FROM apidb.BlatAlignmentLocation blat,
dots.ExternalNASequence etn, sres.taxonname tn
WHERE blat.query_na_sequence_id = etn.na_sequence_id
AND etn.taxon_id = tn.taxon_id
AND tn.name_class = 'scientific name'
AND blat.target_na_sequence_id = $srcfeature_id
AND blat.target_start <= $rend 
AND blat.target_end >= $base_start - 1
AND blat.is_best_alignment = 1
AND (blat.target_end - blat.target_start ) < 5000
AND (tn.name like 'Toxoplasma%' OR blat.number_of_spans =1)
AND etn.external_database_release_id = blat.query_external_db_release_id
AND blat.query_external_db_release_id in (
SELECT edr.external_database_release_id
FROM sres.EXTERNALDATABASE ed, sres.EXTERNALDATABASERELEASE edr
WHERE ed.external_database_id=edr.external_database_id
AND ed.name in ('L.major BAC Ends from Sanger',
                'T.brucei RPCI93 BAC Ends',
                'T.cruzi CHORI105 BAC End',
                'L.major PAC Ends from Sanger',
                'TgME49B7 Sanger BAC Ends'))
]]>
    </sql>
  </sqlQuery>
  

  <sqlQuery name="annotation:density:subfeatures">
   <testParamValues project="TriTrypDB">
    <param name="parent_id" parentFeatureTest="annotation:density"/>
   </testParamValues>
   <testParamValues project="ToxoDB">
      <param name="parent_id" value="$$na_seq_id_X$$"/>
   </testParamValues> 
     <sql>
<![CDATA[
SELECT interval feature_id, 
      'annotation' type, 
      'density' source, 
      count(interval) score, 
      (interval - 1) * 50000 startm, 
      interval * 50000 end 
FROM ( 
      SELECT ceil(fl.start_min / 50000) interval 
      FROM   apidb.GENEATTRIBUTES gf, apidb.FeatureLocation fl

      WHERE  gf.na_feature_id = fl.na_feature_id and 
             fl.na_sequence_id = $parent_id 
      ORDER BY fl.start_min) 
GROUP BY interval 
]]>
    </sql>
  </sqlQuery>

  <sqlQuery name="ORF:density:bulksubfeatures"> 
    <sql> 
<![CDATA[ 
SELECT interval feature_id, 
       na_sequence_id as parent_id,
      'ORF' type, 
      'density' source,
      count(interval) score, 
      interval * 500 startm, 
      (interval + 1) * 500 end,
      'score=' || count(interval) atts
FROM ( SELECT ceil(nal.start_min /500) interval, nal.na_sequence_id
FROM
       dots.externalnasequence enas,
       dots.miscellaneous t,
       dots.translatedaafeature taaf, 
       dots.translatedaasequence taas, 
       sres.taxonname tn, 
       sres.sequenceontology so, 
       ApiDB.FeatureLocation nal 
WHERE
       t.na_feature_id = taaf.na_feature_id
       AND taaf.aa_sequence_id = taas.aa_sequence_id
       AND enas.na_sequence_id = t.na_sequence_id 
       AND enas.taxon_id = tn.taxon_id
       AND tn.name_class = 'scientific name'
       AND t.sequence_ontology_id = so.sequence_ontology_id
       AND so.term_name = 'ORF'
       AND taaf.na_feature_id = nal.na_feature_id
       AND enas.na_sequence_id = $srcfeature_id
       AND nal.start_min >= $base_start - 1 
       AND nal.end_max <= $rend
       AND nal.end_max - nal.start_min >= 300
ORDER BY nal.start_min)
GROUP BY interval, na_sequence_id
]]> 
    </sql> 
  </sqlQuery>
  
  <sqlQuery name="alignment:Cosmids:bulksubfeatures">
     <sql>
<![CDATA[
SELECT blat.blat_alignment_id feature_id, 
'cosmid_end' type,
'Cosmids' source,
etn.source_id name, 
 CASE WHEN tn.name like 'Leishmania%' OR tn.name like 'Trypanosoma%'
         THEN regexp_substr(etn.source_id, '(.*)[^(X)(Y)]')
      WHEN tn.name like 'Toxoplasma%'
         THEN regexp_substr(etn.source_id, '(.*)[^T(V|H)]')
  END parent_id,
blat.score, 
blat.target_start startm,
blat.target_end end,
'pct=' || blat.percent_identity atts
FROM apidb.BlatAlignmentLocation blat,
dots.ExternalNASequence etn, Sres.TaxonName tn,
sres.EXTERNALDATABASE ed, sres.EXTERNALDATABASERELEASE edr
WHERE blat.query_na_sequence_id = etn.na_sequence_id
AND blat.target_na_sequence_id = $srcfeature_id
AND blat.target_start <= $rend 
AND blat.target_end >= $base_start - 1
AND blat.is_best_alignment = 1
AND (blat.target_end - blat.target_start ) < 5000
AND (tn.name like 'Toxoplasma%' OR blat.number_of_spans =1)
AND etn.external_database_release_id = blat.query_external_db_release_id
AND blat.query_external_db_release_id = edr.external_database_release_id
AND ed.external_database_id=edr.external_database_id
AND etn.taxon_id = tn.taxon_id
AND tn.name_class = 'scientific name'
AND ed.name in ('L.major Cosmid Ends from Sanger',
                'Tg TIGR Cosmid Ends')
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="gene:syntenyMC:bulksubfeatures">
     <sql>
<![CDATA[
SELECT
       exf.na_feature_id feature_id,
       'exon' type, 
       'syntenyMC' source, 
       exf.parent_id,
       CASE WHEN (syn.is_reversed = 1) 
         THEN anch_left.ref_loc - ((anch_left.syntenic_loc - exfloc.end_max) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc - 1))
         ELSE anch_left.ref_loc + ((exfloc.start_min - anch_left.syntenic_loc)  * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1)) 
       END startm,
       CASE WHEN (syn.is_reversed = 1) 
         THEN anch_left.ref_loc - ((anch_left.syntenic_loc - exfloc.start_min) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc - 1))
         ELSE anch_left.ref_loc + ((exfloc.end_max - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))  
       END end,
       CASE WHEN (exfloc.is_reversed = syn.is_reversed) THEN 1 ELSE -1 END strand
FROM 
       apidb.synteny syn,
       apidb.syntenyAnchor anch_left,
       apidb.syntenyAnchor anch_right,
       apidb.featurelocation exfloc,
       dots.exonfeature exf,
       sres.externaldatabaserelease edr,
       sres.externaldatabase ed
WHERE edr.external_database_id = ed.external_database_id 
  AND syn.external_database_release_id = edr.external_database_release_id
  AND syn.a_na_sequence_id = $srcfeature_id
  AND syn.a_start <= $rend 
  AND syn.a_end >= $base_start 
  AND anch_left.synteny_id = syn.synteny_id 
  AND anch_left.prev_ref_loc < $base_start 
  AND anch_left.ref_loc >= $base_start
  AND anch_right.synteny_id = syn.synteny_id
  AND anch_right.ref_loc < $rend
  AND anch_right.next_ref_loc >= $rend
  AND exfloc.feature_type = 'ExonFeature'
  AND exfloc.na_sequence_id = syn.b_na_sequence_id 
  AND (
       (syn.is_reversed = 0
        AND anch_left.ref_loc + ((exfloc.start_min - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1)) <= $rend 
        AND anch_left.ref_loc + ((exfloc.end_max - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1)) >= $base_start
       ) 
       OR
       (syn.is_reversed = 1 
        AND anch_left.ref_loc - ((anch_left.syntenic_loc - exfloc.end_max) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc - 1)) <= $rend 
        AND anch_left.ref_loc - ((anch_left.syntenic_loc - exfloc.start_min) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc - 1)) >= $base_start 
       )
  )
  AND exfloc.start_min <= syn.b_end
  AND exfloc.end_max >= syn.b_start
  AND exf.na_feature_id = exfloc.na_feature_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="match:WU_BLASTX:bulksubfeatures">
     <sql>
<![CDATA[
 SELECT sim.similarity_span_id feature_id, 
       sim.similarity_id as parent_id,
       'HSP' type, 
       'WU_BLASTX' source, 
       sim.similarity_span_id name, 
       '.' phase, 
       sim.span_score || '' score, 
       sim.query_start startm, 
       sim.query_end end, 
       decode (sim.span_is_reversed, 0, '+1', 1, '-1', '.') strand, 
       '' atts 
FROM   apidb.SimilaritySpanLocation sim
WHERE  sim.query_id = $srcfeature_id
AND    (sim.max_query_end - sim.min_query_start) < 5000
AND    to_number(sim.pvalue_mant || 'e' || sim.pvalue_exp) < 1e-10 
AND    sim.min_query_start >= $base_start 
AND    sim.max_query_end <= $rend
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="match:BLASTX:bulksubfeatures">
     <sql>
<![CDATA[
 SELECT sim.similarity_span_id feature_id, 
       sim.similarity_id as parent_id,
       'HSP' type, 
       'BLASTX' source, 
       sim.similarity_span_id name, 
       '.' phase, 
       sim.span_score || '' score, 
       sim.query_start startm, 
       sim.query_end end, 
       decode (sim.span_is_reversed, 0, '+1', 1, '-1', '.') strand, 
       '' atts 
FROM   apidb.SimilaritySpanLocation sim
WHERE  sim.query_id = $srcfeature_id
AND    (sim.max_query_end - sim.min_query_start) < 5000
AND    to_number(sim.pvalue_mant || 'e' || sim.pvalue_exp) < 1e-10 
AND    sim.min_query_start >= $base_start 
AND    sim.max_query_end <= $rend
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:dbEST:bulksubfeatures">
     <sql>
<![CDATA[
SELECT blat.blat_alignment_id feature_id,
       'block' type,
       'dbEST' source,
       est.accession name,
       blat.score || '' score,
       blat.blat_alignment_id parent_id,
       blat.target_start startm,
       blat.target_end end,
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand,
       blat.tstarts TSTARTS,
       blat.blocksizes BLOCKSIZES,
       ' ' atts
FROM
       apidb.BlatAlignmentLocation blat,
       dots.EST est,
       dots.EXTERNALNASEQUENCE etn
WHERE  blat.target_start <= $rend
  AND  blat.target_end >= $base_start
  AND  blat.target_na_sequence_id = $srcfeature_id
  AND  est.na_sequence_id = blat.query_na_sequence_id
  AND  etn.na_sequence_id = est.na_sequence_id
ORDER BY
       blat.target_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SAGE:3-5prime:bulkAttribute">
     <sql>
<![CDATA[
 SELECT fl.na_feature_id as feature_id,
       staa.library_name,
       staa.raw_count,
       staa.library_tag_percentage
FROM   apidb.FeatureLocation fl,
       apidb.sagetaganalysisattributes staa,
       apidb.sagetagattributes sta,
       rad.assay a
WHERE  fl.feature_type ='SAGETagFeature'
  AND  fl.na_sequence_id = $srcfeature_id 
  AND  fl.start_min <= $rend
  AND  fl.end_max >= $base_start
  AND  fl.na_feature_id = sta.na_feature_id
  AND  staa.library_name = a.name
  AND  to_number(fl.feature_source_id) = staa.composite_element_id
ORDER BY feature_id, a.assay_id
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="alignment:BLAT:seq">
     <sql>
<![CDATA[
SELECT est.na_sequence_id, est.source_id, est.sequence
FROM   DOTS.EXTERNALNASEQUENCE est
WHERE  est.source_id = '$name'
]]>
    </sql>
  </sqlQuery>
  
<!--  
  <sqlQuery name="clusteralignment:EstCluster:bulksubfeatures">
     <sql>
<![CDATA[
SELECT blat.blat_alignment_id feature_id, 
       'block' type, 
       'EstCluster' source, 
       a.source_id name, 
       blat.score || '' score,
       blat.blat_alignment_id parent_id,
       blat.target_start startm,
       blat.target_end end,
       decode (blat.is_reversed, 0, '+1', 1, '-1', '.') strand,
       blat.tstarts TSTARTS,
       blat.blocksizes BLOCKSIZES,
       ' ' atts
FROM
       apidb.BlatAlignmentLocation blat,
       dots.Assembly a
WHERE
       blat.query_na_sequence_id = a.na_sequence_id and 
       blat.target_start <= $rend and 
       blat.target_end >= $base_start and 
       (blat.target_end - blat.target_start ) < 5000 and 
       blat.is_best_alignment = 1 and
       blat.target_na_sequence_id = $srcfeature_id
ORDER BY
       blat.target_start
]]>
    </sql>
  </sqlQuery>
  -->
  
  <sqlQuery name="scaffold:TIGR:bulksubfeatures">
     <sql>
<![CDATA[
SELECT sg.na_feature_id as feature_id,
       'gap' type,
       'TIGR' source,
       sg.source_id name,
       'g.' || vs.na_sequence_id parent_id,
       fl.start_min as startm,
       fl.end_max as end,
       '0' as strand,
       'Type=sgap' as atts
FROM   DoTS.ScaffoldGapFeature sg,
       DoTS.NaLocation fl,
       DoTS.VirtualSequence vs
       --DoTS.SequencePiece sp
WHERE  fl.na_feature_id = sg.na_feature_id
   AND vs.na_sequence_id = sg.na_sequence_id
   AND vs.na_sequence_id = $srcfeature_id
   AND fl.start_min < $rend 
   AND fl.end_max > $base_start
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="gene:AlternateModels:bulksubfeatures">
     <sql>
<![CDATA[
SELECT
       fl.na_feature_id feature_id, 
       'exon' type, 
       'AlternateModels' source, 
       fl.na_feature_id name,
       gf.na_feature_id parent_id, 
       '.' score, 
       fl.start_min startm,            
       fl.end_max end, 
       ed.name||':'||edr.version external_database_name,
       decode (fl.is_reversed, 0, '+1', 1, '-1', '.') strand,
       'SecondaryScore=' || gf.secondary_score || '$dlm' ||
       'isDeprecated=' ||  ga.is_deprecated atts 
FROM   
      dots.GeneFeature gf,
       ApiDB.FeatureLocation fl,
       ApiDB.FeatureLocation fl_gf,
       sres.ExternalDatabaseRelease edr,
       sres.ExternalDatabase ed,
       ApiDB.GeneAttributes ga
WHERE  fl.na_sequence_id = $srcfeature_id
  AND  fl.feature_type = 'ExonFeature'
  AND  gf.na_feature_id = fl.parent_id
  AND  fl_gf.na_feature_id = gf.na_feature_id
  AND  fl_gf.start_min <= $rend
  AND  fl_gf.end_max >= $base_start
  AND  gf.external_database_release_id = edr.external_database_release_id 
  AND  edr.external_database_id = ed.external_database_id 
  AND  fl_gf.na_sequence_id = fl.na_sequence_id
  AND  ga.na_feature_id (+) = fl.parent_id
ORDER BY 
       fl.start_min
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="match:syntenySpanMC:bulksubfeatures">
     <sql>
<![CDATA[
SELECT * FROM (
SELECT fl.na_feature_id feature_id,
       'gap' type,
       'syntenyGap' source,
       fl.na_feature_id name,
       anch_left.synteny_id || '_gap' parent_id,
      CASE WHEN (syn.is_reversed = 1)
        THEN anch_left.ref_loc - ((anch_left.syntenic_loc - fl.end_max) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc - 1))
        ELSE anch_left.ref_loc + ((fl.start_min - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))
        END startm,
        CASE WHEN (syn.is_reversed = 1)
        THEN anch_left.ref_loc - ((anch_left.syntenic_loc - fl.start_min) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc - 1))
        ELSE anch_left.ref_loc + ((fl.end_max - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1))
        END end,
        '0' strand,
        'Type=sgap' atts
FROM    apidb.synteny syn,
        apidb.syntenyAnchor anch_left,
        apidb.syntenyAnchor anch_right,
        sres.externaldatabaserelease edr,
        sres.externaldatabase ed,
        apidb.featurelocation fl
WHERE  edr.external_database_id = ed.external_database_id 
   AND syn.external_database_release_id = edr.external_database_release_id
   AND syn.a_na_sequence_id = $srcfeature_id
   AND syn.a_start <= $rend
   AND syn.a_end >= $base_start
   AND anch_left.synteny_id = syn.synteny_id
   AND anch_left.prev_ref_loc < $base_start
   AND anch_left.ref_loc >= $base_start
   AND anch_right.synteny_id = syn.synteny_id
   AND anch_right.ref_loc < $rend
   AND anch_right.next_ref_loc >= $rend
   AND fl.na_sequence_id = syn.b_na_sequence_id
   AND fl.feature_type = 'ScaffoldGapFeature'
   AND fl.IS_TOP_LEVEL = 1
   AND (
    (syn.is_reversed = 0
     AND anch_left.ref_loc + ((fl.start_min - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1)) <= $rend
     AND anch_left.ref_loc + ((fl.end_max - anch_left.syntenic_loc) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_right.syntenic_loc - anch_left.syntenic_loc + 1)) >= $base_start
  )
  OR
  (syn.is_reversed = 1
  AND anch_left.ref_loc + ((anch_left.syntenic_loc - fl.end_max) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc - 1)) <= $rend
  AND anch_left.ref_loc + ((anch_left.syntenic_loc - fl.start_min) * (anch_right.ref_loc - anch_left.ref_loc + 1) / (anch_left.syntenic_loc - anch_right.syntenic_loc - 1)) >= $base_start
  )
  )
  AND fl.start_min <= syn.b_end
  AND fl.end_max >= syn.b_start
) 
ORDER By startm
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Stanford:bulkAttribute"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
SELECT    sa.na_feature_id as feature_id,
          var.strain,
          var.allele,
          var.phenotype,
          var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var,
     apidb.featurelocation fl
WHERE fl.na_sequence_id = $srcfeature_id
  AND fl.start_min <= $rend
  AND fl.start_min >= $base_start
  AND  fl.na_feature_id = sa.na_feature_id
  AND sa.dataset = 'John Boothroyd lab at Stanford'
  AND var.parent_id = fl.na_feature_id
 ORDER BY var.strain
 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:density:subfeatures"  includeProjects="ToxoDB">
   <testParamValues project="ToxoDB">
        <param name="parent_id" value="$$na_seq_id_X$$"/>
   </testParamValues> 
     <sql>
<![CDATA[
 SELECT interval feature_id, 
      'SNP' type, 
      'density' source, 
      count(interval) score, 
      (interval - 1) * 50000 startm, 
      interval * 50000 end 
FROM (
      SELECT ceil(fl.start_min/ 50000) interval
      FROM   dots.seqVariation sv, apidb.SnpAttributes sa, ApiDB.FeatureLocation fl
      WHERE  sv.parent_id = fl.na_feature_id
       AND   fl.na_feature_id = sa.na_feature_id
       AND   fl.na_sequence_id = $parent_id
      ORDER BY fl.start_min )
GROUP BY interval
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_RH:Einstein:bulksubfeatures"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
SELECT f.na_feature_id   as feature_id,
       'ChIP_sub'        as type,
       'Einstein'        as source, 
       f.score           as score, 
       f.na_sequence_id  as parent_id, 
       f.start_min       as startm, 
       f.end_max         as end,
       'Antibody=' || f.antibody || '$dlm' || 'Rep=' || f.rep as atts
FROM   ApiDB.ChIPFeature f
WHERE  f.na_sequence_id = $srcfeature_id
   AND f.start_min <= $rend
   AND f.end_max >= $base_start
   AND f.protocol_name = 'ChIP_chip_Einstein'
   AND f.strain = 'RH'
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_RH:Hakimi:bulksubfeatures" includeProjects="ToxoDB">
     <sql>
<![CDATA[
SELECT f.na_feature_id   as feature_id,
       'ChIP_sub'        as type,
       'Hakimi'          as source, 
       f.score           as score, 
       f.na_sequence_id  as parent_id, 
       f.start_min       as startm, 
       f.end_max         as end,
       'Treatment=' || f.treatment || '$dlm' || 'Antibody=' || f.antibody || '$dlm' || 'Rep=' || f.rep as atts
FROM   ApiDB.ChIPFeature f
WHERE  f.na_sequence_id = $srcfeature_id
   AND f.start_min <= $rend
   AND f.end_max >= $base_start
   AND f.protocol_name = 'NimbleScan_ChIP_Hakimi'
   AND f.strain = 'RH'
]]>
    </sql>
  </sqlQuery>


  <sqlQuery name="GeneticMarkers:Sibley:bulkAttribute"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
SELECT    sa.na_feature_id as feature_id,
          var.strain,
          var.allele,
          var.phenotype,
          var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var,
     apidb.featurelocation fl
WHERE fl.na_sequence_id = $srcfeature_id
  AND fl.start_min <= $rend
  AND fl.start_min >= $base_start
  AND  fl.na_feature_id = sa.na_feature_id
  AND sa.dataset = 'Genetic Markers - David Sibley'
  AND var.parent_id = fl.na_feature_id
 ORDER BY var.strain
 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_PLK:Einstein:bulksubfeatures"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
SELECT f.na_feature_id   as feature_id,
       'ChIP_sub'        as type, 
       'Einstein'        as source, 
       f.score           as score, 
       f.na_sequence_id  as parent_id, 
       f.start_min       as startm, 
       f.end_max         as end,
       'Antibody=' || f.antibody || '$dlm' || 'Rep=' || f.rep as atts
FROM   ApiDB.ChIPFeature f
WHERE  f.na_sequence_id = $srcfeature_id
   AND f.start_min <= $rend
   AND f.end_max >= $base_start
   AND f.protocol_name = 'ChIP_chip_Einstein'
   AND f.strain = 'PLK'
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="ChIP_TypeIII:Einstein:bulksubfeatures"  includeProjects="ToxoDB">
     <sql>
<![CDATA[
SELECT f.na_feature_id   as feature_id,
       'ChIP_sub'        as type, 
       'Einstein'        as source, 
       f.score           as score, 
       f.na_sequence_id  as parent_id, 
       f.start_min       as startm, 
       f.end_max         as end,
       'Antibody=' || f.antibody || '$dlm' || 'Rep=' || f.rep as atts
FROM   ApiDB.ChIPFeature f
WHERE  f.na_sequence_id = $srcfeature_id
   AND f.start_min <= $rend
   AND f.end_max >= $base_start
   AND f.protocol_name = 'ChIP_chip_Einstein'
   AND f.strain = 'CTG'
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Alignment:bulkAttribute" includeProjects="ToxoDB">
     <sql>
<![CDATA[
SELECT    sa.na_feature_id as feature_id,
          var.strain,
          var.allele,
          var.phenotype,
          var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var,
     apidb.featurelocation fl
WHERE fl.na_sequence_id = $srcfeature_id
  AND fl.start_min <= $rend
  AND fl.start_min >= $base_start
  AND fl.feature_type = 'SnpFeature'
  AND fl.na_feature_id = sa.na_feature_id
  AND sa.dataset = 'Genomic Sequence SNPs'
  AND var.parent_id = fl.na_feature_id
 ORDER BY var.strain
 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:SangerPr:bulkAttribute"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
SELECT sa.na_feature_id as feature_id, var.strain, var.allele,
       var.phenotype, var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var
WHERE sa.dataset = 'Sanger reichenowi SNPs'
  AND sa.na_sequence_id = $srcfeature_id
  AND sa.start_min <= $rend
  AND sa.start_min >= $base_start
  AND var.parent_id = sa.na_feature_id
ORDER BY var.strain
]]>
    </sql>
  </sqlQuery>
  
  <sqlQuery name="mapp:promotersForward:bulksubfeatures"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
      SELECT location feature_id, 
             'mapp' type, 
             'promotersForward' source, 
             '' name, 
             value score, 
             na_sequence_id parent_id, 
             location startm, 
             location end, 
             strand,
             '' atts
       FROM  ApiDB.plasmoMapp
       WHERE na_sequence_id = $srcfeature_id 
         AND location <= $rend
         AND location >= $base_start - 1 
         AND strand = 1
]]>
    </sql>
  </sqlQuery>
 
  <sqlQuery name="mapp:promotersReverse:bulksubfeatures"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
      SELECT location feature_id, 
             'mapp' type, 
             'promotersReverse' source, 
             '' name, 
             value score, 
             na_sequence_id parent_id, 
             location startm, 
             location end, 
             strand,
             '' atts
       FROM  ApiDB.plasmoMapp
       WHERE na_sequence_id = $srcfeature_id 
         AND location <= $rend
         AND location >= $base_start - 1 
         AND strand = -1
]]>
    </sql>
  </sqlQuery>
 
  <sqlQuery name="SNP:Combined:density"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
 SELECT etn.na_sequence_id feature_id, 
       'SNP:Combined' type, 
       'density' source 
FROM   dots.ExternalNaSequence etn 
WHERE  etn.na_sequence_id = $srcfeature_id 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Broad:bulkAttribute"  includeProjects="PlasmoDB">
     <sql>
<![CDATA[
SELECT sa.na_feature_id as feature_id, var.strain, var.allele,
       var.phenotype, var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var
WHERE sa.dataset = 'Broad SNPs'
  AND sa.na_sequence_id = $srcfeature_id
  AND sa.start_min <= $rend
  AND sa.start_min >= $base_start
  AND var.parent_id = sa.na_feature_id
ORDER BY var.strain
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:SangerPf:bulkAttribute" includeProjects="PlasmoDB">
     <sql>
<![CDATA[
SELECT sa.na_feature_id as feature_id, var.strain, var.allele,
       var.phenotype, var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var
WHERE sa.dataset = 'Sanger falciparum SNPs'
  AND sa.na_sequence_id = $srcfeature_id
  AND sa.start_min <= $rend
  AND sa.start_min >= $base_start
  AND var.parent_id = sa.na_feature_id
ORDER BY var.strain
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Winzeler:bulkAttribute" includeProjects="PlasmoDB">
     <sql>
<![CDATA[
SELECT sa.na_feature_id as feature_id, var.strain, var.allele,
       var.phenotype, var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var
WHERE sa.dataset = 'Winzeler Array - Plasmodium Genetic Variation'
  AND sa.na_sequence_id = $srcfeature_id
  AND sa.start_min <= $rend
  AND sa.start_min >= $base_start
  AND var.parent_id = sa.na_feature_id
ORDER BY var.strain
 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Combined:bulkAttribute" includeProjects="PlasmoDB">
     <sql>
<![CDATA[
SELECT sa.na_feature_id as feature_id, var.strain, var.allele,
       var.phenotype, var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var
WHERE sa.dataset = 'PlasmoDB combined SNPs'
  AND sa.na_sequence_id = $srcfeature_id
  AND sa.start_min <= $rend
  AND sa.start_min >= $base_start
  AND var.parent_id = sa.na_feature_id
ORDER BY var.strain
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Su:bulkAttribute" includeProjects="PlasmoDB">
     <sql>
<![CDATA[
SELECT sa.na_feature_id as feature_id, var.strain, var.allele,
       var.phenotype, var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var
WHERE sa.dataset = 'NIH SNPs'
  AND sa.na_sequence_id = $srcfeature_id
  AND sa.start_min <= $rend
  AND sa.start_min >= $base_start
  AND var.parent_id = sa.na_feature_id
ORDER BY var.strain
 
]]>
    </sql>
  </sqlQuery>
  
  
  <sqlQuery name="SNP:Widmer:bulkAttribute" includeProjects="CryptoDB">
     <sql>
<![CDATA[
SELECT sa.na_feature_id as feature_id, UPPER(var.strain) strain, var.allele,
       var.phenotype, var.product
FROM apidb.SnpAttributes sa,
     dots.SeqVariation var,
     apidb.featurelocation fl
WHERE fl.na_sequence_id = $srcfeature_id
  AND fl.start_min <= $rend
  AND fl.start_min >= $base_start
  AND  fl.na_feature_id = sa.na_feature_id
  AND var.parent_id = fl.na_feature_id
 ORDER BY var.strain
 
]]>
    </sql>
  </sqlQuery>
</module>
</DAS>

