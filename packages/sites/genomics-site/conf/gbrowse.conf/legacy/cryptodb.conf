[GENERAL]
description   = CryptoDB
db_adaptor    = DAS::GUS
db_args       = sub {
                 use ApiCommonWebsite::Model::ModelConfig;
                 use ApiCommonWebsite::Model::DbUtils;
                 my $c = new ApiCommonWebsite::Model::ModelConfig('CryptoDB');
                 my $resolvedDsn = ApiCommonWebsite::Model::DbUtils->resolveOracleDSN($c->appDb->dbiDsn);
                   { -sqlfile => $ENV{DOCUMENT_ROOT}.'/../conf/gbrowse.conf/cryptodb.xml',
                     -dsn     => $resolvedDsn,
                     -user    => $c->appDb->login,
                     -pass    => $c->appDb->password,
                   }
                 }
                 
search_instructions =

#plugins = AttributeHiliter 
plugins = BatchDumper Aligner  FastaDumper GFFDumper RestrictionAnnotator

# DAS reference server
das mapmaster = http://peach.ctegd.uga.edu/cgi-bin/das/cryptodb
das landmark = AAEE01000001

# 'region' or 'contig' would be other typical choices,
# remember that in chado, the ref class must be part of 
# SOFA (as must all feature types)
# reference class  = chromosome
# Note: reference class is very importment !!!
reference class  = contig

# for better display of comparative genome data
#postgrid    = 1
background  = 1
grid        = 0

# Web site configuration info
stylesheet  = /include/gbrowse.css
buttons     = /images/gbrowse/buttons

tmpimages   = /gbrowse/tmp
# using full url breaks under mod_perl.  Bio::Graphics::Browser calls lookup_uri()
# on it.
#tmpimages   = http://cryptodb.org/gbrowse/tmp /var/www/cryptodb.org/html/gbrowse/tmp 

balloon tips   = 1
#drag and drop = 1

# 24hrs/day * 360 days
image cachetime   = 8760

# Default glyph settings
glyph       = generic
height      = 8
bgcolor     = cyan
fgcolor     = cyan
label density = 250
bump density  = 2000

show sources = 0
default varying = 1 # tracks appear as defined below, not in alphabetical order

# where to link to when user clicks in detailed view
link        = sub{"/$CGI_OR_MOD/gbrowse/cryptodb"}

# what image widths to offer
image widths  = 640 800 1024 1280 1600
# default width of detailed view (pixels)
default width = 800 
default features = EST Gene BLASTX SyntenyGene

# max and default segment sizes for detailed view
max segment     = 2000000
default segment = 50000

# zoom levels
zoom levels    = 100 200 1000 2000 5000 10000 20000 30000 40000 60000 100000 200000 500000 1000000 2000000

# colors of the overview, detailed map and key
overview bgcolor = lightgrey
detailed bgcolor = lightgoldenrodyellow
key bgcolor      = beige

# examples to show in the introduction
examples = AAEE01000001:1-35000
           AAEE01000002:106357-116356
           AAEL01000026:7652-27651
           cgd6_780
           CMU_011540

# "automatic" classes to try when an unqualified identifier is given
automatic classes = gene

language = en

#empty_tracks = suppress
upload_tracks section = on

### HTML TO INSERT AT VARIOUS STRATEGIC LOCATIONS ###
# inside the <head></head> section
head = <link rel="stylesheet" href="/a/misc/style.css" type="text/css"><script type='text/javascript' src='/a/js/newwindow.js'></script>

# at the top...
header = sub { 
          my $header .= qq(<table><tr><td width=30%><a href='/'><img src="/images/oocyst_bg.gif" border='0'></a></td>);
          $header .= qq(<td align=center width=40%><b><font face="Arial,Helvetica" size=+3>Genome Browser</font></b></td>\n);
          $header .= qq(<td width=30%>&nbsp;</td></tr></table>);
          $header .= qq(<tr><td colspan=3><!--#include virtual='/include/toolbar.html' --></td></tr></table>);
		      return $header;
         }
footer = sub { return qq(<hr><!--#include virtual='/a/footer.jsp' -->); }

# Various places where you can insert your own HTML -- see configuration docs
html1 = <script type="text/javascript" src="/gbrowse/apiGBrowsePopups.js"></script>
html2 = 
html3 = 
html4 = 
html5 = 
html6 = <script language="JavaScript" type="text/javascript" src="/gbrowse/wz_tooltip.js"></script>

init_code = use vars qw($CGI_OR_MOD $CFG);
            #$CGI_OR_MOD =  'cgi-bin';
            $CGI_OR_MOD =  'mod-perl';
            use GBrowse::Configuration;
            $CFG = new GBrowse::Configuration;
            sub hover { 
              use HTML::Template; 
                    my ($name, $data) = @_; 
                    my $tmpl = HTML::Template->new(filename => $ENV{DOCUMENT_ROOT}.'/gbrowse/hover.tmpl'); 
                    $tmpl->param(DATA => [ map { { Key => $_->[0], Value => $_->[1], } } @$data ]); 
                          my $str = $tmpl->output; 
                          $str =~ s/'/\\'/g; 
                          $str =~ s/\s+$//; 
                          $str =~ s/\"/&quot;/g;
                          $str =~ s/\\n//; 
                          my $cmd = "this.T_STICKY=false;this.T_TITLE='$name'"; 
                          #return "$cmd;return escape('$str')"; 
              $cmd = qq{" onmouseover="$cmd;return escape('$str') };
              return $cmd;
                 }
 sub snpTitle {
  my $f = shift;
  my %rev = ( A => 'T', T => 'A', C => 'G', G => 'C' );
  my ($isCoding) = $f->get_tag_values("IsCoding"); 
  my ($posInCDS) = $f->get_tag_values("PositionInCDS"); 
  my ($posInProtein) = $f->get_tag_values("PositionInProtein"); 
  my ($refStrain) = $f->get_tag_values("RefStrain"); 
  my ($refAA) = $f->get_tag_values("RefAA"); 
  my ($gene) = $f->get_tag_values("Gene"); 
  my ($reversed) = $f->get_tag_values("Reversed"); 
  my ($refNA) = $f->get_tag_values("RefNA"); 
  $refNA = $rev{$refNA} if $reversed;
  my ($nonSyn) = $f->get_tag_values("NonSyn"); 
  my $variants = $f->bulkAttributes();
  my ($source_id) = $f->get_tag_values("SourceID"); 
  my $type = 'Non-Coding';
  my ($rend) = $f->get_tag_values("rend"); 
  my ($base_start) = $f->get_tag_values("base_start");
  my $zoom_level = $rend - $base_start; 
  if ($isCoding) {
     my $non = $nonSyn? 'non-' : '';
     $type = "Coding (${non}synonymous)";
  }
  if ($zoom_level <= 60000) {
    my @data;
    my $link = qq(<a href=/crypto/showRecord.do?name=SnpRecordClasses.SnpRecordClass&primary_key=$source_id>$source_id</a>);
    push @data, [ 'SNP'  => $link ];
    push @data, [ 'Location:'  => $f->start ];
    if ($gene) {
       push @data, [ 'Gene:'  => $gene ]; 
    }
    if ($isCoding) {
       $refAA = "&nbsp;&nbsp;&nbsp;&nbsp;AA=$refAA"; 
       push @data, [ 'Position in CDS:'  => $posInCDS ];
       push @data, [ 'Position in Protein:'  => $posInProtein ];
    }
    push @data, [ 'Type:'  => $type ];
    push @data, ["$refStrain (reference)"=>"NA=$refNA$refAA"];
    foreach my $variant (@$variants) {
      my $strain = $variant->{STRAIN};
      my $na = $variant->{ALLELE};
      $na = $rev{$na} if $reversed;
      my $aa = $variant->{PRODUCT};
      my $info = "NA=$na" . ($isCoding? "&nbsp;&nbsp;&nbsp;&nbsp;AA=$aa" : "");
      push @data, [ "$strain" => $info ];
    }
    return hover( "SNP", \@data) if $refStrain;
  } else {
    return $gene? "In gene $gene" : "Non-coding"; 
  }
 }
 sub snpTitleQuick {
   my $f = shift;
   my $webapp = 'cryptodb';
   my ($gene) = $f->get_tag_values("Gene"); 
   my ($isCoding) = $f->get_tag_values("IsCoding"); 
   my ($nonSyn) = $f->get_tag_values("NonSyn"); 
   my ($rend) = $f->get_tag_values("rend"); 
   my ($base_start) = $f->get_tag_values("base_start");
   my $zoom_level = $rend - $base_start; 
   if ($zoom_level <= 60000) {
     my ($params) = $f->get_tag_values("params");
     my $variants = $f->bulkAttributes();
     my @vars;
     foreach my $variant (@$variants) {
       push(@vars, "$variant->{STRAIN}:$variant->{ALLELE}:$variant->{PRODUCT}");
     }
     my $varsString = join('|', @vars);
     my $start = $f->start();
     return qq{" onmouseover="return escape(pst(this,'$params&$varsString&$start&$gene&$isCoding&$nonSyn&$webapp'))"};
   } else {
     return $gene? "In gene $gene" : "Intergenic"; 
   }
 }
 sub snpColor {
	     my $f = shift;
             my ($isCoding) = $f->get_tag_values("IsCoding");
             my $color = 'white';
             if ($isCoding eq 'yes') {
               my ($nonSyn) = $f->get_tag_values("NonSyn"); 
               $color = $nonSyn? 'blue' : 'lightblue'; 
             }
             return $color; 
          }
 sub snpHeight {
   my $f = shift;
   my ($rend) = $f->get_tag_values("rend"); 
   my ($base_start) = $f->get_tag_values("base_start");
   my $zoom_level = $rend - $base_start; 
   return $zoom_level <= 60000? 10 : 6;
 }
 sub synSpanTitle {
                 my $f = shift;
		 my $name = $f->name;
		 my $chr = $f->seq_id;
		 my $loc = $f->location->to_FTstring;
                 my $strand = $f->strand == 1? "no" : "yes";
		 my ($refStart) = $f->get_tag_values("RefStart");
		 my ($refEnd) = $f->get_tag_values("RefEnd");
		 my ($refLength) = $refEnd - $refStart;
		 my ($synStart) = $f->get_tag_values("SynStart");
		 my ($synEnd) = $f->get_tag_values("SynEnd");
		 my ($synLength) = $synEnd - $synStart;
		 my ($contigLength) = $f->get_tag_values("ContigLength");
		 my ($refContigLength) = $f->get_tag_values("RefContigLength");
		 my ($contigSourceId) = $f->get_tag_values("Contig");
		 my @data;
                 push @data, [ 'Syntenic Contig: ' => "$contigSourceId" ];
		 push @data, [ 'Ref location: ' => "$refStart&nbsp;-&nbsp;$refEnd ($refLength&nbsp;bp)" ];
		 push @data, [ 'Syn location: ' => "$synStart&nbsp;-&nbsp;$synEnd ($synLength&nbsp;bp)" ];
		 push @data, [ 'Reversed: ' => "$strand" ];
		 push @data, [ 'Total Syn Contig Length: ' => "$contigLength" ];
		 push @data, [ 'Total Ref Contig Length: ' => "$refContigLength" ];
		 hover("Synteny Span", \@data);
	       }
 sub synSpanLink {
                 my $f = shift;
		 my $name = $f->name;
                 return "/a/showRecord.do?name=SequenceRecordClasses.SequenceRecordClass&primary_key=$name"
	       }
 sub synGeneTitle {
                 my $f = shift;
		 my $name = $f->name;
		 my $chr = $f->seq_id;
		 my $loc = $f->location->to_FTstring;
		 my ($desc) = $f->get_tag_values("Note");
		 my ($taxon) = $f->get_tag_values("Taxon");
	   	 my ($isPseudo) = $f->get_tag_values("IsPseudo");
		 my ($contig) = $f->get_tag_values("Contig");
		 my ($soTerm) = $f->get_tag_values("SOTerm");
		 my ($start) = $f->get_tag_values("Start");
		 my ($end) = $f->get_tag_values("End");
	         $soTerm =~ s/\_/ /g;
	         $soTerm =~ s/\b(\w)/\U$1/g;
		 my @data;
		 push @data, [ 'Species:' => $taxon ];	
		 push @data, [ 'Name:'  => $name ];
		 push @data, [ 'Gene Type:' => ($isPseudo ? "Pseudogenic " : "") . $soTerm  ];
		 push @data, [ 'Description:' => $desc ];
		 push @data, [ 'Location:'  => "$contig: $start - $end" ];
		 hover("Syntenic Gene: $name", \@data);
	       }


# END init

#aggregators = 

postgrid     = sub { use DAS::Util::SynView;
                     return DAS::Util::SynView::postgrid(@_); }

### TRACK CONFIGURATION ####
# the remainder of the sections configure individual tracks

###################################
# Plugin configuration
###################################

[SNPs]
feature  = SNP:Widmer
category = 6.  Population Biology (show < 61k for details)
glyph    = diamond
key      = SNPs
bgcolor	= \&snpColor
fgcolor  = bgcolor
label density = 2
height = \&snpHeight
citation = SNPs from G. Widmer. See <a href="/cryptodb/showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Widmer_SNPs&title=Widmer%20SNPs">Data Sources</a> for details. <ul><li>Blue for non-synonymous SNPs.<li>Light blue for synonymous SNPs.  <li>Clear for non-coding SNPs.</ul>
title = sub{}
link = javascript:void(0)
link_target = \&snpTitleQuick


[WastlingMassSpecPeptides]
feature      = domain:WastlingMassSpecPeptides 
filter       = sub { $CFG->filter_to_depth( @_, 'WastlingMassSpecPeptides', 5) }
glyph        = segments
# -0 turns off transcript arrows at highlevel zoom
arrow_length = -0
font2color   = black
fgcolor      =  sub { my $f = shift;
                      my ($soterm) = $f->get_tag_values('SOTerm');
                      return ($soterm eq 'protein_coding') ? 'black' : 'grey';
               }
connector_color = grey
connector    = hat
bgcolor      = sub { my $f = shift;
                     my ($extdbname) = $f->parent->get_tag_values('ExtDbName');
                     ($extdbname =~ m/1d/i) && return 'mediumslateblue';
                     ($extdbname =~ m/mudpit soluble/i) && return 'black';
                     ($extdbname =~ m/mudpit insoluble/i) && return 'brown';
                     ($extdbname =~ m/2d/i) && return 'green';
                     return 'yellow';
                   }
height       = sub { my $f = shift;
                     my ($soterm) = $f->get_tag_values('SOTerm');
                     return ($soterm eq 'protein_coding') ? 7 : 5;
                   }
pad_bottom   = -1
description  = 0 
link	=  javascript:void(0)
title  = sub {}
#bump density = 200
#link_target density = 100; # custom attribute
link_target  = sub { $CFG->link_target_ms_peptides( @_ ) }
label 		 = 0
category  = 3. Protein Expression Evidence
key       = MS/MS Peptides (Wastling, et al.)
citation  =  Analysis by J.M.
             Wastling, S. Sanderson, D. Xia and A.Z. Siddiki. 
             Departments of Pre-Clinical Veterinary Science & Veterinary Pathology, University of Liverpool, 
             Crown Street, Liverpool, United Kingdom L69 7ZJ.


[LoweryMassSpecPeptides]
feature      = domain:LoweryMassSpecPeptides 
filter = sub { $CFG->filter_to_depth( @_, 'LoweryMassSpecPeptides', 5) }
glyph        =  segments
# -0 turns off transcript arrows at highlevel zoom
arrow_length = -0
font2color   = grey
fgcolor =  sub { my $f = shift;
                 my ($soterm) = $f->get_tag_values('SOTerm');
                 return ($soterm eq 'protein_coding') ? 'black' : 'black';
               }
connector_color = black
connector = hat
bgcolor      = sub { my $f = shift;
                     my ($extdbname) = $f->parent->get_tag_values('ExtDbName');
                     ($extdbname =~ m/Insoluble Excysted/i) && return 'maroon';
                     ($extdbname =~ m/Insoluble Non-excysted/i) && return 'darksalmon';
                     ($extdbname =~ m/Soluble Excysted and Non-excysted/i) && return 'lightseagreen';
                     return 'yellow';
                   }
height       = sub { my $f = shift;
                     my ($soterm) = $f->get_tag_values('SOTerm');
                     return ($soterm eq 'protein_coding') ? 7 : 5;
                   }
pad_bottom   = -1
description  = 0 
link	=  javascript:void(0)
title  = sub {}
#bump density = 100
link_target  = sub { $CFG->link_target_ms_peptides( @_ ) }
label 		 = 0
category  = 3. Protein Expression Evidence
key       = MS/MS Peptides (Snelling, et al.)
citation  =  Analysis by William J. Snelling<sup>1</sup>, Qishan Lin<sup>2</sup>, John E. Moore<sup>3</sup>, B. Cherie Millar<sup>3</sup>,
             Fabio Tosini<sup>4</sup>, Edoardo Pozio<sup>4</sup>, James S.G. Dooley<sup>1</sup>, and Colm J. Lowery<sup>1</sup><br>
             <sup>1</sup>Centre for Molecular Biosciences, School of Biomedical Sciences,
             University of Ulster, Cromore Road, Coleraine, County Londonderry, N.
             Ireland, BT52 1SA.
             <sup>2</sup>UAlbany Proteomics Facility, Centre for Functional Genomics, University of
             Albany, One Discovery Drive, Rensselaer, NY 12144.
             <sup>3</sup>Northern Ireland Public Health Laboratory, Department of Bacteriology,
             Belfast City Hospital, Belfast, N. Ireland, BT9 7AD.
             <sup>4</sup>Department of Infectious, Parasitic, and Immunomediated Diseases, Istituto
             Superiore di Sanit&#224;, Rome, Italy.<br>
             <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=17124246">
   		    Proteomics analysis and protein expression during sporozoite excystation of Cryptosporidium parvum (Coccidia, Apicomplexa).
		    Mol. Cell Proteomics 2007 Feb;6(2):346-55
		    </a>

[EinsteinMassSpecPeptides]
feature      = domain:EinsteinMassSpecPeptides
filter = sub { $CFG->filter_to_depth( @_, 'EinsteinMassSpecPeptides', 5) }
glyph        = segments
# -0 turns off transcript arrows at highlevel zoom
arrow_length = -0
font2color   = black
fgcolor =  sub { my $f = shift;
                 my ($soterm) = $f->get_tag_values('SOTerm');
                 return ($soterm eq 'protein_coding') ? 'black' : 'grey';
               }
connector_color = grey
connector = hat
bgcolor      = sub { my $f = shift;
                     my ($extdbname) = $f->parent->get_tag_values('ExtDbName');
                     ($extdbname =~ m/14Aug2006_1D_gel/i) && return 'darkkhaki';
                     ($extdbname =~ m/16May2006_1D_gel/i) && return 'peru';
                     ($extdbname =~ m/24Jun2006_1D_gel/i) && return 'rosybrown';
                     return 'yellow';
                   }
height       = sub { my $f = shift;
                     my ($soterm) = $f->get_tag_values('SOTerm');
                     return ($soterm eq 'protein_coding') ? 7 : 5;
                   }
pad_bottom   = -1
description  = 0 
link	=  javascript:void(0)
title  = sub {}
#bump density = 100
link_target  = sub { $CFG->link_target_ms_peptides( @_ ) }
label 		 = 0
category  = 3. Protein Expression Evidence
key       = MS/MS Peptides (Einstein)
citation  =  Joseph Dybas, Dmitry Rykunov, Carlos Madrid, Edward Nieves, Fa-Yun Che, Hui Xiao, Kami Kim, Louis Weiss, Ruth Hogue Angeletti, Andr&#225;s Fiser (<a href="http://toro.aecom.yu.edu/biodefense/">Einstein Biodefense Proteomics Research Center</a>)

[FerrariMassSpecPeptides]
feature      = domain:FerrariMassSpecPeptides
filter = sub { $CFG->filter_to_depth( @_, 'FerrariMassSpecPeptides', 5) }
glyph        = segments
# -0 turns off transcript arrows at highlevel zoom
arrow_length = -0
font2color   = black
fgcolor =  sub { my $f = shift;
                 my ($soterm) = $f->get_tag_values('SOTerm');
                 return ($soterm eq 'protein_coding') ? 'black' : 'grey';
               }
connector_color = grey
connector = hat
bgcolor      = sub { my $f = shift;
                     my ($extdbname) = $f->parent->get_tag_values('ExtDbName');
                     ($extdbname =~ m/Oocyst_walls/i) && return 'sandybrown';
                     ($extdbname =~ m/Sporozoites_merged/i) && return 'tan';
                     ($extdbname =~ m/intact_oocysts_merged/i) && return 'khaki';
                     return 'yellow';
                   }
height       = sub { my $f = shift;
                     my ($soterm) = $f->get_tag_values('SOTerm');
                     return ($soterm eq 'protein_coding') ? 7 : 5;
                   }
pad_bottom   = -1
description  = 0 
link	=  javascript:void(0)
title  = sub {}
#bump density = 100
link_target  = sub { $CFG->link_target_ms_peptides( @_ ) }
label 		 = 0
category  = 3. Protein Expression Evidence
key       = MS/MS Peptides (Ferrari)
citation  =  Data provided by Belinda Ferrari and Quach Truong at the Department of Biological Sciences, Macquarie University, Sydney, Australia. 

[Gene]
feature      = gene:Genbank
category     = 1. Gene Models 
glyph        = processed_transcript
bgcolor      = sub {
                 my $f = shift;
                 $f->strand == +1 ? "blue" : "red";
               }
font2color   = darkgrey
height       = 8
# we set title = 1 and use link_target instead as a trick to force gbrowse to exlude the alt= href text
title = 1
link_target        = sub {
   my $f = shift;
   my $sourceId = $f->name;
   my $chr = $f->seq_id;
   my $loc = $f->location->to_FTstring;
   my ($soTerm) = $f->get_tag_values("soTerm");
   my ($product) = $f->get_tag_values("product");
   my ($taxon) = $f->get_tag_values("taxon");
   my ($isPseudo) = $f->get_tag_values("isPseudo");
   $soTerm =~ s/\_/ /g;
   $soTerm =~ s/\b(\w)/\U$1/g;
   return qq{" onmouseover="return escape(gene_title(this,'ToxoDB','$sourceId','$chr','$loc','$soTerm','$product','$taxon','$isPseudo'))"};
  }
link         = /cryptodb/showRecord.do?name=GeneRecordClasses.GeneRecordClass&id=$name
description  = 0 
bump density = 100
label density = 100
label 		 = 1
preset     = Annotation
das category = transcription
key          = Annotated Genes

[BLASTX]
feature      = match:WU_BLASTX
glyph        = graded_segments
height       = 6 
label		     = 0
stranded     = 1
bump density = 400
bump_limit  = 10
link         = http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val=$name
link_target 		 = sub {
				 	my $f = shift; 
					my $name = $f->name; 
					my ($desc) = $f->get_tag_values("description");
					my ($evalue) = $f->get_tag_values('Expect');
					my $score = $f->score; 
					my ($tstart) = $f->get_tag_values('TStart');
					my ($tstop )= $f->get_tag_values('TStop');
					my $link = qq(<a href=http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val=$name>$name</a>); 
					my @data; 
					push @data, [ 'Name:' => $name ]; 
					push @data, [ 'E-value:' => $evalue ]; 
					push @data, [ 'Score:' => $score ]; 
					push @data, [ 'Location:' => "$tstart - $tstop"]; 
					push @data, [ 'Function:' => $desc ]; 
					hover( "$name", \@data); 
				}
bgcolor		 = sub { 
					my $f = shift; 
					my $strand = $f->strand; 
					if($strand eq '+1') { 
						return 'navy'; 
					} else { 
						return 'maroon';
				    }
				}
category  = 1. Gene Models
key          = GenBank Non-Redundant Protein (NRDB)
citation     = C. parvum and C. hominis vs NRDB:  <br /> BLASTX blastx version: BLASTX 2.0MP-WashU. <br /><br /> Parameters used: matrix=BLOSUM62 V=100 B=1000000 -hspmax=1000000 W=4 T=18 -gi E=1e-3 -wordmask=seg -hspsepQmax=50000 -span1 -topcomboN=1. <br /><br /> In house scripts where used to post-process the results by E-value, match length and overlap for display top 5 matches in GBrowse.

[ORF]
feature      = alignment:ORF
category     = 5. Nucleotide Analysis
glyph        = cds
height       = 12
key          = ORF >/= 150 nucleotides (50 amino acids)
stranded     = 1
bgcolor      = sub {
        my ($f, undef, undef, undef, $glyph) = @_;
        my $flip = $glyph->{flip};
        $f->strand == ($flip ? -1 : 1) ? "navy" : "maroon";
    }
fgcolor      = black
description  = 0
label       = 0
bump_limit  = 10
title        = sub {
        my $f = shift;
        my $name = $f->name;
                    my $start  = $f->start;
                    my $stop   = $f->stop;
        my ($length) = $f->get_tag_values("Length");
                    my @data;
                    push @data, [ 'Name:'   => $name ];
                    push @data, [ 'Start:'  => $start ];
                    push @data, [ 'Stop:'   => $stop ];
                    push @data, [ 'Length:' => $length . ' aa' ];
                    return hover( 'ORFs >= 150 nt', \@data);
    }
citation     = ORFs greater than 150nt, generated by CryptoDB. 

[EST]
feature      = alignment:BLAT
glyph        = segments
bgcolor      = sub { my ($f, undef, undef, undef, $glyph) = @_;
                     my $flip = $glyph->{flip};
                     $f->strand == ($flip ? -1 : 1) ? "navy" : "maroon";
                }
description  = 0
height       = 8
title        = sub { my $f = shift;
                 my $name  = $f->name; 
                 my $start = $f->start;
                 my $stop  = $f->stop;
                 my @data; 
                 my ($percent_identity) = $f->get_tag_values("PercentIdentity");
                 my ($library) = $f->get_tag_values("Library");
                 push @data, [ 'Name:' => $name ]; 
                 push @data, [ 'Start:'  => $start ];
                 push @data, [ 'Stop:'   => $stop ];
                 push @data, [ 'Percent Identity:' => $percent_identity ]; 
                 push @data, [ 'Library:' => $library ]; 
                 hover("dbEST Alignment: $name", \@data);
               }
link         = "/cryptodb/showRecord.do?name=EstRecordClasses.EstRecordClass&id=$name";
das category = similarity
category  = 4. Transcript Expression Evidence
preset    = Annotation
key 		 = EST Alignments

[Cluster]
feature      = clusteralignment:EstCluster
glyph        = segments
bgcolor      = sub { my ($f, undef, undef, undef, $glyph) = @_;
                     my $flip = $glyph->{flip};
                     $f->strand == ($flip ? -1 : 1) ? "navy" : "maroon";
                }
# description must be 0 if using get_tag_values below
description  = 0
height       = 8
title        = sub { my $f = shift;
                     my $name  = $f->name; 
                     my $start = $f->start;
                     my $stop  = $f->stop;
                     my @data; 
                     my ($percent_identity) = $f->get_tag_values("PercentIdentity");
                     my ($count) = $f->get_tag_values("Count");
                     push @data, [ 'Name:' => $name ]; 
                     push @data, [ 'Start:'  => $start ];
                     push @data, [ 'Stop:'   => $stop ];
                     push @data, [ 'Percent Identity:' => $percent_identity ]; 
                     push @data, [ 'Count of ESTs:' => $count ]; 
                     hover("DoTS EST Assemblies: $name", \@data);
               }
link        = sub { my $f = shift;
                    my $name = $f->name;
                    my $link = "/cryptodb/showRecord.do?name=AssemblyRecordClasses.AssemblyRecordClass&project_id=&primary_key=$name";
                    return $link;
               }
das category = similarity
category  = 4. Transcript Expression Evidence
key 		 = EST Clusters

[LowComplexity]
feature      = lowcomplexity:dust
category     = 5. Nucleotide Analysis
glyph        = segments
bgcolor      = grey
height       = 6
description  = 0
label        = 0
link         = 
key          = Low Complexity Regions
citation     = Regions of low sequence complexity, as defined by the
               <code>dust</code> algorithm

[TandemRepeat]
feature      = TandemRepeat:TRF
category     = 5. Nucleotide Analysis
glyph        = segments
bgcolor      = darkgrey
height       = 6
description  = 0
label        = 0
link         = 
key          = Tandem Repeats
citation     = Regions of tandem repeats, as defined by the
               <code>Tandem Repeats Finder</code> program by Gary Benson

[Frames]
feature      = gene:Genbank
category     = 5. Nucleotide Analysis
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
height       = 20
link		 = 
label 		 = 
description  = 0
key          = Frame Usage

[TranslationF]
glyph        = translation
category     = 5. Nucleotide Analysis
global feature = 1
frame0       = cadetblue
frame1       = blue
frame2       = darkblue
height       = 40
fgcolor      = purple
strand       = +1
translation  = 3frame
link 	     =
das category = translation
key          = 3-frame translation (forward) 
citation     = It draws three frame conceptutal translations. At low magnifications (zoomed way out), this track draws littel symbols indicating where start and stop codons are. At high magnifications, the actual amino acid sequence comes into view. <br /><br /> Frame +1: cadetblue <br />Frame +2: blue <br />Frame +3: darkblue

[DNA/GC Content]
glyph		 = dna
category     = 5. Nucleotide Analysis
global feature = 1
height		 = 40
do_gc        = 1
link 	     =
fgcolor		 = red
axis_color   = blue
citation     = It displays a GC content graph of the reference sequence at low magnifications and the DNA sequence itself at higher magnifications.

[TranslationR]
glyph        = translation
category     = 5. Nucleotide Analysis
global feature = 1
frame0       = darkred
frame1       = red
frame2       = crimson
height       = 40
fgcolor      = blue
strand       = -1
link 	     =
translation  = 3frame
das category = translation
key          = 3-frame translation (reverse)
citation     = It draws three frame conceptutal translations. At low magnifications (zoomed way out), this track draws littel symbols indicating where start and stop codons are. At high magnifications, the actual amino acid sequence comes into view. <br /><br />Frame -1: darkred<br />Frame -2: red<br />Frame -3: crimson<br />

[IsolateCDC]
feature      = match:IsolateCDC
glyph        = segments
bgcolor		   = sub { my $f = shift;
					           my $strand = $f->strand;
						  			 $f->strand > 0 ? "lightblue" : "red";
					     }
fgcolor		   = sub { my $f = shift;
					           my $strand = $f->strand;
						  			 $f->strand > 0 ? "blue" : "darkred";
					     }
bump_limit  = 20
font2color   = grey
stranded     = 1
height       = 6
description  = 0
label        = 0
link_target        = sub { my $f = shift;
					my $name = $f->name;
					my ($evalue) = $f->get_tag_values('Expect');
					my ($qstart) = $f->get_tag_values('QStart');
					my ($qend) = $f->get_tag_values('QStop');
					my ($desc) = $f->get_tag_values('Note');
					my ($matchlen) = $f->get_tag_values('MatchLen');
					my @data;
					push @data, [ 'Name:'   => $name ];
					push @data, [ 'Score:'  => $f->score ];
					push @data, [ 'Expect:' => $evalue ];
					push @data, [ 'Match:'  => "$matchlen nt" ];
					push @data, [ 'Note:'   => $desc ];
					hover( "$name", \@data);
				}
link		 = sub { my $f = shift; 
					 my $name = $f->name; 
					 return "showRecord.do?name=IsolateRecordClasses.IsolateRecordClass&project_id=CryptoDB&primary_key=$name";
			  }
citation     = Cryptosporidium isolates data
category     = 2. Epidemiology
key          = Isolate Sequences Aligned to C. muris, C. hominis and C. parvum Genomes


[Annotation:overview]
feature      = annotation:density
glyph        = xyplot
graph_type   = boxes
bump density = 1
scale        = right
#scale       = both
bgcolor      = lightslategray
fgcolor      = blue
height       = 60
min_score    = 0
label        = 0
key          = Gene Density
citation     = See <a href="#Annotation">below</a>.

[SyntenySpanHominis]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Cryptosporidium hominis/;
                }
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
tkcolor      = azure
height       = 8 
title = 1
link_target        = \&synSpanTitle
link         = \&synSpanLink
key          = C. hominis Syntenic Contigs
citation     = Stretches of likely chromosomal synteny to <i>C. hominis</i>.

[SyntenyHominis]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Cryptosporidium hominis/;
                }
description  = 0
label        = 0
font2color   = darkgrey
tkcolor      = azure
bgcolor      = sub {
                 my $f = shift;
		 $f->strand == +1 ? "blue" : "red";
               }
height       = 8
title = 1
link_target = \&synGeneTitle
link        = /gene/$name
key         = C. hominis Syntenic Genes
citation    = Genes found within syntenic spans.

[SyntenySpanParvum]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 my ($contig) = $f->get_tag_values("Contig");
                 $taxon eq qq /Cryptosporidium parvum Iowa II/ && $contig ne qq /BX526834/;
                }
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
tkcolor      = azure
height       = 8 
title = 1
link_target        = \&synSpanTitle
link         = \&synSpanLink
key          = C. parvum Syntenic Contigs
citation     = Stretches of likely chromosomal synteny to <i>C. Parvum</i>.

[SyntenyParvum]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 my ($contig) = $f->get_tag_values("Contig");
                 $taxon eq qq /Cryptosporidium parvum Iowa II/ && $contig ne qq /BX526834/;
                }
description  = 0
label        = 0
font2color   = darkgrey
tkcolor      = azure
bgcolor      = sub {
                 my $f = shift;
		 $f->strand == +1 ? "blue" : "red";
               }
height       = 8
title = 1
link_target = \&synGeneTitle
link        = /gene/$name
key         = C. parvum Syntenic Genes
citation    = Genes found within syntenic spans.


[SyntenySpanParvumChr6]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 my ($contig) = $f->get_tag_values("Contig");
                 $taxon eq qq /Cryptosporidium parvum/ && $contig eq qq /BX526834/;
                }
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
tkcolor      = azure
height       = 8 
title = 1
link_target        = \&synSpanTitle
link         = \&synSpanLink
key          = C. parvum Chromosome 6 Syntenic Contigs
citation     = Stretches of likely chromosomal synteny to <i>C. Parvum Chromosome 6</i>.

[SyntenyParvumChr6]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 my ($contig) = $f->get_tag_values("Contig");
                 $taxon eq qq /Cryptosporidium parvum/ && $contig eq qq /BX526834/;
                }
description  = 0
label        = 0
font2color   = darkgrey
tkcolor      = azure
bgcolor      = sub {
                 my $f = shift;
		             $f->strand == +1 ? "blue" : "red";
               }
height       = 8 
title        = 1
link_target  = \&synGeneTitle
link         = /gene/$name
key          = C. parvum Chromosome 6 Independently Annotated Genes
citation     = Genes found within syntenic spans.


[SyntenySpanMuris]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Cryptosporidium muris/;
                }
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
tkcolor      = azure
height       = 8 
title = 1
link_target        = \&synSpanTitle
link         = \&synSpanLink
key          = C. muris Syntenic Contigs
citation     = Stretches of likely chromosomal synteny to <i>C. Muris</i>.


[SyntenyMuris]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 my ($contig) = $f->get_tag_values("Contig");
                 $taxon eq qq /Cryptosporidium muris/;
                }
description  = 0
label        = 0
font2color   = darkgrey
tkcolor      = azure
bgcolor      = sub {
                 my $f = shift;
		 $f->strand == +1 ? "blue" : "red";
               }
height       = 8
title = 1
link_target = \&synGeneTitle
link        = /gene/$name
key         = C. muris Syntenic Genes
citation    = Genes found within syntenic spans.


[AnnotationDensity]
feature      = annotation:density
category     = 5. Nucleotide Analysis
glyph        = xyplot
graph_type   = boxes
bump density = 1
scale        = right
#scale       = both
bgcolor      = lightslategray
fgcolor      = blue
height       = 60
min_score    = 0
label        = 0
key          = Gene Density
citation     = See <a href="#Annotation">below</a>.



