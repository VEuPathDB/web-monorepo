[GENERAL]
header        = <table><tr><td width="160" valign="middle"><a href="/"><img border="0" src="/plasmo/images/plasmodb_logo.gif"></a></td><td align="center" valign="middle"><font size="+4" color="darkblue">Genome Browser</font></td></tr><tr><td><a href="/">>>PlasmoDB Home</a></td></tr></table>
description   = Genome Sequence
db_adaptor    = DAS::GUS
db_args       = sub {
                 use ApiCommonWebsite::Model::ModelConfig;
                 use ApiCommonWebsite::Model::DbUtils;
                 my $c = new ApiCommonWebsite::Model::ModelConfig('PlasmoDB');
                 my $resolvedDsn = ApiCommonWebsite::Model::DbUtils->resolveOracleDSN($c->appDb->dbiDsn);
                   { -sqlfile => $ENV{DOCUMENT_ROOT}.'/../conf/gbrowse.conf/plasmodb.xml',
                     -dsn     => $resolvedDsn,
                     -user    => $c->appDb->login,
                     -pass    => $c->appDb->password,
                   }
                 }

#plugins = AttributeHiliter 
plugins = Aligner RestrictionAnnotator FastaDumper GFFDumper BatchDumper

# 'region' or 'contig' would be other typical choices,
reference class  = chromosome

# Web site configuration info
stylesheet  = /include/gbrowse.css
buttons     = /gbrowse/images/buttons
js          = /gbrowse/js

# using full url breaks under mod_perl.  Bio::Graphics::Browser calls lookup_uri()
# on it. That is, don't do this:
#tmpimages   = http://plasmodb.org/gbrowse/tmp /var/www/plasmodb.org/html/gbrowse/tmp 
tmpimages   = /gbrowse/tmp

balloon tips   = 1
#drag and drop = 1

# 24hrs/day * 360 days
image cachetime   = 8760

# Default glyph settings
glyph       = generic
height      = 8
bgcolor     = cyan
fgcolor     = cyan
label density = 25
bump density  = 2000

show sources = 0
default varying = 1 # tracks appear as defined below, not in alphabetical order

# where to link to when user clicks in detailed view
link        = sub{"/$CGI_OR_MOD/gbrowse/plasmodb"}

# what image widths to offer
image widths  = 640 800 1024 1280

truecolor = 1

# default width of detailed view (pixels)
default width = 800
default features = AnnotatedGenes GeneDensity:overview

# max and default segment sizes for detailed view
max segment     = 10000000
default segment = 50000

# zoom levels
zoom levels    = 100 200 1000 2000 5000 10000 20000 30000 40000 60000 100000 200000 500000 1000000 2000000 4000000

# colors of the overview, detailed map and key
overview bgcolor = lavenderblush
detailed bgcolor = thistle
key bgcolor      = mistyrose

# examples to show in the introduction
examples = MAL11:20000-65000
       MAL12:106357-116356
       ctg_6663:1-50000
       Kinase
       "Transmembrane Protein"

# "automatic" classes to try when an unqualified identifier is given
automatic classes = gene

language = en

# empty_tracks = suppress

# a footer
footer = sub { return qq(<hr><!--#include virtual='/a/footer.jsp' -->); }

# Various places where you can insert your own HTML -- see configuration docs
html1 = <script type="text/javascript" src="/gbrowse/apiGBrowsePopups.js"></script>
html2 = <script type='text/javascript' src='/a/js/newwindow.js'></script>
html3 = 
html4 = 
html5 = 
html6 = <script type="text/javascript" src="/gbrowse/wz_tooltip.js"></script>

init_code = use vars qw($CGI_OR_MOD);
          $CGI_OR_MOD = 'cgi-bin';
          #$CGI_OR_MOD  = 'mod-perl';
          # group writable tmp files
          umask 0002; 
          sub hover {
          use HTML::Template;
          my ($name, $data) = @_;
          my $tmpl = HTML::Template->new(filename => $ENV{DOCUMENT_ROOT}.'/gbrowse/hover.tmpl');
          $tmpl->param(DATA => [ map { { @$_ > 1 ? (KEY => $_->[0], VALUE => $_->[1]) : (SINGLE => $_->[0]) } } @$data ]);
          my $str = $tmpl->output;
          $str =~ s/'/\\'/g;
          $str =~ s/\"/&quot;/g;
          $str =~ s/\s+$//;
          my $cmd = "this.T_TITLE='$name'";
          $cmd = qq{" onMouseOver="$cmd;return escape('$str')};
          return $cmd;
        }        
 sub snpTitle {
  my $f = shift;
  my %rev = ( A => 'T', T => 'A', C => 'G', G => 'C' );
  my ($isCoding) = $f->get_tag_values("IsCoding"); 
  my ($posInCDS) = $f->get_tag_values("PositionInCDS"); 
  my ($posInProtein) = $f->get_tag_values("PositionInProtein"); 
  my ($refStrain) = $f->get_tag_values("RefStrain"); 
  my ($refAA) = $f->get_tag_values("RefAA"); 
  my ($gene) = $f->get_tag_values("Gene"); 
  my ($reversed) = $f->get_tag_values("Reversed"); 
  my ($refNA) = $f->get_tag_values("RefNA"); 
  $refNA = $rev{$refNA} if $reversed;
  my ($nonSyn) = $f->get_tag_values("NonSyn"); 
  my $variants = $f->bulkAttributes();
  my ($source_id) = $f->get_tag_values("SourceID"); 
  my $type = 'Non-Coding';
  my ($rend) = $f->get_tag_values("rend"); 
  my ($base_start) = $f->get_tag_values("base_start");
  my $zoom_level = $rend - $base_start; 
  if ($isCoding) {
     my $non = $nonSyn? 'non-' : '';
     $type = "Coding (${non}synonymous)";
  }
  if ($zoom_level <= 60000) {
    my @data;
    my $link = qq(<a href=/plasmo/showRecord.do?name=SnpRecordClasses.SnpRecordClass&primary_key=$source_id>$source_id</a>);
    push @data, [ 'SNP'  => $link ];
    push @data, [ 'Location:'  => $f->start ];
    if ($gene) {
       push @data, [ 'Gene:'  => $gene ]; 
    }
    if ($isCoding) {
       $refAA = "&nbsp;&nbsp;&nbsp;&nbsp;AA=$refAA"; 
       push @data, [ 'Position in CDS:'  => $posInCDS ];
       push @data, [ 'Position in Protein:'  => $posInProtein ];
    }
    push @data, [ 'Type:'  => $type ];
    push @data, ["$refStrain (reference)"=>"NA=$refNA$refAA"];
    foreach my $variant (@$variants) {
      my $strain = $variant->{STRAIN};
      my $na = $variant->{ALLELE};
      $na = $rev{$na} if $reversed;
      my $aa = $variant->{PRODUCT};
      my $info = "NA=$na" . ($isCoding? "&nbsp;&nbsp;&nbsp;&nbsp;AA=$aa" : "");
      push @data, [ "$strain" => $info ];
    }
    return hover( "SNP", \@data) if $refStrain;
  } else {
    return $gene? "In gene $gene" : "Non-coding"; 
  }
 }
 sub snpTitleQuick {
   my $f = shift;
   my $webapp = 'plasmo';
   my ($gene) = $f->get_tag_values("Gene"); 
   my ($isCoding) = $f->get_tag_values("IsCoding"); 
   my ($nonSyn) = $f->get_tag_values("NonSyn"); 
   my ($rend) = $f->get_tag_values("rend"); 
   my ($base_start) = $f->get_tag_values("base_start");
   my $zoom_level = $rend - $base_start; 
   if ($zoom_level <= 60000) {
     my ($params) = $f->get_tag_values("params");
     my $variants = $f->bulkAttributes();
     my @vars;
     foreach my $variant (@$variants) {
       push(@vars, "$variant->{STRAIN}:$variant->{ALLELE}:$variant->{PRODUCT}");
     }
     my $varsString = join('|', @vars);
     my $start = $f->start();
     return qq{" onmouseover="return escape(pst(this,'$params&$varsString&$start&$gene&$isCoding&$nonSyn&$webapp'))"};
   } else {
     return $gene? "In gene $gene" : "Intergenic"; 
   }
 }
 sub chipTitleQuick {
   my $f = shift;
   my @data;
   my $name = $f->name;
   my ($country) = $f->get_tag_values("Country"); 
   my ($allele) = $f->get_tag_values("Allele"); 
   my ($strain) = $f->get_tag_values("Strain"); 
   my ($snpid) = $f->get_tag_values("SnpId"); 
   my $link = qq(<a href="/plasmo/showRecord.do?name=SnpRecordClasses.SnpRecordClass&primary_key=$snpid&project_id=PlasmoDB">$snpid</a>);
   push @data, [ 'Name:'  => $name ];
   push @data, [ 'Strain:'  => $strain ];
   push @data, [ 'Country:'  => $country ];
   push @data, [ 'Allele:'  => $allele ];
   push @data, [ 'SNP Id:'  => $link ];
   return hover( "3k Chip", \@data); 
 }
 sub snpColor {
       my $f = shift;
             my ($isCoding) = $f->get_tag_values("IsCoding"); 
             my ($hasIsolate) = $f->get_tag_values("HasIsolate"); 
             my $color = 'white';
             my ($nonSyn) = $f->get_tag_values("NonSyn"); 
             if ($isCoding eq 'yes') {
               $color = $nonSyn? 'blue' : 'lightblue'; 
             }
             if ($hasIsolate eq '1') {
               $color = $nonSyn? 'darkred' : 'lightred'; 
             }
             return $color; 
          }
 sub snpHeight {
   my $f = shift;
   my ($rend) = $f->get_tag_values("rend"); 
   my ($base_start) = $f->get_tag_values("base_start");
   my $zoom_level = $rend - $base_start; 
   return $zoom_level <= 60000? 10 : 6;
 }
 sub synSpanTitle {
                 my $f = shift;
     my $name = $f->name;
     my $chr = $f->seq_id;
     my $loc = $f->location->to_FTstring;
                 my $strand = $f->strand == 1? "no" : "yes";
     my ($refStart) = $f->get_tag_values("RefStart");
     my ($refEnd) = $f->get_tag_values("RefEnd");
     my ($refLength) = $refEnd - $refStart;
     my ($synStart) = $f->get_tag_values("SynStart");
     my ($synEnd) = $f->get_tag_values("SynEnd");
     my ($synLength) = $synEnd - $synStart;
     my ($contigLength) = $f->get_tag_values("ContigLength");
     my ($refContigLength) = $f->get_tag_values("RefContigLength");
     my ($contigSourceId) = $f->get_tag_values("Contig");
     my ($chromosome) = $f->get_tag_values("Chromosome");
     my @data;
     push @data, [ 'Rodent Chromsome: '=> "$chromosome" ] if ($chromosome);
                 push @data, [ 'Syntenic Contig: ' => "$contigSourceId" ];
     push @data, [ 'Ref location: ' => "$refStart&nbsp;-&nbsp;$refEnd ($refLength&nbsp;bp)" ];
     push @data, [ 'Syn location: ' => "$synStart&nbsp;-&nbsp;$synEnd ($synLength&nbsp;bp)" ];
     push @data, [ 'Reversed: ' => "$strand" ];
     push @data, [ 'Total Syn Contig Length: ' => "$contigLength" ];
     push @data, [ 'Total Ref Contig Length: ' => "$refContigLength" ];
     hover("Synteny Span", \@data);
         }
 sub synSpanLink {
                 my $f = shift;
     my $name = $f->name;
     my ($start) = $f->get_tag_values("SynStart");
     my ($end) = $f->get_tag_values("SynEnd");
                 "/$CGI_OR_MOD/gbrowse/plasmodb/?name=$name:$start..$end";
         }
 sub synGeneTitle{
                 my $f = shift;
     my $name = $f->name;
     my $chr = $f->seq_id;
     my $loc = $f->location->to_FTstring;
     my ($desc) = $f->get_tag_values("Note");
     my ($taxon) = $f->get_tag_values("Taxon");
        my ($isPseudo) = $f->get_tag_values("IsPseudo");
     my ($contig) = $f->get_tag_values("Contig");
     my ($soTerm) = $f->get_tag_values("SOTerm");
     my ($start) = $f->get_tag_values("Start");
     my ($end) = $f->get_tag_values("End");
           $soTerm =~ s/\_/ /g;
           $soTerm =~ s/\b(\w)/\U$1/g;
     my @data;
     push @data, [ 'Species:' => $taxon ];  
     push @data, [ 'Name:'  => $name ];
     push @data, [ 'Gene Type:' => ($isPseudo ? "Pseudogenic " : "") . $soTerm  ];
     push @data, [ 'Description:' => $desc ];
     push @data, [ 'Location:'  => "$contig: $start - $end" ];
     hover("Syntenic Gene: $name", \@data);
         }

postgrid = sub { use DAS::Util::SynView; 
                 return DAS::Util::SynView::postgrid(@_);
           } 

### TRACK CONFIGURATION ####
# the remainder of the sections configure individual tracks

###################################
# Plugin configuration
###################################

[GeneDensity:overview]
category     = Nucleotide Analysis
feature      = annotation:density
glyph        = xyplot
graph_type   = boxes
bump density = 1
scale        = right
#scale       = both
bgcolor      = lightslategray
fgcolor      = bgcolor
height       = 60
min_score    = 0
label        = 0
key          = Chr. Gene Density
citation     = Density plot of annotated genes accross an entire chromosome. This was caluclated by counting the number of genes in 50,000 base pair (50Kb) intervals.  So each bar represents the number of genes (y axis = number of genes) in that 50Kb region of the chromosome.


[AnnotatedGenes]
feature      = gene:annotation
category     = 1. Gene Models
preset       = ESTsGenesAndSynteny
#preset       = AnnotatedGenes
glyph        = processed_transcript
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "blue" : "red";
               }
font2color   = darkgrey
# font2color   = sub {
#                  my $f = shift;
#                  $f->strand == +1 ? "navy" : "maroon";
#                }
height       = 10
# we set title = 1 and use link_target instead as a trick to force gbrowse to exlude the alt= href text
title = 1
link_target        = sub {
   my $f = shift;
   my $sourceId = $f->name;
   my $chr = $f->seq_id;
   my $loc = $f->location->to_FTstring;
   my ($soTerm) = $f->get_tag_values("soTerm");
   my ($product) = $f->get_tag_values("product");
   my ($taxon) = $f->get_tag_values("taxon");
   my ($isPseudo) = $f->get_tag_values("isPseudo");
   $soTerm =~ s/\_/ /g;
   $soTerm =~ s/\b(\w)/\U$1/g;
   return qq{" onmouseover="return escape(gene_title(this,'PlasmoDB','$sourceId','$chr','$loc','$soTerm','$product','$taxon','$isPseudo'))"};
  }
description  = 1
label        = 1
link         = /gene/$name
key          = Annotated Genes 
citation     = Structural and functional gene annotation provided by the
               sequencing centers.

[WorkshopAnnotatedGenes]
feature      = gene:newannotation
category     = 1. Gene Models
glyph        = processed_transcript
tkcolor       = #98FB98
bgcolor      = sub {
                 my $f = shift;
        $f->strand == +1 ? "blue" : "red";
               }
font2color   = darkgrey
height       = 10
title = 1
link_target        = sub {
   my $f = shift;
   my $sourceId = $f->name;
   my $chr = $f->seq_id;
   my $loc = $f->location->to_FTstring;
   my ($soTerm) = $f->get_tag_values("soTerm");
   my ($product) = $f->get_tag_values("product");
   my ($taxon) = $f->get_tag_values("taxon");
   my ($isPseudo) = $f->get_tag_values("isPseudo");
   $soTerm =~ s/\_/ /g;
   $soTerm =~ s/\b(\w)/\U$1/g;
   return qq{" onmouseover="return escape(gene_title(this,'PlasmoDB','$sourceId','$chr','$loc','$soTerm','$product','$taxon','$isPseudo'))"};
  }
link =  sub {
        my $f = shift;
        my $sourceId = $f->name();
        $sourceId =~ s/(_changed)|(_reviewed)|(_notrev)$//;
        "http://developer.genedb.org/NamedFeature?organism=Plasmodium&name=$sourceId";
       }
description  = 1
label        = 1
key          = Reannotation work in progress (P. falciparum only) 
citation     = Structural and functional gene annotation provided by the <i>P. falciparum</i> workshop conducted at Sanger Institute.

[EviganGeneModels]
feature       = Evigan:annotation
category     = 1. Gene Models
glyph        = processed_transcript
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "lightblue" : "pink";
               }
font2color   = darkgrey
height       = 8
title = 1
link_target        = sub {
   my $f = shift;
   my $sourceId = $f->name;
   my $chr = $f->seq_id;
   my $loc = $f->location->to_FTstring;
   my ($soTerm) = $f->get_tag_values("soTerm");
   my ($product) = $f->get_tag_values("product");
   my ($taxon) = $f->get_tag_values("taxon");
   my ($isPseudo) = $f->get_tag_values("isPseudo");
   my ($score) = $f->get_tag_values("score");
   $soTerm =~ s/\_/ /g;
   $soTerm =~ s/\b(\w)/\U$1/g;
   return qq{" onmouseover="return escape(gene_title(this,'PlasmoDB','$sourceId','$chr','$loc','$soTerm','$product','$taxon','$isPseudo','$score'))"};
  }
link = javascript:void(0)
description  = 1
label        = 1
key          = Evigan Gene Models (P. falciparum only)
citation = Evigan is a eukaryotic gene predictor which produces consensus gene models by integrating multiple sources of evidence. Evigan can incorporate various types of evidence such as gene models predicted by gene finders, EST matches, protein-to-genome alignment, etc. Employing a Dynamic Bayesian Network(DBN), Evigan makes predictions by infering the most likely consensus gene models given observed source evidence. Its model parameters are estimated by the Expectation-Maximization(EM) algorithm, eliminating the need of curated training data. Click <a href="http://www.seas.upenn.edu/~strctlrn/evigan/evigan.html">here</a> to get more information.

[TGI]
feature      = match:TGI
category     = 3. Transcript Expression Evidence 
#preset       = TGI
preset       = ESTsGenesAndSynteny
glyph        = graded_segments
strand_arrow = 0
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "mediumblue" : "crimson";
               }
height       = 10 
title = 1
link_target  = sub {
                 my $f = shift;
     my $name = $f->name;
     my $chr = $f->seq_id;
     my $loc = $f->location->to_FTstring;
     my ($desc) = $f->get_tag_values("Note");
      $desc ||= "<i>unavailable</i>";
     my ($db) = $f->get_tag_values("TGI");
     my ($ver) = $f->get_tag_values("TGIver");
     my @data;
     push @data, [ 'Accession: ' => $name ];
     # push @data, [ 'Location: ' => "$chr $loc" ];
     push @data, [ 'Description: ' => $desc ];
     hover("TGI $db $ver Assembly: $name", \@data);
         }
link         = sub {
                 my $f = shift;
     my $name = $f->name;
     my ($species) = $f->get_tag_values("TGISpecies"); 
           if ($name =~ m/^TC/) {
                   "http://compbio.dfci.harvard.edu/tgi/cgi-bin/tgi/tc_report.pl?gudb=$species&tc=$name";
     } elsif ($name =~ m/^(NP|HT|ET)/) {
        "http://compbio.dfci.harvard.edu/tgi/cgi-bin/tgi/egad_report.pl?id=$name";
     } else {
       "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=nucleotide&cmd=search&term=$name";
     }
               }
key          = EST Assemblies (TGI)
citation     = Spliced alignments of consensus EST assemblies, provided by <a href="http://biocomp.dfci.harvard.edu/tgi/">The Gene Indices (TGI)</a> project; spliced alignments were performed using <a href ="http://www.ncbi.nlm.nih.gov/blast/megablast.shtml">megablast</a> and the NCBI <a href ="http://www.ncbi.nlm.nih.gov/sutils/splign/splign.cgi">Splign</a> algorithm.  Click <a href="http://www.ncbi.nlm.nih.gov/pubmed/11125077">here</a> for more information.

[EST]
feature      = alignment:dbEST
category     = 3. Transcript Expression Evidence 
preset       = ESTsGenesAndSynteny
glyph        = segments
bgcolor      = sub {
                        my ($f, undef, undef, undef, $glyph) = @_;
                        my $flip = $glyph->{flip};
                        $f->strand == ($flip ? -1 : 1) ? "navy" : "maroon";
                }
description  = 0
height       = 8
title = 1
link_target  = sub {
                 my $f = shift; 
                 my $accession  = $f->name; 
          my $start = $f->start;
          my $stop  = $f->stop;
     my ($percent_ident) = $f->get_tag_values("PercentIdentity");
     my ($lib) = $f->get_tag_values("Library");
                 return qq{" onmouseover="return escape(est(this,'$accession*$start*$stop*$percent_ident*$lib'))"};
              }
link        = /plasmo/showRecord.do?name=EstRecordClasses.EstRecordClass&id=$name";
glyph        = graded_segments
strand_arrow = 0
bump_limit   = 50
key        = EST Alignments
citation	 = Expressed sequence tags (ESTs) obtained from <a href"http://www.ncbi.nlm.nih.gov/dbEST/">dbEST</a> and other sources, and aligned to the genome using <a href="http://www.ncbi.nlm.nih.gov/pubmed/11932250">BLAT</a>. 


[SyntenySpansVivaxMC]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium vivax SaI-1/;
                }
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
tkcolor      = azure
height       = 10 
title = 1
link_target        = \&synSpanTitle
link         = \&synSpanLink
key          = P. vivax Syntenic Contigs
citation     = Stretches of likely chromosomal synteny to <i>P. vivax</i>.

[SyntenyGenesVivaxMC]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium vivax SaI-1/;
                }
description  = 1
label        = 1
font2color   = darkgrey
tkcolor      = azure
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "blue" : "red";
               }
height       = 10 
title = 1
link_target        = \&synGeneTitle
link         = /gene/$name
key          = P. vivax Syntenic Genes
citation     = Genes found within syntenic spans.

[SyntenySpansKnowlesiMC]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium knowlesi strain H/;
                }
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
tkcolor      = azure
height       = 10 
title = 1
link_target        = \&synSpanTitle
link         = \&synSpanLink
key          = P. knowlesi Syntenic Contigs
citation     = Stretches of likely chromosomal synteny to <i>P. knowlesi</i>.

[SyntenyGenesKnowlesiMC]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium knowlesi strain H/;
                }
description  = 1
label        = 1
font2color   = darkgrey
tkcolor      = azure
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "blue" : "red";
               }
height       = 10 
title = 1
link_target  = \&synGeneTitle
link         = /gene/$name
key          = P. knowlesi Syntenic Genes
citation     = Genes found within syntenic spans.

[SyntenySpansYoeliiMC]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium yoelii yoelii str. 17XNL/;
                }
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
fgcolor      = sub { my $f = shift; 
                     my ($chr) =$f->get_tag_values("Chromosome"); 
                     if ($chr) { my ($col) = $f->get_tag_values("ChrColor"); $col }}
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
height       = 10 
key          = P. yoelii Syntenic Contigs
title = 1
link_target  = \&synSpanTitle
link         = \&synSpanLink
citation     = Stretches of likely chromosomal synteny to <i>P. yoelii</i>.

[SyntenyGenesYoeliiMC]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium yoelii yoelii str. 17XNL/;
                }
description  = 1
label        = 1
font2color   = darkgrey
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "blue" : "red";
               }
height       = 10 
title = 1
link_target  = \&synGeneTitle
link         = /gene/$name
key          = P. yoelii Syntenic Genes
citation     = Genes found within syntenic spans.

[SyntenySpansBergheiMC]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium berghei strain ANKA/;
                }
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
fgcolor      = sub { my $f = shift; 
                     my ($chr) =$f->get_tag_values("Chromosome"); 
                     if ($chr) { my ($col) = $f->get_tag_values("ChrColor"); $col }} 
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
height       = 10 
title = 1
link_target  = \&synSpanTitle
link         = \&synSpanLink
key          = P. berghei Syntenic Contigs
citation     = Stretches of likely chromosomal synteny to <i>P. berghei</i>.

[SyntenyGenesBergheiMC]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium berghei strain ANKA/;
                }
description  = 1
label        = 1
font2color   = darkgrey
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "blue" : "red";
               }
height       = 10 
title = 1
link_target  = \&synGeneTitle
link         = /gene/$name
key          = P. berghei Syntenic Genes
citation     = Genes found within syntenic spans.

[SyntenySpansChabaudiMC]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium chabaudi chabaudi/;
                }
fgcolor      = sub { my $f = shift; 
                     my ($chr) =$f->get_tag_values("Chromosome"); 
                     if ($chr) { my ($col) = $f->get_tag_values("ChrColor"); $col }}
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
height       = 10 
title = 1
link_target  = \&synSpanTitle
link         = \&synSpanLink
key          = P. chabaudi Syntenic Contigs
citation     = Stretches of likely chromosomal synteny to <i>P. chabaudi</i>.

[SyntenyGenesChabaudiMC]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium chabaudi chabaudi/;
                }
description  = 1
label        = 1
font2color   = darkgrey
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "blue" : "red";
               }
height       = 10 
title = 1
link_target  = \&synGeneTitle
link         = /gene/$name
key          = P. chabaudi Syntenic Genes
citation     = Genes found within syntenic spans.

[SyntenySpansFalciparumMC]
feature      = match:syntenySpanMC
preset       = ESTsGenesAndSynteny
category     = 8. Syntenic Regions
glyph        = arrow
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium falciparum 3D7/;
                }
fgcolor      = sub { my $f = shift; 
                     my ($chr) =$f->get_tag_values("Chromosome"); 
                     if ($chr) { my ($col) = $f->get_tag_values("ChrColor"); $col }}
relative_coords = 1 
relative_coords_offset = sub { my $f = shift; my ($off) = $f->get_tag_values("SynStart"); my ($scale) = $f->get_tag_values("Scale");$off*$scale }
scale        = sub { my $f = shift; my ($scale) = $f->get_tag_values("Scale"); warn $scale; $scale }
linewidth    = 2
tick         = 2
base         = 1
stranded     = 1
height       = 10 
title = 1
link_target  = \&synSpanTitle
link         = \&synSpanLink
key          = P. falciparum Syntenic Contigs
citation     = Stretches of likely chromosomal synteny to <i>P. falciparum</i>.

[SyntenyGenesFalciparumMC]
feature      = gene:syntenyMC
preset       = ESTsGenesAndSynteny
category     = 7. Syntenic Genes
glyph        = processed_transcript
filter       = sub {
                 my $f = shift;
                 my ($taxon) = $f->get_tag_values("Taxon");
                 $taxon eq qq /Plasmodium falciparum 3D7/;
                }
description  = 1
label        = 1
font2color   = darkgrey
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "blue" : "red";
               }
height       = 10 
title = 1
link_target  = \&synGeneTitle
link         = /gene/$name
key          = P. falciparum Syntenic Genes
citation     = Genes found within syntenic spans.

[BLASTX]
feature      = match:BLASTX
preset       = BLASTX
category     = 1. Gene Models
glyph        = graded_segments
strand_arrow = 1
bump_limit   = 10
bgcolor      = sub {
                 my $f = shift;
     $f->strand == +1 ? "mediumblue" : "crimson";
               }
height       = 8
label        = 0
link_target  = sub {
                 my $f = shift; 
                 my $accession  = $f->name; 
          my $start = $f->start;
          my $stop  = $f->stop;
     my ($percent_ident) = $f->get_tag_values("PercentIdentity");
     my ($percent_pos) = $f->get_tag_values("PercentPositive");
     my ($defline) = $f->get_tag_values("Defline");
     my ($expect) = $f->get_tag_values("Expect");
                 return qq{" onmouseover="return escape(blt(this,'$accession*$defline*$start*$stop*$percent_ident*$percent_pos,$expect'))"};
              }
link         = http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val=$name
key          = BLASTX Alignments
citation     = Genomic sequences were used as queries in BLASTX searches against NCBI's non-redundant protein database (NRDB).

[GC Content]
category     = 5. Nucleotide Analysis
glyph        = dna
global feature = 1
height       = 40
do_gc        = 1
gc_window    = 100
link         =
fgcolor      = red
axis_color   = blue
citation     = This displays a GC content graph of the reference sequence at low magnifications and the DNA sequence itself at higher magnifications. GC content is calculated based on a sliding window set at 100 nucleotides.
das category = translation

[CombinedSNPs]
feature  = SNP:Combined
category = 6. Population Biology (show < 61k for details) (P. falciparum only)
glyph    = diamond
key      = SNPs - all P. falciparum strains  
bgcolor  = \&snpColor
fgcolor  = bgcolor
label density = 2
height = \&snpHeight
citation = SNPs from NIH, WTSI and Broad combined. See <a href="/plasmo/showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Su_SNPs,sangerItGhanaSnps,Broad_SNPs&title=Combined%20SNPs">Data Sources</a> for details. <ul><li>Blue for non-synonymous SNPs.<li>Light blue for synonymous SNPs.  <li>Clear for non-coding SNPs.</ul>
title = 1
link = javascript:void(0)
link_target = \&snpTitleQuick

[SuSNPs]
feature  = SNP:Su
category = 6. Population Biology (show < 61k for details) (P. falciparum only)
#glyph   = allele_tower
glyph    = diamond
key      = SNPs (CDS only) - 3D7/7G8/Dd2/D10/HB3 (NIH)
bgcolor  = \&snpColor
fgcolor  = bgcolor
label density = 2
height = \&snpHeight
citation = SNPs provided by the NIH. See <a href="/plasmo/showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Su_SNPs&title=NIH%20SNPs">Data Sources</a> for details. <ul><li>Blue for non-synonymous SNPs.<li>Light blue for synonymous SNPs.  <li>Clear for non-coding SNPs.</ul>
title = 1
link = javascript:void(0)
link_target    = \&snpTitleQuick


[SangerPfSNPs]
feature  = SNP:SangerPf
category = 6. Population Biology (show < 61k for details) (P. falciparum only)
glyph    = diamond
key      = SNPs - 3D7/Ghana1/IT (WTSI)
bgcolor  = \&snpColor
fgcolor  = bgcolor
label density = 2
height = \&snpHeight
citation = SNPs provided by the Wellcome Trust Sanger Institute. See <a href="/plasmo/showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=sangerItGhanaSnps&title=WTSI%20SNPs">Data Sources</a> for details. <ul><li>Blue for non-synonymous SNPs.<li>Light blue for synonymous SNPs. <li>Clear for non-coding SNPs.</ul>
title = 1
link = javascript:void(0)
link_target = \&snpTitleQuick


[BroadSNPs]
feature  = SNP:Broad
category = 6. Population Biology (show < 61k for details) (P. falciparum only)
glyph    = diamond
key      = SNPs - 3D7/HB3/Dd2/others (Broad)
bgcolor  = \&snpColor
fgcolor  = bgcolor
label density = 2
height = \&snpHeight
citation = SNPs provided by the Broad Institute (see <a href="/plasmo/showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Broad_SNPs&title=Broad Institute%20SNPs">Data Sources</a>). <ul><li>Blue for non-synonymous SNPs.<li>Light blue for synonymous SNPs.  <li>Clear for non-coding SNPs.</ul><p>This data includes SNPs between 3D7 and DD2, HB3, 106/1, 7G8, D6, FCB, FCR3, K1, Malayan Camp, RO33, Santa Lucia, Senegal 31.01, Senegal 34.04, Senegal 35.04, Senegal 51.02, VS-1.  DD2 and HB3 together cover more than 90% of the genome. The other strains have low coverage except in the areas surrounding 14 genes where PCR was used for high coverage.
title = 1
link = javascript:void(0)
link_target    = \&snpTitleQuick

[WinzelerSNPs]
feature  = SNP:Winzeler
category = 6. Population Biology (show < 61k for details) (P. falciparum only)
glyph    = diamond
key      = CGH - 13 P. falciparum strains (Scripps)
bgcolor  = sub {
       my $f = shift;
             my $var = $f->bulkAttributes();
             my $ctDiffs = 0;
             foreach my $s (@$var){
               $ctDiffs++ unless $s->{MATCHES_REFERENCE};
             }
             my $color = 'white';
             if($ctDiffs >= 4){
               $color = 'green';
             }elsif($ctDiffs >= 2){
               $color = 'lightgreen';
             }
             return $color; 
          }
fgcolor  = bgcolor
label density = 2
height = \&snpHeight
citation = Array Comparative Genomic Hybridization data provided by the Scripps Research Insitute. See <a href="/plasmo/showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=WinzelerGeneticVariationArray&title=Scripps%20SNPs">Data Sources</a> for details.  <ul><li>Green: > 4 polymorphic strains <li>Light green: > 2 polymorphic strains<li>White: <= 2 polymorphic strains</ul>.
title = 1
link_target    = sub {
       my $f = shift;
             my ($isCoding) = $f->get_tag_values("IsCoding"); 
             my ($refStrain) = $f->get_tag_values("RefStrain"); 
             my ($gene) = $f->get_tag_values("Gene"); 
             my ($refNA) = $f->get_tag_values("RefNA"); 
             my ($source_id) = $f->get_tag_values("SourceID");
             my ($rend) = $f->get_tag_values("rend"); 
             my ($base_start) = $f->get_tag_values("base_start");
             my $zoom_level = $rend - $base_start; 
             my $variants = $f->bulkAttributes();
             my $type = $isCoding? 'Coding' : 'Non-Coding';
             if ($zoom_level <= 50000) {  
           my @data;
               push @data, [ 'Location:'  => $f->start ];
               if ($gene) {
                  push @data, [ 'Gene:'  => $gene ];            
               }
               push @data, ["Sequence:" => $refNA];
               push @data, ["Strains:" => ""];
               push @data, ["$refStrain" => "Reference"];
               foreach my $variant (@$variants) {
                 my $strain = $variant->{STRAIN};
                 next if $strain eq $refStrain;
                 my $likeRef = $variant->{MATCHES_REFERENCE};
                 my $info = $likeRef ? "matches reference" : "polymorphic";
                 push @data, [ "$strain" => $info ];
               }
               hover( "CGH | $source_id | $type", \@data) if $refStrain;
             } else {
                return $gene? "In gene $gene" : "Non-coding"; 
             }
    }

[SangerPrSNPs]
feature  = SNP:SangerPr
category = 6. Population Biology (show < 61k for details) (P. falciparum only)
glyph    = diamond
key      = SNPs - P. reichenowi vs P. falciparum 3D7 (WTSI)
bgcolor  = \&snpColor
fgcolor  = bgcolor
label density = 2
height = \&snpHeight
citation = P.reichenowi SNPs provided by the Wellcome Trust Sanger Institute. See <a href="/plasmo/showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=sangerReichenowiSnps&title=WTSI%20P.r.%20SNPs">Data Sources</a> for details. <ul><li>Blue for non-synonymous SNPs.<li>Light blue for synonymous SNPs. <li>Clear for non-coding SNPs.</ul>
title = 1
link = javascript:void(0)
link_target    = \&snpTitleQuick

[SNP3kChips]
feature  = SNP:3kChip
category = 6. Population Biology (show < 61k for details) (P. falciparum only)
glyph    = segments
key      = SNPs - 3k Chip 
bgcolor  =  sub { my $f = shift;
                 my ($allele) = $f->get_tag_values('Allele');
                 #print $allele;
                 if($allele eq 'A') {
                   return 'darkgreen';
                 } elsif($allele eq 'T') {
                   return 'lightgreen';
                 } elsif($allele eq 'C') {
                   return 'red';
                 } elsif($allele eq 'G') {
                   return 'darkred';
                 } elsif($allele eq 'N') {
                   return 'orange';
                 } else {
                   return 'yellow';
                 }
                }
fgcolor  =  sub { my $f = shift;
                 my ($allele) = $f->get_tag_values('Allele');
                 #print $allele;
                 if($allele eq 'A') {
                   return 'darkgreen';
                 } elsif($allele eq 'T') {
                   return 'lightgreen';
                 } elsif($allele eq 'C') {
                   return 'red';
                 } elsif($allele eq 'G') {
                   return 'darkred';
                 } elsif($allele eq 'N') {
                   return 'orange';
                 } else {
                   return 'yellow';
                 }
                }
height =  4
pad_bottom = -1
pad_left = -1
pad_right = -1 
bump density = 5000
linewidth  = 0
label   = 0
link = /plasmo/showRecord.do?name=IsolateRecordClasses.IsolateRecordClass&project_id=PlasmoDB&primary_key=$name
link_target    = \&chipTitleQuick
citation = The 3K genotyping chip is an affymetrix array containing ~3000 SNPs (about two thirds are from chromosome 7 and the rest are distributed throughout the genome).


[Microsatellite]
feature      = Microsatellite:sts
category     = 6. Population Biology (show < 61k for details) (P. falciparum only)
glyph        = diamond
strand_arrow = 0
linewidth    = 2
height       = 8
bgcolor      = purple
fgcolor      = purple
link          = sub { 
                  return "javascript:void(0)";
                   }
title = 1
link_target  = sub { my $f            = shift;
                     my $name         = $f->name;
                     my $genbankLink  = "<a target='_blank' href='http://www.ncbi.nlm.nih.gov/sites/entrez?db=unists&cmd=search&term=$name'>$name</a>";
                     my $projectId    = 'PlasmoDB';
                     my $start        = $f->start; 
                     my $stop         = $f->stop; 
                     my $length       = $stop - $start + 1;
                     my ($type)        = $f->get_tag_values('Name'); 
                     my ($sequenceId)        = $f->get_tag_values('SequenceId'); 
                     my $msaLink = "<a target='_blank' href='/cgi-bin/mavidAlign?project_id=$projectId&contig=$sequenceId&start=$start&stop=$stop&revComp=off&type=clustal'>Available Strains</a>";
                     my @data; 
                     push @data, [ 'Genbank Accession:'        => $genbankLink ];
                     push @data, [ 'Type:'        => $type ];
                     push @data, [ 'Sequence Id:'        => $sequenceId ];
                     push @data, [ '3D7 Start:'        => $start ];
                     push @data, [ '3D7 End:'        => $stop ];
                     push @data, [ '3D7 ePCR Product Size:'        => $length ];
                     push @data, [ 'Multiple Sequence Alignment'        => $msaLink ];
                     return hover( "Microsatellite STS - $name", \@data); 
                   } 
key          = Microsatellite
label         = 0
citation     = This data is based on evidence presented in <a href="http://www.ncbi.nlm.nih.gov/pubmed/10558988">Science, 1999 vol. 286 (5443) pp. 1351-3</a>.  Primer sequences used in this study were obtained from Genbank (linkouts to Genbank record page are provided) and ePCR was performed on the most recent version of the <I>P. falciparum</I>  3D7 genome.  Please note that some primer pairs in Genbank did NOT successfully map to the most current version of the genome.  In addition, reported microsatellite sizes may not coincide with the size reported in Genbank as those data were run on a much earlier version of the genome sequence. Clicking on a particular microsatellite provides a multiple sequence alignment (msa) of this region from 3D7 to the same region in the Dd2, HB3 and IT strains of  <I>P. falciparum</I>.  The length of the aligned microsatellite sequence for each of the strains is reported on this page (i.e. the number of nucleotides present in the msa).

[SAGEtags]
feature      = SAGE:3-5prime
category     = 3. Transcript Expression Evidence 
glyph        = arrow
strand_arrow = 0
linewidth    = 2
height       = 8
bgcolor      = blue
fgcolor      = blue
link        = /plasmo/showRecord.do?name=SageTagRecordClasses.SageTagRecordClass&primary_key=$name
title = 1
link_target  = sub { my $f            = shift;
                     my $name         = $f->name;
                     my $start        = $f->start; 
                     my $stop         = $f->stop; 
                     my ($freq)       = $f->get_tag_values('RawCount'); 
                     my ($tag)        = $f->get_tag_values('Sequence'); 
                     my ($occurrence) = $f->get_tag_values('Occurrence'); 
                     my ($lib)        = $f->get_tag_values('Library'); 
                     my $pct          = ($freq / 38015) * 100 ;
                     $pct             = sprintf("%.3f", $pct);
                     my @data; 
                     push @data, [ 'Location:'        => "$start..$stop" ];
                     push @data, [ 'Sequence:'        => $tag ];
                     push @data, [ 'Library:'         => $lib ];
                     push @data, [ 'Frequency:'       => $freq];
                     push @data, [ 'Library Total:'   => "38015"];
                     push @data, [ 'Percentage:'      => "$pct %"];
                     push @data, [ 'Found in genome:' => $occurrence ];
                     return hover( "Sage Tag - Temp ID $name", \@data); 
                   } 
key          = SAGE tags (P. falciparum only)
label         = 0
citation     = Serial analysis of gene expression (<a href="http://www.sagenet.org/">SAGE</a>) tag sequences are mapped to genome assembly contigs. <a href="http://oharb.plasmodb.org/plasmo.oharb/showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=SageTagArrayDesign,PlasmoSageTagFreqs&title=Query#SageTagArrayDesign">Data Source</a>.

[ORF]
feature      = alignment:ORF
glyph        = cds
category     = 9. Other Features
height       = 12
key          = ORF > 50aa
stranded     = 1
bgcolor      = sub {
                 my ($f, undef, undef, undef, $glyph) = @_;
                 my $flip = $glyph->{flip};
                 $f->strand == ($flip ? -1 : 1) ? "navy" : "maroon";
               }
fgcolor      = black
description  = 0
label       = 0
bump_limit  = 10
link      =  sub { my $f = shift;
                   my $name = $f->name;
                   my $link = "/plasmodb/showRecord.do?name=OrfRecordClasses.OrfRecordClass&project_id=PlasmoDB&primary_key=$name";
                   return $link;
                  }
link_target = sub {
                 my $f = shift;
                 my $name = $f->name;
                 my $start  = $f->start; 
                 my $stop   = $f->stop; 
                 my @data; 
                 push @data, [ 'Name:'   => $name ]; 
                 push @data, [ 'Start:'  => $start ]; 
                 push @data, [ 'Stop:'   => $stop ]; 
                 push @data, [ 'Length:' => abs($stop - $start) . ' nt' ]; 
                 return hover( 'ORFs >= 50 nt', \@data); 
               } 
citation     = Open reading frames (ORFs) greater than 150 nucleotides (50 amino acids), generated by PlasmoDB.



[LowComplexity]
feature      = lowcomplexity:dust
category     = 5. Nucleotide Analysis
preset       = LowComplexity
glyph        = segments
bgcolor      = grey
height       = 6
description  = 0
label        = 0
link         = 
key          = Low Complexity Regions
citation     = Selecting this option displays regions of low compositional complexity, as defined by the
               DUST algorithm of Tatusov and Lipman.  For more information on DUST click <a href="ftp://ftp.ncbi.nlm.nih.gov/pub/agarwala/windowmasker/windowmasker_suppl.pdf">here</a>.

[TandemRepeat]
feature      = TandemRepeat:TRF
category     = 5. Nucleotide Analysis
#preset       = TandemRepeat
glyph        = segments
bgcolor      = darkgrey
height       = 6
description  = 0
label        = 0
link         = 
key          = Tandem Repeats
citation     = Regions of tandem repeats, as defined by the
               <a href="http://tandem.bu.edu/trf/trf.html">Tandem Repeats Finder</a> program by <a href="http://www.ncbi.nlm.nih.gov/pubmed/9862982">Gary Benson</a>.
[TranslationF]
category     = 5. Nucleotide Analysis
glyph        = translation
preset       = TranslationF
global feature = 1
frame0       = cadetblue
frame1       = blue
frame2       = darkblue
height       = 20
fgcolor      = purple
strand       = +1
translation  = 3frame
link         =
das category = translation
key          = 3-frame translation (forward)
citation     = Selecting this option draws three frame conceptutal translations. At low magnifications (zoomed way out), this track draws littel symbols indicating where start and stop codons are. At high magnifications, the actual amino acid sequence comes into view. <br /><br /> Frame +1: cadetblue <br />Frame +2: blue <br />Frame +3: darkblue

[TranslationR]
category     = 5. Nucleotide Analysis
glyph        = translation
preset       = TranslationR
global feature = 1
frame0       = darkred
frame1       = red
frame2       = crimson
height       = 20
fgcolor      = blue
strand       = -1
link         =
translation  = 3frame
das category = translation
key          = 3-frame translation (reverse)
citation     = Selecting this option draws three frame conceptutal translations. At low magnifications (zoomed way out), this track draws littel symbols indicating where start and stop codons are. At high magnifications, the actual amino acid sequence comes into view. <br /><br />Frame -1: darkred<br />Frame -2: red<br />Frame -3: crimson<br />

[GeneDensity]
category     = 1. Gene Models
feature      = annotation:density
preset       = GeneDensity
glyph        = xyplot
graph_type   = boxes
bump density = 1
bump density = 1
scale        = right
#scale       = both
bgcolor      = lightslategray
fgcolor      = bgcolor
height       = 60
min_score    = 0
label        = 0
key          = Gene Density
citation     = Density plot of annotated genes, in the displayed genomic region.  The calculation for this is done as for gene density accross the entire chromosome (see above).

[BergmanVaidyaOligos]
feature      = match:BergmanVaidyaOligos
glyph        = segments
category     = 9. Other Features
bgcolor      = darkgrey
height       = 
link_target        = sub {
                 my $f = shift;
     my $name = $f->name;
     my $chr = $f->seq_id;
     my $loc = $f->location->to_FTstring;
     my ($desc) = $f->get_tag_values("Note");
     my @data;
     push @data, [ 'Name:'  => $name ];
     push @data, [ 'Description:' => $desc ];
                 # push @data, [ 'Coordinates:' => $f->start . ' .. ' . $f->end ];
     push @data, [ 'Location:'  => "$chr $loc" ];
     hover("Glass Slide Oligo: $name", \@data);
         }
description  = 1
label        = 1
link         = /plasmo/showRecord.do?name=ArrayElementRecordClasses.ArrayElementRecordClass&primary_key=$name
key          = P. yoelii glass slide oligos
citation     = Alignment of DrexelMed glass slide (version 1.0) oligos in <i>P. yoelii</i> (From Drs. Lawrence Bergman and Akhil Vaidya).

[WatersMassSpecPeptides]
feature      = domain:WatersMassSpecPeptides 
category     = 2. Protein Expression Evidence
glyph        =  segments
# -0 turns off transcript arrows at highlevel zoom
arrow_length = -0
font2color   = black
fgcolor =  sub { my $f = shift;
                 my ($soterm) = $f->get_tag_values('SOTerm');
                 return ($soterm eq 'protein_coding') ? 'black' : 'black';
               }
connector_color = grey
connector    = hat
bgcolor      = sub { my $f = shift;
                     my ($extdbname) = $f->get_tag_values('ExtDbName');
                     ($extdbname =~ m/female/i) && return 'red';
                     ($extdbname =~ m/male/i) && return 'blue';
                     return 'yellow';
                   }
height       = sub { my $f = shift;
                     my ($soterm) = $f->get_tag_values('SOTerm');
                     return ($soterm eq 'protein_coding') ? 7 : 5;
                   }
#pad_bottom   = -1
description  = 0 
link         = sub {
                return "javascript:void(0)";
               }
title = 1
link_target  = sub {  my $f = shift;
    my ($desc) = $f->get_tag_values('Description');
    my ($seq) =  $f->get_tag_values('PepSeq');
                my ($extdbname) = $f->get_tag_values('ExtDbName');
                $desc =~ s/[\r\n]/<br>/g;
                $desc =~ s/report\:(.*)$//g;
                $extdbname =~ s/Waters/assay: /i;
                 $extdbname =~ s/Gametes/Gametocytes/i;
    my @data;
    push @data, [ '' => "$extdbname<br>sequence:$seq<br>$desc" ];
    hover('', \@data);
    }
label      = 0
key        = P. berghei gametocyte proteomics data (Leiden Malaria Group)
citation   = <i>P. berghei</i> gametocyte proteomics data from the Leiden Malaria Group provided by Dr. Andy Waters.  In the track, blue = male gametocytes, red = female gametocytes and yellow = mixed gametocytes.

[KhanMassSpecPeptides]
feature      = domain:KhanMassSpecPeptides
category     = 2. Protein Expression Evidence
glyph        = segments
font2color   = black
fgcolor      = black
bgcolor      = sub { my $f = shift;
                     $f = $f->parent if (! $f->get_tag_values('ExtDbName'));
                     my ($extdbname) = $f->get_tag_values('ExtDbName');
                     return 'yellow';
                   }
height       = 5
#pad_bottom   = -1 
description  = 0
link  =  javascript:void(0)
link_target  = sub {  my $f = shift;
                      my ($desc) = $f->get_tag_values('Description');
                      $desc =~ s/[\r\n]/<br>/g;
                      my ($extdbname) = $f->get_tag_values('ExtDbName');        
          my ($seq) =  $f->get_tag_values('PepSeq');
                      $extdbname =~ s/Kahn Pfalciparum/assay: /i;
          my @data;
                      push @data, [ '' => "$extdbname<br>sequence:$seq<br>$desc" ];
                      hover('', \@data);
                   }
label      = 0
key          =P. falciparum Merozoite Mass Spec Peptides (Leiden Malaria Group)
citation  = <i>P. falciparum</i> merozoite mass spec peptides from the Leiden Malaria Group provided by Dr. Shahid Khan.

[LasonderMassSpecPeptides]
feature      = domain:LasonderMassSpecPeptides
category     = 2. Protein Expression Evidence
glyph        = segments
font2color   = black
fgcolor      = black
bgcolor      = sub { my $f = shift;
                     $f = $f->parent if (! $f->get_tag_values('ExtDbName'));
                     my ($extdbname) = $f->get_tag_values('ExtDbName');
                     ($extdbname =~ m/oocyst peptides/i) && return 'mediumslateblue';
                     ($extdbname =~ m/oocyst-derived/i) && return 'orange';
                     ($extdbname =~ m/salivary gland/i) && return 'yellow';
                   }
height       = 5
pad_bottom   = -1 
description  = 0 
link  =  javascript:void(0)
link_target  = sub {  my $f = shift;
                      my ($desc) = $f->get_tag_values('Description');
                      $desc =~ s/[\r\n]/<br>/g;
                      my ($extdbname) = $f->get_tag_values('ExtDbName');        
          my ($seq) =  $f->get_tag_values('PepSeq');
                      $extdbname =~ s/Lasonder/assay: /i;
          my @data;
                      push @data, [ '' => "$extdbname<br>sequence:$seq<br>$desc" ];
                      hover('', \@data);
                   }
label      = 0
key          =  Mosquito Oocyst, Oocyst-derived Sporozoite and Salivary Gland Sporozoite Peptides
citation  =   <i>P. falciparum</i> peptides derived from <u>mosquito oocysts</u>, <u>oocyst-derived sporozoites</u> and <u>salivary gland sporozoites</u> provided by Dr. Edwin Lasonder.

[LiverStageMassSpecPeptides]
feature      = domain:LiverStageMassSpecPeptides
category     = 2. Protein Expression Evidence
glyph        = segments
font2color   = black
fgcolor      = black
bgcolor      = sub { my $f = shift;
                     $f = $f->parent if (! $f->get_tag_values('ExtDbName'));
                     my ($extdbname) = $f->get_tag_values('ExtDbName');
                     ($extdbname =~ m/LS40/i) && return 'red';
                     return 'yellow';
                   }
height       = 5
#pad_bottom   = -1 
description  = 0 
link  =  javascript:void(0)
link_target  = sub {  my $f = shift;
                      my ($desc) = $f->get_tag_values('Description');
                      $desc =~ s/[\r\n]/<br>/g;
          my ($seq) =  $f->get_tag_values('PepSeq');
                      my ($extdbname) = $f->get_tag_values('ExtDbName');        
                      $extdbname =~ s/Pyoelii/assay: /i;
  	      my @data;
                      push @data, [ '' => "$extdbname<br>sequence:$seq<br>$desc" ];
                      hover('', \@data);
                   }
label 		 = 0
key          = Peptides derived from P. yoelii liver stage (LS40 and LS50)
citation  = Peptides derived from <i>P. yoelii</i> liver stage. LS40 and 50 = Liver Stage 40 hrs and 50hrs post infection.  LS40 parasites are at the large schizont stage and LS50 parasites have started merozoite formation.

[PromotersFwd]
feature      = mapp:promotersForward
category     = 4. Computational Prediction of Transcription Start Sites (P. falciparum only)
glyph        = xyplot
graph_type   = boxes
bump density = 1
scale        = right
fgcolor      = blue
height       = 60
min_score    = 0
max_score    = 1
label        = 0
link         = 
key          = Predicted Transcription Start Sites on the Forward Strand (MAPP)
citation     = MAPP (Malaria Promoter Predictor) recognises transcription start sites using 21 physicochemical properties of DNA. The predictor is comprised of a series of support vector machines which were trained on the 5' ends of full-length cDNAs from the FULL-Malaria database. Optimal prediction performance is achieved using only predictions with a MAPP score > 0.90.  Predictions are strand specific. (Brick K, Watanabe J, Pizzi E).
[PromotersRev]
feature      = mapp:promotersReverse
category     = 4. Computational Prediction of Transcription Start Sites (P. falciparum only)
glyph        = xyplot
graph_type   = boxes
bump density = 1
scale        = right
fgcolor      = red
height       = 60
min_score    = 0
max_score    = 1
label        = 0
link         = 
key          = Predicted Transcription Start Sites on the Reverse Strand (MAPP)
citation     = Please see description for forward strand MAPP prediction.
[DoTSAssemblies]
feature      = alignment:DoTSAssemblies
category     = 3. Transcript Expression Evidence 
glyph        = segments
bgcolor      = sub {
                        my ($f, undef, undef, undef, $glyph) = @_;
                        my $flip = $glyph->{flip};
                        $f->strand == ($flip ? -1 : 1) ? "navy" : "maroon";
                }
description  = 0
height       = 8
title        = sub { my $f = shift;
                 my $name  = $f->name; 
	     	 my $start = $f->start;
	     	 my $stop  = $f->stop;
                 my @data; 
		 my ($percent_identity) = $f->get_tag_values("PercentIdentity");
		 my ($count) = $f->get_tag_values("Count");
                 push @data, [ 'Name:' => $name ]; 
             	 push @data, [ 'Start:'  => $start ];
             	 push @data, [ 'Stop:'   => $stop ];
                 push @data, [ 'Percent Identity:' => $percent_identity ]; 
                 push @data, [ 'Count of ESTs:' => $count ]; 
		 hover("DoTS EST Assemblies: $name", \@data);
               }
link 	     = sub { my $f = shift;
                     my $name = $f->name;
                     my $link = "/a/showRecord.do?name=AssemblyRecordClasses.AssemblyRecordClass&project_id=PlasmoDB&primary_key=$name";
                     return $link;
               }
#das category = similarity
glyph        = graded_segments
strand_arrow = 0
bump_limit   = 50
key          = DoTS EST Assemblies
citation     = DoTS stands for The Database of Transcribed Sequences. The naming of this feature as "DoTS EST Assemblies" is for historical reasons only. This track shows <a href="http://www.ncbi.nlm.nih.gov/pubmed/11932250">BLAT</a> alignment of consensus transcript sequences (DTs) to the genome. DTs are generated by clustering ESTs based on BLAT alignment to the genome followed by <a href="http://www.ncbi.nlm.nih.gov/pubmed/10508846"> CAP4</a> assembly.


