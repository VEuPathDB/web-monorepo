[GENERAL]
description   = PlasmoDB Protein Sequence Browser
db_adaptor    = DAS::GUS
db_args       = sub {
                 use ApiCommonWebsite::Model::ModelConfig;
                 use ApiCommonWebsite::Model::DbUtils;
                 my $c = new ApiCommonWebsite::Model::ModelConfig('PlasmoDB');
                 my $resolvedDsn = ApiCommonWebsite::Model::DbUtils->resolveOracleDSN($c->appDb->dbiDsn);
                   { -sqlfile => $ENV{DOCUMENT_ROOT}.'/../conf/gbrowse.conf/plasmodbaa.xml',
                     -dsn     => $resolvedDsn,
                     -user    => $c->appDb->login,
                     -pass    => $c->appDb->password,
                   }
                 }
                 
#plugins = AttributeHiliter 
plugins = Aligner FastaDumper GFFDumper BatchDumper

# 'region' or 'contig' would be other typical choices,
reference class  = protein

# Web site configuration info
stylesheet  = /gbrowse/gbrowse.css
buttons     = /gbrowse/images/buttons
js          = /gbrowse/js

# using full url breaks under mod_perl.  Bio::Graphics::Browser calls lookup_uri()
# on it. That is, don't do this:
#tmpimages   = http://plasmodb.org/gbrowse/tmp /var/www/plasmodb.org/html/gbrowse/tmp 
tmpimages   = /gbrowse/tmp

# 24hrs/day * 360 days
image cachetime   = 8760

# Default glyph settings
glyph       = generic
height      = 8
bgcolor     = cyan
fgcolor     = cyan
label density = 25
bump density  = 2000

show sources = 0
default varying = 1 # tracks appear as defined below, not in alphabetical order

# where to link to when user clicks in detailed view
# link        = sub{"/$CGI_OR_MOD/gbrowse/plasmodbaa"}
link         =

# what image widths to offer
image widths  = 640 800 1024 1280

# default width of detailed view (pixels)
default width = 800
default features = InterproDomains SignalP TMHMM ExportPred HydropathyPlot SecondaryStructure LowComplexity BLASTP

# max and default segment sizes for detailed view
max segment     = 1000000
default segment = 500

# zoom levels
zoom levels    = 100 200 1000 2000 5000 10000

# colors of the overview, detailed map and key
overview bgcolor = lavenderblush
detailed bgcolor = thistle
key bgcolor      = mistyrose

# examples to show in the introduction
examples = PFD01234w
           Kinase
           "Transmembrane Protein"

# "automatic" classes to try when an unqualified identifier is given
automatic classes = protein

language = en

empty_tracks = dashed

# a footer
footer = <hr>

# Various places where you can insert your own HTML -- see configuration docs
html1 = 
html2 = 
html3 = 
html4 = 
html5 = 
html6 = <script type="text/javascript" src="/gbrowse/wz_tooltip.js"></script>

init_code = @main::rainbow = qw(red green yellow blue khaki pink orange cyan purple);
     use vars qw($CGI_OR_MOD);
     $CGI_OR_MOD = 'cgi-bin';
     #$CGI_OR_MOD  = 'mod-perl';
     # group writable tmp files
     umask 0002; 
     sub hover {
     use HTML::Template;
     my ($name, $data) = @_;
     my $tmpl = HTML::Template->new(filename => $ENV{DOCUMENT_ROOT}.'/gbrowse/hover.tmpl');
     $tmpl->param(DATA => [ map { { @$_ > 1 ? (KEY => $_->[0], VALUE => $_->[1]) : (SINGLE => $_->[0]) } } @$data ]);
     my $str = $tmpl->output;
     $str =~ s/'/\\'/g;
     $str =~ s/\"/&quot;/g;
     $str =~ s/\s+$//;
     my $cmd = "this.T_TITLE='$name'";
     $cmd = qq{" onMouseOver="$cmd;return escape('$str')};
     return $cmd;
    }

### TRACK CONFIGURATION ####
# the remainder of the sections configure individual tracks

###################################
# Plugin configuration
###################################
[KhanMassSpecPeptides]
feature      = domain:KhanMassSpecPeptides
glyph        = segments
font2color   = black
fgcolor      = black
bgcolor      = sub { my $f = shift;
                     $f = $f->parent if (! $f->get_tag_values('ExtDbName'));
                     my ($extdbname) = $f->get_tag_values('ExtDbName');
                     return 'yellow';
                   }
height       = 5
pad_bottom   = -1 
description  = 0 
link  =  javascript:void(0)
link_target  = sub {  my $f = shift;
                      my ($desc) = $f->get_tag_values('Description');
                      $desc =~ s/[\r\n]/<br>/g;
                      my ($extdbname) = $f->get_tag_values('ExtDbName');        
                      my ($seq) =  $f->get_tag_values('PepSeq');
                      $extdbname =~ s/Kahn Pfalciparum/assay: /i;
                      my @data;
                      push @data, [ '' => "$extdbname<br>sequence:$seq<br>$desc" ];
                      hover('', \@data);
                   }
label      = 0
key          = P. falciparum Merozoite Mass Spec Peptides (Leiden Malaria Group)
citation  = P. falciparum Merozoite Mass Spec Peptides (Leiden Malaria Group)

[LasonderMassSpecPeptides]
feature      = domain:LasonderMassSpecPeptides
glyph        = segments
font2color   = black
fgcolor      = black
bgcolor      = sub { my $f = shift;
                     $f = $f->parent if (! $f->get_tag_values('ExtDbName'));
                     my ($extdbname) = $f->get_tag_values('ExtDbName');
                     ($extdbname =~ m/oocyst peptides/i) && return 'mediumslateblue';
                     ($extdbname =~ m/oocyst-derived/i) && return 'orange';
                     ($extdbname =~ m/salivary gland/i) && return 'yellow';
                   }
height       = 5
pad_bottom   = -1 
description  = 0 
link  =  javascript:void(0)
link_target  = sub {  my $f = shift;
                      my ($desc) = $f->get_tag_values('Description');
                      $desc =~ s/[\r\n]/<br>/g;
                      my ($extdbname) = $f->get_tag_values('ExtDbName');        
                      my ($seq) =  $f->get_tag_values('PepSeq');
                      $extdbname =~ s/Lasonder/assay: /i;
                      my @data;
                      push @data, [ '' => "$extdbname<br>sequence:$seq<br>$desc" ];
                      hover('', \@data);
                   }
label      = 0
key          =  Lasonder Mosquito Oocyst, Oocyst-derived Sporozoite, and Oocyst-derived Sporozoite
citation  =   Lasonder Mosquito Oocyst, Oocyst-derived Sporozoite, and Oocyst-derived Sporozoite

[LiverStageMassSpecPeptides]
feature      = domain:LiverStageMassSpecPeptides
glyph        = segments
font2color   = black
fgcolor      = black
bgcolor      = sub { my $f = shift;
                     $f = $f->parent if (! $f->get_tag_values('ExtDbName'));
                     my ($extdbname) = $f->get_tag_values('ExtDbName');
                     ($extdbname =~ m/LS40/i) && return 'red';
                     return 'yellow';
                   }
height       = 5
pad_bottom   = -1 
description  = 0 
link  =  javascript:void(0)
link_target  = sub {  my $f = shift;
                      my ($desc) = $f->get_tag_values('Description');
                      $desc =~ s/[\r\n]/<br>/g;
                      my ($seq) =  $f->get_tag_values('PepSeq');
                      my ($extdbname) = $f->get_tag_values('ExtDbName');        
                      $extdbname =~ s/Pyoelii/assay: /i;
                      my @data;
                      push @data, [ '' => "$extdbname<br>sequence:$seq<br>$desc" ];
                      hover('', \@data);
                   }
label      = 0
key          = Pyoelii Liver Stage LS40 and LS50
citation  =  Pyoelii Liver Stage LS40 and LS50

[WatersMassSpecPeptides]
feature      = domain:WatersMassSpecPeptides
glyph        = segments
font2color   = black
fgcolor      = black
bgcolor      = sub { my $f = shift;
                     $f = $f->parent if (! $f->get_tag_values('ExtDbName'));
                     my ($extdbname) = $f->get_tag_values('ExtDbName');
                     ($extdbname =~ m/female/i) && return 'red';
                     ($extdbname =~ m/male/i) && return 'blue';
                     return 'yellow';
                   }
height       = 5
pad_bottom   = -1 
description  = 0 
link  =  javascript:void(0)
link_target  = sub {  my $f = shift;
                      my ($desc) = $f->get_tag_values('Description');
                      $desc =~ s/[\r\n]/<br>/g;
                      my ($seq) =  $f->get_tag_values('PepSeq');
                      my ($extdbname) = $f->get_tag_values('ExtDbName');        
                      $extdbname =~ s/Waters/assay: /i;
                      $extdbname =~ s/Gametes/Gametocytes/i;
                      my @data;
                      push @data, [ '' => "$extdbname<br>sequence:$seq<br>$desc" ];
                      hover('', \@data);
                   }
label      = 0
key        = P. berghei gametocyte proteomics data (Leiden Malaria Group)
citation   = <i>P. berghei</i> gametocyte proteomics data from the Leiden Malaria Group provided by Dr. Andy Waters.  In the track, blue = male gametocytes, red = female gametocytes and yellow = mixed gametocytes.


[InterproDomains]
feature      = domain:interpro
glyph        = segments
font2color   = black
bgcolor      = lightslategray
height       = 8 
title        = sub {
                 my $f = shift;
                 my $name = $f->name;
                 my ($desc) = $f->get_tag_values("Note");
                 my ($db) = $f->get_tag_values("Db");
                 my ($url) = $f->get_tag_values("Url");
                 my ($evalue) = $f->get_tag_values("Evalue");
                 $evalue = sprintf("%.2E", $evalue);
                 my @data;
                 push @data, [ 'Database:'  => $db ];
                 push @data, [ 'Accession:'  => $name ];
                 push @data, [ 'Description:' => $desc ];
                 push @data, [ 'Coordinates:' => $f->start . ' .. ' . $f->end ];
                 push @data, [ 'Evalue:' => $evalue ];
                 hover("InterPro Domain: $name", \@data);
         }
description  = 1
label        = 1
link         = sub {
                 my $f = shift;
                 my ($url) = $f->get_tag_values("Url");
                 return $url;
         }
key          = InterPro Domains
citation     = InterPro domains

[SignalP]
feature      = domain:SignalP
glyph        = segments
font2color   = black
bgcolor      = navy
height       = 8 
title        = sub {
                 my $f = shift;
                 my @data;
                 my ($d_score) = $f->get_tag_values("DScore");
                 my ($signal_prob) = $f->get_tag_values("SignalProb");
                 my ($conclusion_score) = $f->get_tag_values("ConclusionScore");
                 push @data, [ 'Coordinates:' => $f->start . ' .. ' . $f->end ];
                 push @data, [ 'NN Conclusion Score:' => $conclusion_score ];
                 push @data, [ 'NN D-Score:' => $d_score ];
                 push @data, [ 'HMM Signal Probability:' => $signal_prob ];
                 hover("Signal peptide", \@data);
         }
description  = 0
label        = 0
link         = ""
key          = Signal Peptide
citation     = Signal peptide predictions by SP-HMM/SP-NN

[TMHMM]
feature      = domain:TMHMM
glyph        = segments
font2color   = black
bgcolor      = navy
height       = 8 
title        = sub {
                 my $f = shift;
                 my ($desc) = $f->get_tag_values("Topology");
                 my @data;
                 push @data, [ 'Topology:' => $desc ];
                 push @data, [ 'Coordinates:' => $f->start . ' .. ' . $f->end ];
                 hover("Transmembrane Domain", \@data);
         }
label        = 0
description  = 0
link         = ""
key          = Transmembrane Domains
citation     = Transmembrane domains detected by TmHMM

[HydropathyPlot]
glyph        = protein
global feature = 1
height       = 40
do_kd        = 1
fgcolor      = black
axis_color   = blue
citation     = Kyte-Doolittle hydropathy plot

[SecondaryStructure]
glyph        = secondary_structure
global feature = 1
height       = 40
pad_top      = 16
heading      = Secondary Structure
do_plots     = 1
fgcolor      = red
axis_color   = purple
helix_color  = red
coil_color   = white
strand_color = blue
citation     = PSIPRED secondary structure prediction

[BLASTP]
feature      = match:BLASTP
glyph        = graded_segments
font2color   = black
bgcolor      = wheat
title        = sub {
                 my $f = shift;
                 my $name = $f->name;
                 my ($desc) = $f->get_tag_values("Note");
                 $desc ||= "<i>unavailable</i>";
                 $desc =~ s/\001.*//;
                 my @data;
                 push @data, [ 'Name:'  => $name ];
                 push @data, [ 'Description:' => $desc ];
                 push @data, [ 'Expectation:' => $f->get_tag_values("Expect") ];
                 push @data, [ '% Identical:' => sprintf("%3.1f", $f->get_tag_values("PercentIdentity")) ];
                 push @data, [ '% Positive:' => sprintf("%3.1f", $f->get_tag_values("PercentPositive")) ];
                 push @data, [ 'Coordinates:' => $f->start . ' .. ' . $f->end ];
                 hover("BLASTP hit", \@data);
         }
description  = 1
label        = 0
link         = http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val=$name
key          = BLASTP Hits
citation     = BLASTP Hits

[LowComplexity]
feature      = lowcomplexity:seg
glyph        = segments
bgcolor      = grey
height       = 6
title        = sub {
                 my $f = shift;
                 my @data;
                 my ($sequence) = $f->get_tag_values("Sequence");
                 push @data, [ 'Coordinates:' => $f->start . '..' . $f->end ];
                 push @data, [ 'Sequence:'  => $sequence ];
                 hover("Low complexity", \@data);
               }
description  = 0
label        = 0
link         = ""
key          = Low Complexity Regions
citation     = Regions of low sequence complexity, as defined by the
               <code>seg</code> algorithm

[ExportPred]
feature      = domain:ExportPred
glyph        = segments
font2color   = black
fgcolor      =  magenta
bgcolor      = lightgreen
height       = 8 
title        = sub {
                 my $f = shift;
                 my @data;
                 push @data, [ 'Coordinates:' => $f->start . '..' . $f->end ];
                 hover("Predicted export domain", \@data);
               }
label        = 0
description  = 0
link         = ""
key          = Predicted Protein Export Domains
citation     =  Export domains predicted by ExportPred
